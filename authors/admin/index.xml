<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xin态好先生 | CoMath</title>
    <link>https://CoMath21.github.io/authors/admin/</link>
      <atom:link href="https://CoMath21.github.io/authors/admin/index.xml" rel="self" type="application/rss+xml" />
    <description>Xin态好先生</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>© 2021 CoMath Powered by Hugo Theme Academic</copyright><lastBuildDate>Sun, 31 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://CoMath21.github.io/authors/admin/avatar_hu229ab2ae4b832f0d41c08e3dce763b22_681268_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Xin态好先生</title>
      <link>https://CoMath21.github.io/authors/admin/</link>
    </image>
    
    <item>
      <title>Django学习笔记</title>
      <link>https://CoMath21.github.io/post/1-%E6%85%95%E8%AF%BE%E7%BD%91mxonline/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-%E6%85%95%E8%AF%BE%E7%BD%91mxonline/</guid>
      <description>&lt;p&gt;　　Python下有许多款不同的 Web 框架. Django是最有代表性的一个. 许多成功的网站和APP都基于Django. 2019年通过慕课网的视频教学整理了由基于Django的网站开发. 整过过程持续了多长时间已经记不清了. 中间很多磕磕碰碰，网上找了很多材料整合成了一个笔记. 本来想着能接着做点东西，但后来还是没捡起来.&lt;/p&gt;
&lt;h2 id=&#34;虚拟环境的安装与配置&#34;&gt;虚拟环境的安装与配置&lt;/h2&gt;
&lt;h3 id=&#34;virtualenv&#34;&gt;virtualenv&lt;/h3&gt;
&lt;p&gt;virtualenv是一款轻量级第三方虚拟环境管理工具.&lt;/p&gt;
&lt;h4 id=&#34;windows&#34;&gt;Windows&lt;/h4&gt;
&lt;p&gt;安装virtualenv命令：pip install virtualenv&lt;/p&gt;
&lt;p&gt;pip安装技巧：python豆瓣源：https://pypi.doubanio.com/simple/&lt;/p&gt;
&lt;p&gt;安装时中间加入豆瓣源即可，如：&lt;/p&gt;
&lt;p&gt;pip3 install -i &lt;a href=&#34;https://pypi.doubanio.com/simple/&#34;&gt;https://pypi.doubanio.com/simple/&lt;/a&gt; selenium&lt;/p&gt;
&lt;p&gt;easy_install -i &lt;a href=&#34;https://pypi.doubanio.com/simple/&#34;&gt;https://pypi.doubanio.com/simple/&lt;/a&gt; selenium&lt;/p&gt;
&lt;p&gt;创建虚拟环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常创建：virtualenv 虚拟环境名称&lt;/li&gt;
&lt;li&gt;其他版本：virtualenv -p python版本\python.exe 虚拟环境名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入到虚拟环境的目录下执行activate.bat命令启动虚拟环境&lt;/p&gt;
&lt;p&gt;退出虚拟环境deactivate.bat命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1.jpg&#34; alt=&#34;1563103307424&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./2.jpg&#34; alt=&#34;1563103375274&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;linux&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;安装virtualenv命令：sudo apt-get install python-virtualenv&lt;/p&gt;
&lt;p&gt;创建虚拟环境：virtualenv 虚拟环境名称（默认是Python2.7版本）&lt;/p&gt;
&lt;p&gt;需要进入到虚拟环境的bin目录下执行source activate启动虚拟环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./3.jpg&#34; alt=&#34;1563089841365&#34;&gt;&lt;/p&gt;
&lt;p&gt;退出虚拟环境命令：deactivate&lt;/p&gt;
&lt;p&gt;创建Python3的虚拟环境：&lt;/p&gt;
&lt;p&gt;virtualenv -p python3目录 虚拟环境名称&lt;/p&gt;
&lt;p&gt;virtualenv -p /usr/bin/python3 py3test&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./4.jpg&#34; alt=&#34;1563091155983&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;virtualenvwrapper&#34;&gt;virtualenvwrapper&lt;/h3&gt;
&lt;p&gt;virtualenv使用过于麻烦，所以便于管理，使用virtualenvwrapper（依赖virtualenv）&lt;/p&gt;
&lt;h4 id=&#34;windows-1&#34;&gt;Windows&lt;/h4&gt;
&lt;p&gt;安装：&lt;/p&gt;
&lt;p&gt;​	pip install virtualenvwrapper-win&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workon：查看所有虚拟环境；&lt;/li&gt;
&lt;li&gt;workon XXX：启动名为XXX的虚拟工作环境；&lt;/li&gt;
&lt;li&gt;mkvirtualenv XXX ：创建名为XXX的虚拟环境；（目录在C:\Users\Wise_Hai\Envs）&lt;/li&gt;
&lt;li&gt;mkvirtualenv &amp;ndash;python=python版本目录\python.exe XXX：创建名为XXX的python版本的虚拟环境；&lt;/li&gt;
&lt;li&gt;deactivate：关闭当前虚拟环境.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./5.jpg&#34; alt=&#34;1563104365797&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置工作环境（可选）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机右键属性 》高级系统设置 》环境变量&lt;/li&gt;
&lt;li&gt;新建系统变量
&lt;ul&gt;
&lt;li&gt;变量名：WORKON_HOME&lt;/li&gt;
&lt;li&gt;变量值：工作环境地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存并退出，重新开启命令行窗口&lt;/li&gt;
&lt;li&gt;如果需要，可以找到之前的虚拟环境目录将其中的虚拟环境直接拷贝过来即可.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;备注：可在虚拟环境中安装任意包，如果出错可以在&lt;a href=&#34;https://www.lfd.uci.edu/~gohlke/pythonlibs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;中找到安装失败的包及相应的版本进行下载安装，在执行之前的安装命令.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./6.jpg&#34; alt=&#34;1563104605220&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;linux-1&#34;&gt;Linux&lt;/h4&gt;
&lt;p&gt;安装命令：pip install virtualenvwrapper&lt;/p&gt;
&lt;p&gt;Linux不能像Windows一样直接调用mkvirtualenv，因为没有配置.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建目录来存放虚拟环境&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;mkdir $HOME/.virtualenvs&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;需要通过sudo find / -name virtualenvwrapper.sh在根目录下查找virtualenvwrapper.sh文件的路径&lt;/li&gt;
&lt;li&gt;配置文件：vim/sudo gedit ~/.bashrc
&lt;ul&gt;
&lt;li&gt;export  WORKON_HOME=$HOME/ .virtualenvs&lt;/li&gt;
&lt;li&gt;export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3    #如果是pip3安装的virtualenvwrapper把这条加上&lt;/li&gt;
&lt;li&gt;最后一行添加source virtualenvwrapper.sh文件的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新加载：source ~/.bashrc&lt;/li&gt;
&lt;li&gt;mkvirtualenv XXX ：在~/ .virtualenvs创建名为XXX的虚拟环境&lt;/li&gt;
&lt;li&gt;mkvirtualenv &amp;ndash;python=/usr/bin/python3 XXX：创建名为XXX的python版本的虚拟环境；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;环境配置及model设计&#34;&gt;环境配置及Model设计&lt;/h2&gt;
&lt;p&gt;环境配置（PyCharm，MySQL，Django1.11）&lt;/p&gt;
&lt;p&gt;​	此项目主要是在Windows上创建并执行，所以所有环境需改成Windows环境，由于之前安装过Anconda，而虚拟环境需要pip安装virtualenv，所以通过以下方法使得Anconda与Python3.6共存，并且可以切换：&lt;/p&gt;
&lt;p&gt;​	安装Python3.6（不添加到Path），在Python目录下将python.exe文件更名为python3.exe，并将其添加到Path下即可.测试：cmd中使用python3命令.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./7.jpg&#34; alt=&#34;1563102590513&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;项目初始化&#34;&gt;项目初始化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建虚拟环境（这里随便起的名字）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./8.jpg&#34; alt=&#34;1563107285042&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Django Rest Framework（基于Django）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装Django Rest Framework：pip install djangorestframework&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./9.jpg&#34; alt=&#34;1563107492625&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：DjangRestFramework没有安装Django，需要手动安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装Django&lt;/p&gt;
&lt;p&gt;pip install -i &lt;a href=&#34;https://pypi.doubanio.com/simple/&#34;&gt;https://pypi.doubanio.com/simple/&lt;/a&gt; django&lt;/p&gt;
&lt;p&gt;地址：https://www.django-rest-framework.org/&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./09.jpg&#34; alt=&#34;1563107875715&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装markdown和django-filter&lt;/p&gt;
&lt;p&gt;pip install markdown django-filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pycharm创建Django项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./10.jpg&#34; alt=&#34;1563190798577&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./11.jpg&#34; alt=&#34;1563108795550&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./12.jpg&#34; alt=&#34;1563108864784&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更改数据库配置&lt;/p&gt;
&lt;p&gt;将setting.py中的DATABASE内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./13.jpg&#34; alt=&#34;1563109120733&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,  # 连接mysql数据库
        &#39;NAME&#39;: &amp;quot;mxshop&amp;quot;,  # 数据库名称
        &#39;USER&#39;: &#39;root&#39;,  # 账户
        &#39;PASSWORD&#39;: &amp;quot;root&amp;quot;,  # 密码
        &#39;HOST&#39;: &amp;quot;127.0.0.1&amp;quot;,  # 地址
        &amp;quot;OPTIONS&amp;quot;:{&amp;quot;init_command&amp;quot;:&amp;quot;SET default_storage_engine=INNODB;&amp;quot;} # mysql数据库的版本5.6以后
        # &#39;OPTIONS&#39;: { &#39;init_command&#39;: &#39;SET storage_engine=INNODB;&#39; }
        # 用于第三方登录
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建数据库&lt;/p&gt;
&lt;p&gt;MySQL数据库下创建名为mxshop的数据库（此时重新运行醒目会出现数据库连接错误，主要是因为缺少连接数据的mysqlckient或者MySQL-python包）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./14.jpg&#34; alt=&#34;1563109995778&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装mysqlclient数据库&lt;/p&gt;
&lt;p&gt;pip install -i &lt;a href=&#34;https://pypi.doubanio.com/simple/&#34;&gt;https://pypi.doubanio.com/simple/&lt;/a&gt; mysqlclient&lt;/p&gt;
&lt;p&gt;此处可能有坑，如果报错无法安装，https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient找到对应版本下载，通过pip install xx 安装即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./15.jpg&#34; alt=&#34;1565411225582&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果出现下面问题，可能的问题&lt;/p&gt;
&lt;p&gt;?: (mysql.W002) MySQL Strict Mode is not set for database connection &amp;lsquo;default&amp;rsquo;
HINT: MySQL&amp;rsquo;s Strict Mode fixes many data integrity problems in MySQL, such as data truncation upon insertion, by escalating warnings into errors. It is strongly recommended you activate it. See: &lt;a href=&#34;https://docs.djangoproject.com/en/2.1/ref/databases/#mysql-sql-mode&#34;&gt;https://docs.djangoproject.com/en/2.1/ref/databases/#mysql-sql-mode&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 解决
DATABASES = {    
 &#39;default&#39;: {     
     &#39;OPTIONS&#39;: {  
         &amp;quot;init_command&amp;quot;: &amp;quot;SET sql_mode=&#39;STRICT_TRANS_TABLES&#39;&amp;quot;,     
            }   
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装图片处理包&lt;/p&gt;
&lt;p&gt;pip install -i &lt;a href=&#34;https://pypi.doubanio.com/simple/&#34;&gt;https://pypi.doubanio.com/simple/&lt;/a&gt; pillow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整理项目结构&lt;/p&gt;
&lt;p&gt;创建Package&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apps：保存所有app&lt;/li&gt;
&lt;li&gt;extra_apps：存放第三方的包，随着源码包打包而不会安装到虚拟环境中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建Directory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;media：保存图片等&lt;/li&gt;
&lt;li&gt;db_tools：数据库初始化等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了以后方便将apps和extra_apps映射Sources Root并且加入到setting的搜索目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./16.jpg&#34; alt=&#34;1563111411195&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))
sys.path.insert(0, os.path.join(BASE_DIR, &#39;extra_apps&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;app-models设计&#34;&gt;app models设计&lt;/h3&gt;
&lt;p&gt;在Tools的Run manage.py Task下运行startapp xxx创建model&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./17.jpg&#34; alt=&#34;1565438154785&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./18.jpg&#34; alt=&#34;1565438175298&#34;&gt;&lt;/p&gt;
&lt;p&gt;找到对应model的逻辑，创建相应的model&lt;/p&gt;
&lt;p&gt;注意：此处有坑！！&lt;/p&gt;
&lt;p&gt;与视频不同的地方在于django以及MySQL的版本不同，创建外键的时候需要添加&lt;code&gt;on_delete=models.CASCADE&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;users-用户相关&#34;&gt;users-用户相关&lt;/h5&gt;
&lt;p&gt;这里面主要是使用UserProfile覆盖了原Users&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# _*_ encoding:utf-8
from datetime import datetime

from django.db import models
from django.contrib.auth.models import AbstractUser


class UserProfile(AbstractUser):
    nick_name = models.CharField(max_length=50, verbose_name=u&amp;quot;昵称&amp;quot;, default=&amp;quot;&amp;quot;)
    birthday = models.DateField(verbose_name=u&amp;quot;生日&amp;quot;, null=True, blank=True)
    gender = models.CharField(max_length=5, choices=((&amp;quot;male&amp;quot;, u&amp;quot;男&amp;quot;), (&amp;quot;female&amp;quot;, &amp;quot;女&amp;quot;)), default=&amp;quot;female&amp;quot;)
    address = models.CharField(max_length=100, default=u&amp;quot;&amp;quot;)
    mobile = models.CharField(max_length=11, null=True, blank=True)
    image = models.ImageField(upload_to=&amp;quot;image/%Y/%m&amp;quot;, default=u&amp;quot;image/default..jpg&amp;quot;, max_length=100)

    class Meta:
        verbose_name = u&amp;quot;用户信息&amp;quot;
        verbose_name_plural = verbose_name

    def __unicode__(self):
        return self.username


class EmailVerifyRecord(models.Model):
    code = models.CharField(max_length=20, verbose_name=u&amp;quot;验证码&amp;quot;)
    email = models.EmailField(max_length=50, verbose_name=u&amp;quot;邮箱&amp;quot;)
    send_type = models.CharField(max_length=10, choices=((&amp;quot;register&amp;quot;, u&amp;quot;注册&amp;quot;), (&amp;quot;forget&amp;quot;, u&amp;quot;找回密码&amp;quot;)))
    send_time = models.DateTimeField(default=datetime.now)

    class Meta:
        verbose_name = u&amp;quot;邮箱验证码&amp;quot;
        verbose_name_plural = verbose_name

    # def __unicode__(self):
    #     return self.username


class Banner(models.Model):
    title = models.CharField(max_length=100, verbose_name=u&amp;quot;标题&amp;quot;)
    image = models.ImageField(upload_to=&amp;quot;banner/%Y/%m&amp;quot;, verbose_name=u&amp;quot;轮播图&amp;quot;)
    url = models.URLField(max_length=200, verbose_name=u&amp;quot;访问地址&amp;quot;)
    index = models.IntegerField(default=100, verbose_name=u&amp;quot;顺序&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;轮播图&amp;quot;
        verbose_name_plural = verbose_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;courses-课程相关&#34;&gt;courses-课程相关&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# _*_ encoding:utf-8
from django.db import models
from datetime import datetime


class Course(models.Model):
    name = models.CharField(max_length=50, verbose_name=u&amp;quot;课程名称&amp;quot;)
    desc = models.CharField(max_length=50, verbose_name=u&amp;quot;课程描述&amp;quot;)
    detail = models.TextField(verbose_name=u&amp;quot;课程详情&amp;quot;)
    degree = models.CharField(max_length=2, choices=((&amp;quot;cj&amp;quot;, &amp;quot;初级&amp;quot;), (&amp;quot;zj&amp;quot;, &amp;quot;中级&amp;quot;), (&amp;quot;gj&amp;quot;, &amp;quot;高级&amp;quot;)))
    learn_times = models.IntegerField(default=0, verbose_name=u&amp;quot;学习时长（分钟）&amp;quot;)
    students = models.IntegerField(default=0, verbose_name=u&amp;quot;学习人数&amp;quot;)
    fav_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;收藏人数&amp;quot;)
    image = models.ImageField(upload_to=&amp;quot;courses/%Y/%m&amp;quot;, verbose_name=u&amp;quot;封面图&amp;quot;, max_length=100)
    click_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;点击数&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;课程&amp;quot;
        verbose_name_plural = verbose_name


class Lesson(models.Model):
    course = models.ForeignKey(Course, verbose_name=u&amp;quot;课程&amp;quot;, on_delete=models.CASCADE)
    name = models.CharField(max_length=100, verbose_name=u&amp;quot;章节名称&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;章节&amp;quot;
        verbose_name_plural = verbose_name


class Video(models.Model):
    lesson = models.ForeignKey(Lesson, verbose_name=u&amp;quot;课程&amp;quot;, on_delete=models.CASCADE)
    name = models.CharField(max_length=100, verbose_name=u&amp;quot;视频名称&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;视频&amp;quot;
        verbose_name_plural = verbose_name


class CourseResource(models.Model):
    course = models.ForeignKey(Course, verbose_name=u&amp;quot;课程&amp;quot;, on_delete=models.CASCADE)
    name = models.CharField(max_length=100, verbose_name=u&amp;quot;名称&amp;quot;)
    download = models.FileField(upload_to=&amp;quot;course/resource/%Y/%m&amp;quot;, verbose_name=u&amp;quot;资源文件&amp;quot;,  max_length=100)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;课程资源&amp;quot;
        verbose_name_plural = verbose_name

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;organization-机构相关&#34;&gt;organization-机构相关&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# _*_ encoding:utf-8
from django.db import models
from datetime import datetime


class CityDic(models.Model):
    name = models.CharField(max_length=20, verbose_name=u&amp;quot;城市&amp;quot;)
    desc = models.CharField(max_length=200, verbose_name=u&amp;quot;描述&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;城市&amp;quot;
        verbose_name_plural = verbose_name


class CourseOrg(models.Model):
    name = models.CharField(max_length=50, verbose_name=u&amp;quot;机构名称&amp;quot;)
    desc = models.CharField(max_length=50, verbose_name=u&amp;quot;机构描述&amp;quot;)
    fav_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;收藏人数&amp;quot;)
    click_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;点击数&amp;quot;)
    image = models.ImageField(upload_to=&amp;quot;courses/%Y/%m&amp;quot;, verbose_name=u&amp;quot;封面图&amp;quot;, max_length=100)
    address = models.CharField(max_length=150, verbose_name=u&amp;quot;机构地址&amp;quot;)
    city = models.ForeignKey(CityDic, on_delete=models.CASCADE, verbose_name=u&amp;quot;所在城市&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;课程机构&amp;quot;
        verbose_name_plural = verbose_name


class Teacher(models.Model):
    org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=u&amp;quot;所属机构&amp;quot;)
    name = models.CharField(max_length=50, verbose_name=u&amp;quot;教师名&amp;quot;)
    work_years = models.IntegerField(default=0, verbose_name=u&amp;quot;工作年限&amp;quot;)
    work_company = models.CharField(max_length=50, verbose_name=u&amp;quot;就职公司&amp;quot;)
    work_position = models.CharField(max_length=50, verbose_name=u&amp;quot;公司职位&amp;quot;)
    points = models.CharField(max_length=50, verbose_name=u&amp;quot;教学特点&amp;quot;)
    fav_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;收藏人数&amp;quot;)
    click_nums = models.IntegerField(default=0, verbose_name=u&amp;quot;点击数&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;教师&amp;quot;
        verbose_name_plural = verbose_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;operation-操作相关&#34;&gt;operation-操作相关&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# _*_ encoding:utf-8
from django.db import models
from datetime import datetime

from users.models import UserProfile
from courses.models import Course


class UserAsk(models.Model):
    name = models.CharField(max_length=20, verbose_name=u&amp;quot;姓名&amp;quot;)
    mobile = models.CharField(max_length=11, verbose_name=u&amp;quot;手机&amp;quot;)
    course_name = models.CharField(max_length=50, verbose_name=u&amp;quot;课程名&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;用户咨询&amp;quot;
        verbose_name_plural = verbose_name


class CourseComments(models.Model):
    &amp;quot;课程评论&amp;quot;
    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=u&amp;quot;用户&amp;quot;)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=u&amp;quot;课程&amp;quot;)
    comments = models.CharField(max_length=200, verbose_name=u&amp;quot;评论&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;课程评论&amp;quot;
        verbose_name_plural = verbose_name


class UserFavorite(models.Model):
    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=u&amp;quot;用户&amp;quot;)
    fav_id = models.IntegerField(default=0, verbose_name=u&amp;quot;数据id&amp;quot;)
    fav_type = models.IntegerField(choices=((1, &amp;quot;课程&amp;quot;), (2, &amp;quot;课程机构&amp;quot;), (3, &amp;quot;讲师&amp;quot;)))
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;用户收藏&amp;quot;
        verbose_name_plural = verbose_name


class UserMessage(models.Model):
    user = models.IntegerField(default=0, verbose_name=u&amp;quot;接收用户&amp;quot;)
    message = models.CharField(max_length=500, verbose_name=u&amp;quot;消息内容&amp;quot;)
    has_read = models.BooleanField(default=False, verbose_name=u&amp;quot;是否已读&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;用户消息&amp;quot;
        verbose_name_plural = verbose_name


class UserCourse(models.Model):
    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=u&amp;quot;用户&amp;quot;)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=u&amp;quot;课程&amp;quot;)
    add_time = models.DateTimeField(default=datetime.now, verbose_name=u&amp;quot;添加时间&amp;quot;)

    class Meta:
        verbose_name = u&amp;quot;用户课程&amp;quot;
        verbose_name_plural = verbose_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;考虑到存在很多models的情况，创建名为apps的Python Package，存储所有的models，并且将所有apps映射成Sources Root（否则，各个model中调用的包将报错）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./19.jpg&#34; alt=&#34;1565438643911&#34;&gt;&lt;/p&gt;
&lt;p&gt;并且，在settings.py中设置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR, &#39;apps&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;文件上传操作&#34;&gt;文件上传操作&lt;/h3&gt;
&lt;p&gt;设置字段的时候存在上传文件路径，所以需要配置文件上传的目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image = models.ImageField(upload_to=&amp;quot;courses/%Y/%m&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;项目根目录下创建名为miedia的Directory，然后在settings.py中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MEDIA_URL = &#39;/media/&#39;
MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;文件上传访问&#34;&gt;文件上传访问&lt;/h3&gt;
&lt;p&gt;配置文件上传访问处理函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.views.static import serve
from mxonline.settings import MEDIA_ROOT

# 配置文件上传的访问处理函数
    url(r&#39;^media/(?P&amp;lt;path&amp;gt;.*)$&#39;, serve, {&amp;quot;document_root&amp;quot;: MEDIA_ROOT}),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置上下文处理器（在settings.py中找到TEMPLATES下的&lt;code&gt;&#39;context_processors&#39;&lt;/code&gt; 添加&lt;code&gt;&#39;django.template.context_processors.media&#39;,&lt;/code&gt;),其目的是将&lt;code&gt;{{ MEDIA_URL }}&lt;/code&gt;注册到url中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TEMPLATES = [
    {
        &#39;OPTIONS&#39;: {
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.media&#39;,
            ],
        },
    },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在对应位置即可访问上传的图片&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;img width=&amp;quot;200&amp;quot; height=&amp;quot;120&amp;quot; class=&amp;quot;scrollLoading&amp;quot; data-url=&amp;quot;{{ MEDIA_URL }}{{ xxx.image }}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;后台管理系统&#34;&gt;后台管理系统&lt;/h2&gt;
&lt;h3 id=&#34;admin&#34;&gt;admin&lt;/h3&gt;
&lt;p&gt;创建Django之后就会自动生成再带的后台管理系统（注意：红色框框）&lt;/p&gt;
&lt;p&gt;在PyCharm的新版本中创建Django文件的时候，不要勾掉最后的Enable Django admin&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./20.jpg&#34; alt=&#34;1563190798577&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过http://127.0.0.1:8000/admin进行访问，但是Django并不默认生成登录账号及密码，需要通过createsuperuser注册admin后台管理的账号和密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./21.jpg&#34; alt=&#34;1565439607016&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./22.jpg&#34; alt=&#34;1565439586940&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改成中文显示：在settings.py中设置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;LANGUAGE_CODE = &#39;zh-hans&#39;

TIME_ZONE = &#39;Asia/Shanghai&#39;

USE_I18N = True

USE_L10N = True

USE_TZ = False

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./23.jpg&#34; alt=&#34;1565439746890&#34;&gt;&lt;/p&gt;
&lt;p&gt;默认显示的只有Group，如果想显示其他model，需要在对应的model目录下的admin中创建对应的class即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;form django.contrib import admin 
form .model import UserProfile

class UserProfileAdmin(admin.ModelAdmin): 	# 添加一个管理器
	pass
	
admin.site.register(UserProfile, UserProfileAdmin)	# 关联注册
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;url配置技巧&#34;&gt;url配置技巧&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;urlpatterns = [
    # url(R&#39;^admin/&#39;, admin.site.urls)
    url(r&#39;^form/$&#39;, getform, name=&#39;go_form&#39;)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解释为：以^后的名字开头，以/$结尾，转到getform的views下，在html的form表单中，可以通过配置action=&amp;quot;{%  url  &amp;lsquo;go_form&amp;rsquo;  %}&amp;ldquo;提交表单.&lt;/p&gt;
&lt;h3 id=&#34;xadmin&#34;&gt;xadmin&lt;/h3&gt;
&lt;h4 id=&#34;命令安装&#34;&gt;命令安装&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;在对应的虚拟环境中通过pip install xadmin进行安装.（依赖的安装包也会被安装）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境配置&lt;/p&gt;
&lt;p&gt;在项目setting.py中，找到INSTALLED_APPS，在下面添加&amp;rsquo;xadmin&amp;rsquo;以及&amp;rsquo;crispy_forms&#39;，在urls.py中，引入xadmin包，并经命令中的admin改成xadmin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xadmin
   
urlpatterns = [
 url(r&#39;^xadmin/&#39;, xadmin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成管理表单&lt;/p&gt;
&lt;p&gt;配置之后，xadmin需要自己的管理表单，所以重新创建表单makemigrations，migrate&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;源码安装推荐使用&#34;&gt;源码安装(推荐使用)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitHub下载&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./24.jpg&#34; alt=&#34;1563241510864&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./25.jpg&#34; alt=&#34;1563241532771&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./26.jpg&#34; alt=&#34;1563241620524&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;解压下载的xadmin-master.zip文件，找到其中的xadmin文件夹并将其拷贝到项目文件的根目录下，为了能够更好的管理，也为了model能够直接访问到xadmin，创建一个package包（例如：extra_apps），并将其映射成Sources Root，将xadmin文件夹拖到改文件夹下即可.&lt;/p&gt;
&lt;p&gt;注意：此时可以卸载命令行安装的xadmin包，但是不要卸载自动下载的依赖包.除此之外，还需要在setting.py下注册extra_apps.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sys.path.insert(0, os.path.join(BASE_DIR, &#39;extra_apps&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;依赖包：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./27.jpg&#34; alt=&#34;1565441213393&#34;&gt;&lt;/p&gt;
&lt;p&gt;此处有坑：（Django版本在2.0以上有坑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先报错：“ from future.utils import iteritems ImportError: No module named future.utils”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原因是缺少future包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip install future&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后报错：from django.urls import NoReverseMatch, reverse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原因是django2.0 把原来的 django.core.urlresolvers 包 更改为了 django.urls包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将django.core.urlresolvers 改为 django.urls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有坑！！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有坑！！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有坑！！！！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照https://www.cnblogs.com/netalen/p/10987016.html更改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有坑：需要将生成xadmin管理表，即执行makemigrations xadmin以及migrate xadmin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境配置&lt;/p&gt;
&lt;p&gt;将model注册到xadmin：&lt;/p&gt;
&lt;p&gt;在相应的model创建adminx.py文件，并且&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xadmin
   
from .models import modelClassName
   
class modelClassNameAdmin(object):
    list_display = [&#39;字段1&#39;, &#39;字段2&#39;, ...]/(&#39;&#39;,)		# 显示xadmin列表题头(最好选择数组类型)
    search_fields = [&#39;字段1&#39;, &#39;字段2&#39;, ...]/(&#39;&#39;,)		#搜索功能	
    listr_filter = [&#39;字段1&#39;, &#39;字段2&#39;, ...]/(&#39;&#39;,)		# 过滤器功能
       
xadmin.site.register(modelClassName, modelClassNameAdmin)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果存在外键，在添加过滤器功能的时候需要制定通过哪个字段，如：&amp;lsquo;User__name&amp;rsquo;&lt;/p&gt;
&lt;p&gt;这里要注意的是，添加一条数据之后需要添加以下代码，才能显示想要的数据&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __unicode__(self):
 return self.name
# 或者
def __str__(self):
    return self.name
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xadmin源码安装优势&lt;/p&gt;
&lt;p&gt;可以享用xadmin的新特性，并且可以根据需求添加插件等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xadmin全局修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置主题：&lt;/p&gt;
&lt;p&gt;在adminx.py下创建calss&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from xadmin import views
     
class BaseSetting(object):
   enable_themes = True
   use_bootswatch = True
         
xadmin.site.register(views.BaseAdminView, BaseSetting)    
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from xadmin import views
     
class GlobalSetting(object):
   site_title = &amp;quot;&amp;quot;
   site_footer = &amp;quot;&amp;quot;
    menu_style = &amp;quot;accordion&amp;quot;	# 折叠菜单
         
xadmin.site.register(views.CommAdminView, GlobalSetting)  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./28.jpg&#34; alt=&#34;1565495646386&#34;&gt;&lt;/p&gt;
&lt;p&gt;备注：如果需要对显示菜单名称改成中文咋需要在对应model下找到apps.py进行添加，然后更改当前目录下的&lt;code&gt;__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;apps.py下添加&lt;code&gt;verbose_name = u&amp;quot;Name&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt;下添加：&lt;code&gt;default_app_config = model.apps.ModelConfig &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：如果在setting.py中配置&lt;code&gt;.XxxConfig&lt;/code&gt;则不需要上述&lt;code&gt;__init__.py&lt;/code&gt;操作.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./29.jpg&#34; alt=&#34;1565496620777&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;前端&#34;&gt;前端&lt;/h2&gt;
&lt;h3 id=&#34;首页&#34;&gt;首页&lt;/h3&gt;
&lt;p&gt;首先准备好前端页面及样式&lt;/p&gt;
&lt;p&gt;在项目下创建名为static的Directory，同于存放所有的静态文件，并将img/images/css/js等文件拷贝到static文件夹下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./30.jpg&#34; alt=&#34;1565497383530&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后在urls.py中配置url即可访问&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.views.generic import TemplateView

urlpatterns = [
    url(&#39;^$&#39;, TemplateView.as_view(template_name=&amp;quot;index.html&amp;quot;), name=&amp;quot;index&amp;quot;)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;存在问题：静态文件没有加载&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;settings.py中找到&lt;code&gt;STATIC_URL = &#39;/static/&#39;&lt;/code&gt;，在下面添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;STATICFILES_DIRS = (
    os.path.join(BASE_DIR, &amp;quot;static&amp;quot;),
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在对应的html界面中找到对应的样式文件，将相对路径跟改为/static/&amp;hellip;或者引入&lt;code&gt;{% load staticfiles %}&lt;/code&gt;然后使用&lt;code&gt;{% static &#39;css/xx.css&#39; %}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;登录页面&#34;&gt;登录页面&lt;/h3&gt;
&lt;h4 id=&#34;页面&#34;&gt;页面&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;复制登录页面到template下，并更改样式文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置url访问路径：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(&#39;^login/$&#39;, TemplateView.as_view(template_name=&amp;quot;login.html&amp;quot;), name=&amp;quot;login&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到index.html下的登录入口，a标签更改为&lt;code&gt;href=&amp;quot;/login&amp;quot;&lt;/code&gt;或者&lt;code&gt;{% url &#39;login&#39; %}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;url使用include&#34;&gt;url使用include&lt;/h5&gt;
&lt;p&gt;在项目下的urls.py文件中可以通过include导入其他url配置文件（url分解），也是为了更好的管理，不至于项目下的urls.py杂乱无章. 可以在对应的app下创建urls.py文件，然后导入即可.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 项目下的urls.py文件
from django.conf.urls import url, include

urlpatterns = [
    # namespace命名空间
	url(r&#39;^org/$&#39;, include(&#39;organization.urls&#39;), namespace=&amp;quot;org&amp;quot;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# organization下的urls.py
from django.conf.urls import url, include

urlpatterns = [
    # ...
	url(r&#39;^list/$&#39;, OrgListView.as_view(), name=&amp;quot;org_list&amp;quot;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;访问以&lt;code&gt;org*&lt;/code&gt;开头的的url都会到organization.urls中查找，提交变为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;{% url &#39;org:org_list&#39; %}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;访问地址由原来的&lt;code&gt;http://127.0.0.1:8000/org-list&lt;/code&gt;变为&lt;code&gt;http://127.0.0.1:8000/org/list&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;逻辑&#34;&gt;逻辑&lt;/h4&gt;
&lt;p&gt;在users下的views.py中添加逻辑&lt;/p&gt;
&lt;p&gt;注意：在view中配置函数逻辑后，就可以替换url下的内容，如：&lt;/p&gt;
&lt;p&gt;在views.py中创建login函数方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def login(request):
	if request.method == &amp;quot;POST&amp;quot;:
		pass
	elif request.method == &amp;quot;GET&amp;quot;:
		return render(request, &amp;quot;login.html&amp;quot;, {})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在urls.py中就可以更改为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.views.generic import TemplateView

from model.views import login

urlpatterns = [
	url(&#39;^$&#39;, login, name=&amp;quot;index&amp;quot;)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：这里面的&lt;code&gt;login&lt;/code&gt;不带()，不是点用函数方法，只是指向了&lt;code&gt;login&lt;/code&gt;函数.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTML表单提交&lt;/p&gt;
&lt;p&gt;主要在于action以及method，除此之外，Django自带一种安全机制，防止跨越提交，反复向后台提交表单对服务器造成负担，Django为了防止这种攻击，会做一种CSRF验证（当用post提交数据的时候，Django会去检查是否有一个CSRF的随机字符串，如果没有就会报错），所以需要在form表单里面添加&lt;code&gt;{% csrf_token %}&lt;/code&gt;（可以查看页面源码,看到form中有一个input是隐藏的）!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./31.jpg&#34; alt=&#34;1565500485737&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接收数据&lt;/p&gt;
&lt;p&gt;views.py通过&lt;code&gt;request.POST.get(&amp;quot;labelName&amp;quot;,&amp;quot;&amp;quot;)&lt;/code&gt;来获取表单中的数据，第一个参数为参数名字，第二个参数为默认值.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于函数的登录操作&lt;/p&gt;
&lt;p&gt;Django自带的用户认证auth，django.contrib.auth中提供了许多方法，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;authenticate()&lt;/p&gt;
&lt;p&gt;提供了用户认证，即验证用户名以及密码是否正确，一般需要username  password两个关键字参数，如果认证信息有效，会返回一个  User  对象.authenticate()会在User 对象上设置一个属性来标识后端已经认证了该用户，且该信息在后续的登录过程中是需要的。当试图登陆一个从数据库中直接取出来不经过authenticate()的User对象时会报错！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth import authenticate
user = authenticate(username=&#39;username&#39;,password=&#39;password&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;User对象&lt;/p&gt;
&lt;p&gt;User 对象属性：username， password（必填项）password用哈希算法保存到数据库&lt;/p&gt;
&lt;p&gt;is_staff ： 用户是否拥有网站的管理权限.&lt;/p&gt;
&lt;p&gt;is_active ： 是否允许用户登录, 设置为&lt;code&gt;False&lt;/code&gt;，可以不用删除用户来禁止 用户登录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;login(HttpRequest, user)　　
该函数接受一个HttpRequest对象，以及一个认证了的User对象&lt;/p&gt;
&lt;p&gt;备注：auth.login方法将校验通过的用户封装到request中，这样在request的生命周期我们都可以使用request.user得到这个用户的对象，不管是在视图函数还是在模板语言中都可以使用request.user 然后在 &lt;code&gt;.字段属性&lt;/code&gt;  来取到需要的内容。此函数使用django的session框架给某个已认证的用户附加上session id等信息.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth import authenticate, login
        
def user_login(request):
    if request.method == &amp;quot;POST&amp;quot;:
        username = request.POST.get(&amp;quot;username&amp;quot;, &amp;quot;&amp;quot;)
        password = request.POST.get(&amp;quot;password&amp;quot;, &amp;quot;&amp;quot;)
        user = authenticate(username=username, password=password)
        if user is not None:
            login(request, user)
            return render(request, &amp;quot;index.html&amp;quot;)
        else:
            return render(request, &amp;quot;login.html&amp;quot;, {&amp;quot;msg&amp;quot;: &amp;quot;用户名或密码错误&amp;quot;})
    elif request.method == &amp;quot;GET&amp;quot;:
        return render(request, &amp;quot;login.html&amp;quot;, {})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示错误信息：&lt;/p&gt;
&lt;p&gt;逻辑代码中返回的错误信息可以用&lt;code&gt;{{    }}&lt;/code&gt;来显示在页面中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;div class=&amp;quot;error btns login-form-tips&amp;quot; id=&amp;quot;jsLoginTips&amp;quot;&amp;gt;{{ msg }}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./32.jpg&#34; alt=&#34;1565504344116&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is_authenticated()&lt;/p&gt;
&lt;p&gt;判断是否已经通过了认证，但通过认证并不意味着用户拥有任何权限，这个方法甚至也不检查该用户是否处于激活状态，只是表明用户成功的通过了认证。&lt;/p&gt;
&lt;p&gt;这个方法很重要, 在后台用request.user.is_authenticated()判断用户是否已经登录，如果true则可以向前台展示request.user.name&lt;/p&gt;
&lt;p&gt;备注：前端可以通过&lt;code&gt;{% request.user.is_authenticated() %}&lt;/code&gt;进行判断.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logout(request) 注销用户　&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth import logout
        
def logout_view(request):
  logout(request)
  # Redirect to a success page.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数接受一个HttpRequest对象，无返回值。当调用该函数时，当前请求的session信息会全部清除。该用户即使没有登录，使用该函数也不会报错.&lt;/p&gt;
&lt;p&gt;备注：注销用户后，直接访问这个路径，还可以登录，但是可以&lt;code&gt;print(request.user)&lt;/code&gt;，当用户通过校验登录时，得到的是一个具体的用户对象；当注销时，再次访问，就会输出AnonymousUser（是一个类 &amp;lt;class &amp;lsquo;django.utils.functional.SimpleLazyObject&amp;rsquo;&amp;gt;），意为匿名用户，可以通过这个处理一些判断.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多账户信息登录&lt;/p&gt;
&lt;p&gt;需要在usersModel下的views.py中创建继承&lt;code&gt;django.contrib.auth.backends import ModelBackends&lt;/code&gt;的类，然后定义函数，并将函数注册到settings.py下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth.backends import ModelBackends
from django.db.models import Q
   
calss CustomBackend(ModelBackends):
    # 该方法会被django自动调用
    def authenticate(self, username=None, password=None, **kwargs):
        try:
            # 根据用户名查找是否存在用户(get()函数只会返回存在一个的数据)
            user = User.oject.get(username=username)
            # 如果行多个账号形式，需要导入Q包，然后执行：
            # user = User.oject.get(Q(username=username)|Q(email=username)
            if user.check_password(password):
                return user
        except Exception as e:
            retirn None
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;settings.py中配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AUTHenTICATION_BACKENDS = (
 &#39;model.views.CustomBackend&#39;,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Q：&lt;/p&gt;
&lt;p&gt;a、在 filter() 等函式中关键字参数彼此之间都是 &lt;strong&gt;&amp;ldquo;AND&amp;rdquo; 关系&lt;/strong&gt;。如果你要执行更复杂的查询(比如，实现筛选条件的 &lt;strong&gt;OR 关系&lt;/strong&gt;)，可以使用 Q 对象。
b、Q对象包括 AND 关系 和OR 关系
c、Q 对象可以用 &amp;amp; 和 | 运算符进行连接。当某个操作连接两个 Q 对象时，&lt;strong&gt;就会产生一个新的等价的 Q 对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如：下面这段语句就产生了一个 Q ，这是用 &amp;ldquo;OR&amp;rdquo; 关系连接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Q(question__startswith=&#39;Who&#39;) | Q(question__startswith=&#39;What&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;d、每种查询函式(比如 filter(), exclude(), get()) 除了能接收关键字参数以外，也能以位置参数的形式接受一个或多个 Q 对象。如果你给查询函式传递了多个 Q 对象，那么它们彼此间都是**&amp;ldquo;AND&amp;rdquo; 关系。**例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Poll.objects.get(
Q(question__startswith=&#39;Who&#39;), Q(pub_date=date(2005, 5, 2)) |  Q(pub_date=date(2005, 5, 6))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;e: filter() 等函数 可以接受 Q对象和条件参数，但Q对象必须放在 条件参数前面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;settings.py中配置，重载变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于类的登录操作&lt;/p&gt;
&lt;p&gt;定义继承django.views.generic.base下View的class类，直接重写get/post方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.views.generic.base import View
   
class LoginView（View）：
 def get(self, request):
        return render(request, &amp;quot;login.heml&amp;quot;, {})
    def post(self, request):
        username = request.POST[&#39;username&#39;]
        password = request.POST[&#39;password&#39;]
        user = authenticate(username=username, password=password)
        if user is not None:
          login(request, user)
           # Redirect to a success page.
            ...
        else:
           # Return an &#39;invalid login&#39; error message.
           ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时urls.py中还要更改为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from model.views import LoginView
   
urlpatterns = [
 # 调用LoginView下的as_view()方法
 url(&#39;^login/$&#39;, LoginView.as_view(), name=&amp;quot;index&amp;quot;)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django  Form 表单&lt;/p&gt;
&lt;p&gt;在实际的生产环境中比如登录和验证的时候，一般都使用Jquery+ajax来判断用户的输入是否为空，假如JS被禁用的话，这个认证屏障是就消失了（虽然一般不会禁用掉但是还是存在风险）&lt;/p&gt;
&lt;p&gt;所以一般做两种认证一种是前端做一遍认证，在后端做一遍认证. 通过Django的form来实现.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Django的form的作用：
1). 生成html标签&lt;/p&gt;
&lt;p&gt;2). 用来做用户提交的验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成&lt;/p&gt;
&lt;p&gt;创建forms.py脚本文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms
     
class Loginform(forms.Form):
    # 要求 变量名与form表单提交的字段名一致
   email = forms.EmailField(required=True) #required是否可以为空,如果为False说明可以为空
   username = forms.CharField() #如果required不写默认为Ture
   password = forms.CharField() 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;views.py中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from .forms import LginForm
     
# 创建实例,LoginForm(参数)需要传入字典类型的参数，这里将request.POST传入即可
login_form = LoginForm(request.POST)
# 就可以通过.is_valid()来判断用户输入是否合法
if login_form.is_valid():
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用&lt;code&gt;.is_valid()&lt;/code&gt;函数之后可以更改返回页面的错误信息，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return render(request, &amp;quot;login.html&amp;quot;, {&amp;quot;login_form&amp;quot;: login_form})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;html页面中获取可以使用&lt;/p&gt;
&lt;p&gt;循环获取错误信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for key, error in login_form.errors.items %}{{ error }}{% endfor %}{{ msg }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;formsmodelform&#34;&gt;Forms.ModelForm&lt;/h5&gt;
&lt;p&gt;ModelForm表单同样需要导入包&lt;code&gt;from django import forms&lt;/code&gt;,它可以简化元form表单的生成，即可以直接将Model转换成表单，通过定义Meta类来指定Model，并且使用files指定哪些变量为表单内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms

from operation.models import UserAsk


class UserAskForm(forms.ModelForm):
    # 这里可以再添加字段
    # temp = forms.CharField()
    class Meta:
        model = UserAsk
        fields = [&#39;name&#39;, &#39;mobile&#39;, &#39;course_name&#39;]
        
    # 如果相对某个字段进行正则判断，可以定义&#39;clean_字段名&#39;的函数
    def clean_mobile(self):
        # 验证手机号码是否合法
        mobile = self.cleaned_data[&#39;mobile&#39;]
        REGEX_MOBIE = &amp;quot;^1[358]\d{9}$|^147\d{8}$|^176\\d{8}$&amp;quot;
        p = re.compile(REGEX_MOBIE)
        if p.match(mobile):
            return mobile
        else:
            # 抛出异常
            raise forms.ValidationError(u&amp;quot;手机号码非法&amp;quot;, &amp;quot;mobile_invalid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例化过程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class AddUserAskView(View):
	def post(self, request):
    	userask_form = UserAskForm(request.POST)
        if userask_form.valid():
            user_ask = userask_form.save(commit=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：无需提取表单信息，直接save()即可&lt;/p&gt;
&lt;p&gt;注意：需要指定save()参数&lt;code&gt;commit=TRUE&lt;/code&gt;否则无法存入数据库&lt;/p&gt;
&lt;h3 id=&#34;注册页面&#34;&gt;注册页面&lt;/h3&gt;
&lt;h4 id=&#34;页面-1&#34;&gt;页面&lt;/h4&gt;
&lt;h5 id=&#34;django-captcha-验证码插件&#34;&gt;DJango captcha 验证码插件&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;./33.jpg&#34; alt=&#34;1563269302912&#34;&gt;&lt;/p&gt;
&lt;p&gt;下拉找到documentation online&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./34.jpg&#34; alt=&#34;1563269425425&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./35.jpg&#34; alt=&#34;1563269448271&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;code&gt;django-simple-captcha&lt;/code&gt; via &lt;a href=&#34;http://pypi.python.org/pypi/pip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pip&lt;/a&gt;: &lt;code&gt;pip install  django-simple-captcha&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;captcha&lt;/code&gt; to the &lt;code&gt;INSTALLED_APPS&lt;/code&gt; in your &lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add an entry to your &lt;code&gt;urls.py&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;urlpatterns += [
    url(r&#39;^captcha/&#39;, include(&#39;captcha.urls&#39;)),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding to a Form&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms
from captcha.fields import CaptchaField
  
class CaptchaTestForm(forms.Form):
    myfield = AnyOtherField()
    captcha = CaptchaField()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例化CaptchaTestForm，传给前台在对应位置添加&lt;code&gt;{{ CaptchaTestForm.captcha }}&lt;/code&gt;即可.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;逻辑-1&#34;&gt;逻辑&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django import forms
from captcha.fields import CaptchaField

class RegisterForm(forms.Form):
    myfield = AnyOtherField()  	# 与页面一一对应
    captcha = CaptchaField()	# 可以添加参(error_messages={&amp;quot;错误内容&amp;quot;:&amp;quot;将显示的错误信息&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在views.py中创建RegisterView(View)类， 然后再前端验证码label下面添加&lt;code&gt;{{ register_form.captcha  }}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth.hashers import make_password

class RegisterView(View):
    def get(self, request)
        register_form = RegisterForm()	# 实例化注册表单
        return render(request, &amp;quot;register.html&amp;quot;, {&amp;quot;register_form&amp;quot;:register_form})

	def post(self, request):
    	# 创建实例register_form(参数)
        register_form = RegisterForm(request.POST)
        # 就可以通过.is_valid()来判断用户输入是否合法
        if register_form.is_valid():
            # ...
            user.password = make_password(password)
            user.save()  
            
            # 如果发送邮件执行发送邮箱验证代码
            return 
        else:
            return 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建逻辑即可，值得一提的是存储明码的时候需要存密文，所以需要加密：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.contrib.auth.hashers import make_password

user.password = make_password(password)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;发送邮箱验证&#34;&gt;发送邮箱验证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注册邮箱账号&lt;/p&gt;
&lt;p&gt;首先注册邮箱账号（以新浪/网易邮箱为例），在常规设置中找到：&lt;strong&gt;POP3/SMTP/IMAP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./36.jpg&#34; alt=&#34;1565013445488&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./37.jpg&#34; alt=&#34;1565012864520&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置Email&lt;/p&gt;
&lt;p&gt;settings.py中添加&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;  EMAIL_HOST = &amp;quot;smtp.sina.com&amp;quot;
  EMAIL_PORT= 25
  EMAIL_HOST_USER = &amp;quot;xxx@xxx.com&amp;quot;
  EMAIL_HOST_PASSWORD = &amp;quot;xxxxxx&amp;quot; # 这里的PASSWORD是授权码，而不是普通的邮箱密码
  EMAIL_USE_TLS = False
  EMAIL_FORM = &amp;quot;xxx@xxx.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import Random
from django.core.mail import send_mail
  
def random_str(randomlength=8):
    str = &#39;&#39;
    chars = &#39;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#39;
    length = len(chars) - 1
    random = Random()
    for i in range(randomlength):
        str += chars[random.randint(0, length)]
    return str
  
def send_register_email(email, send_type=&amp;quot;register&amp;quot;): 
    email_record = EmailVerifyRecord()
  code = random_str(16)
    email_record.code = code
    email_record.email = email
    email_record.type = send_type
    email_record.save()
      
    email title=&amp;quot;&amp;quot;
    email body=&amp;quot;&amp;quot;
  if send type==&amp;quot;register&amp;quot;：
        email_title=&amp;quot;在线网注册激活链接”
      email_body=&amp;quot;请点击下面的链接激活你的账号：http://127.0.0.1：8000/active/{0}&amp;quot;.format(code)
    # 返回状态
    send_status = send_mail(email_title, email_body, EMAIL_FORM, [email])
    # send_status = send_mail(email_title, email_body, 需要导入settings.py, 列表list类型)	返回状态为0/1
  if send_status:
      pass
    else:
        pass
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;激活操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;urls.py配置拿到随机码进行匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url(r&#39;^active/(?P&amp;lt;Name&amp;gt;.*)/$&#39;, ActiveUserView.as_view())
# 提取active/后面所有的东西存到Name中
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ActiveUserView(View):
  def get(self, request, Name)
          all_records = EmaolVerifyRecord.object.filter(code=Name)
          if all_records:
              for record in all_records:
                  email = record.mail
                  user = User.object.get(email=email)
                  user.active = True
                  user.save()
          return ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./38.jpg&#34; alt=&#34;1565534156646&#34;&gt;&lt;/p&gt;
&lt;p&gt;在django中，查询经常用的两个API：get()和filter()两个方法，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object.get()：得到的是一个对象，如果在数据库中查不到这个对象或者查找到对象都会报错！！！&lt;/li&gt;
&lt;li&gt;object.filter() ：返回的是一个对象列表。如果在数据库中找不到这个对象，那么会返回一个空列表[]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;找回密码&#34;&gt;找回密码&lt;/h3&gt;
&lt;h4 id=&#34;urlspy中配置链接&#34;&gt;urls.py中配置链接&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url(r&#39;^active/(?P&amp;lt;Name&amp;gt;.*)/$&#39;, ForgetPwdView.as_view(), name=&amp;quot;forget_pwd
&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找到忘记密码的&lt;a&gt;标签，将&lt;code&gt;href=&#39;{% url &#39;forget_pwd&#39; %}&#39;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ForgetPwdView(View):
  def get(self, request)
    forget_form = ForgetForm()	# 实例化忘记密码表单
    return render(request, &amp;quot;forget.html&amp;quot;,{&amp;quot;forget_form&amp;quot;:forget_form})

	def post(self, request)
        forget_form = ForgetForm(request.POST)
        if forget_form.is_valid():
            # ...
            email = request.POST.get(&amp;quot;email&amp;quot;)
            
            # 如果发送邮件执行发送邮箱验证代码
            return 
        else:
            return 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;激活操作&#34;&gt;激活操作&lt;/h4&gt;
&lt;p&gt;urls.py配置拿到随机码进行匹配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^reset/(?P&amp;lt;Name&amp;gt;.*)/$&#39;, ResetView.as_view())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ResetView(View):
	def get(self, request, Name)
  		all_records = EmaolVerifyRecord.object.filter(code=Name)
          if all_records:
              for record in all_records:
                  email = record.mail
                  return render(request, &amp;quot;password.html&amp;quot; {&amp;quot;email&amp;quot;:email})
            else: 
                return 
    def post(self, request):
        ...  

class ModifyPwdView(View):
    def post(self, request):
        modify_form = ModifyPwdForm(request.POST)
        if modify_form.is_valid():
            email = request.POST.get(&amp;quot;email&amp;quot;, &amp;quot;&amp;quot;)
            password1 = request.POST.get(&amp;quot;password1&amp;quot;, &amp;quot;&amp;quot;)
            password2 = request.POST.get(&amp;quot;password2&amp;quot;, &amp;quot;&amp;quot;)
            if password1 != password2:
                return render(request, &amp;quot;password_reset.html&amp;quot;, {&amp;quot;email&amp;quot;: email, &amp;quot;msg&amp;quot;: &amp;quot;密码不一致&amp;quot;})
            modify_user = UserProfile.objects.get(email=email)
            modify_user.password = make_password(password1)
            modify_user.save()
            return render(request, &amp;quot;login.html&amp;quot;)
        else:
            return render(request, &amp;quot;login.html&amp;quot;, {&amp;quot;modify_form&amp;quot;: modify_form})

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;机构的功能实现&#34;&gt;机构的功能实现&lt;/h2&gt;
&lt;h3 id=&#34;django网页模板的继承block&#34;&gt;Django网页模板的继承block&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建母版html文件（在里面挖坑block）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    {% block title %}&amp;lt;title&amp;gt;模板页&amp;lt;/title&amp;gt;{% endblock %}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{% block custom_bread %}
     &amp;lt;section&amp;gt;
        &amp;lt;div class=&amp;quot;wp&amp;quot;&amp;gt;
            &amp;lt;ul class=&amp;quot;crumbs&amp;quot;&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;index&#39; %}&amp;quot;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建子网页并继承母版extends（在里面填坑）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{% extends &#39;base.html&#39; %} # 注意： 继承语句必须放在首行 
{% block title %}授课机构列表{% endblock %}
{% block custom_bread %}
     &amp;lt;section&amp;gt;
        &amp;lt;div class=&amp;quot;wp&amp;quot;&amp;gt;
            &amp;lt;ul class=&amp;quot;crumbs&amp;quot;&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{% url &#39;index&#39; %}&amp;quot;&amp;gt;首页&amp;lt;/a&amp;gt;&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;课程机构&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写路由，只需写子网页的路由即可。（无需写母版页的路由）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from django.shortcuts import render
from django.views.generic import View
   
class OrgListView(View):
    def get(self, request):
        return render(request, &amp;quot;org-list.html&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分页功能&#34;&gt;分页功能&lt;/h3&gt;
&lt;p&gt;geihub搜索：&lt;strong&gt;pure pagination&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./39.jpg&#34; alt=&#34;1565613210906&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Install package from PYPI:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;pip install django-pure-pagination
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	or clone and install from repository:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:jamespacileo/django-pure-pagination.git
cd django-pure-pagination
python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Add pure_pagination to INSTALLED_APPS&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;INSTALLED_APPS = (
    ...
    &#39;pure_pagination&#39;,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Finally substitute &lt;strong&gt;from django.core.paginator import Paginator&lt;/strong&gt; with &lt;strong&gt;from pure_pagination import Paginator&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A few settings can be set within settings.py&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;PAGINATION_SETTINGS = {
    &#39;PAGE_RANGE_DISPLAYED&#39;: 10,
    &#39;MARGIN_PAGES_DISPLAYED&#39;: 2,

    &#39;SHOW_FIRST_PAGE_WHEN_INVALID&#39;: True,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;usage-example&#34;&gt;Usage example&lt;/h4&gt;
&lt;p&gt;Following is a simple example for &lt;strong&gt;function based views&lt;/strong&gt;. For generic class-based views, see bellow.&lt;/p&gt;
&lt;p&gt;view file: &lt;strong&gt;views.py&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# views.py
from django.shortcuts import render_to_response

from pure_pagination import Paginator, EmptyPage, PageNotAnInteger


def index(request):

    try:
        page = request.GET.get(&#39;page&#39;, 1)
    except PageNotAnInteger:
        page = 1

    objects = [&#39;john&#39;, &#39;edward&#39;, &#39;josh&#39;, &#39;frank&#39;]

    # Provide Paginator with the request object for complete querystring generation
	# 需要传递三个参数，中间参数为每页显示数据
    p = Paginator(objects, 5, request=request)

    people = p.page(page)

    return render_to_response(&#39;index.html&#39;, {
        &#39;people&#39;: people,
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template file: &lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{# index.html #}
{% extends &#39;base.html&#39; %}

{% block content %}

{% for person in people.object_list %}
    &amp;lt;div&amp;gt;
        First name: {{ person }}
    &amp;lt;/div&amp;gt;
{% endfor %}

{# The following renders the pagination html #}
&amp;lt;div id=&amp;quot;pagination&amp;quot;&amp;gt;
    {{ people.render }} # 默认页码样式
&amp;lt;/div&amp;gt;

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义页码样式&lt;/p&gt;
&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;
&lt;p&gt;There a few different way you can make use of the features introduced within django-pure-pagination.&lt;/p&gt;
&lt;p&gt;Easiest way to render the pagination is to call the render method i.e. &lt;strong&gt;{{ page.render }}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Alternatively you can access the Page object low level methods yourself&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Special note:&lt;/strong&gt; &lt;strong&gt;page_obj&lt;/strong&gt; and &lt;strong&gt;current_page&lt;/strong&gt; both point to the page object within the template.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{% load i18n %}
&amp;lt;div class=&amp;quot;pagination&amp;quot;&amp;gt;
    {% if page_obj.has_previous %}
        &amp;lt;a href=&amp;quot;?{{ page_obj.previous_page_number.querystring }}&amp;quot; class=&amp;quot;prev&amp;quot;&amp;gt;&amp;amp;lsaquo;&amp;amp;lsaquo; {% trans &amp;quot;previous&amp;quot; %}&amp;lt;/a&amp;gt;
    {% else %}
        &amp;lt;span class=&amp;quot;disabled prev&amp;quot;&amp;gt;&amp;amp;lsaquo;&amp;amp;lsaquo; {% trans &amp;quot;previous&amp;quot; %}&amp;lt;/span&amp;gt;
    {% endif %}
    {% for page in page_obj.pages %}
        {% if page %}
            {% ifequal page page_obj.number %}
                &amp;lt;span class=&amp;quot;current page&amp;quot;&amp;gt;{{ page }}&amp;lt;/span&amp;gt;
            {% else %}
                &amp;lt;a href=&amp;quot;?{{ page.querystring }}&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;
            {% endifequal %}
        {% else %}
            ...
        {% endif %}
    {% endfor %}
    {% if page_obj.has_next %}
        &amp;lt;a href=&amp;quot;?{{ page_obj.next_page_number.querystring }}&amp;quot; class=&amp;quot;next&amp;quot;&amp;gt;{% trans &amp;quot;next&amp;quot; %} &amp;amp;rsaquo;&amp;amp;rsaquo;&amp;lt;/a&amp;gt;
    {% else %}
        &amp;lt;span class=&amp;quot;disabled next&amp;quot;&amp;gt;{% trans &amp;quot;next&amp;quot; %} &amp;amp;rsaquo;&amp;amp;rsaquo;&amp;lt;/span&amp;gt;
    {% endif %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mxonline分页设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;pagelist&amp;quot;&amp;gt;
	{% if all_orgs.has_previous %}
     	&amp;lt;li  class=&amp;quot;long&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;?{{all_orgs.previous_page_number.querystring }}&amp;quot;&amp;gt;上一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endif %}
    {% for page in all_orgs.pages %}
        {% if page %}
            {% ifequal page all_orgs.number %}
            &amp;lt;li class=&amp;quot;active&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;?{{ page.querystring }}&amp;quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            {% else %}
            &amp;lt;li&amp;gt;&amp;lt;a class=&amp;quot;page&amp;quot; href=&amp;quot;?{{ page.querystring }}&amp;quot;&amp;gt;{{ page }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            {% endifequal %}
        {% else %}
        	&amp;lt;li class=&amp;quot;none&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        {% endif %}
    {% endfor %}
    {% if all_orgs.has_next %}
   		 &amp;lt;li class=&amp;quot;long&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;?{{ all_orgs.next_page_number.querystring }}&amp;quot;&amp;gt;下一页&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {% endif %}
    &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;分类显示及课程排行&#34;&gt;分类显示及课程排行&lt;/h3&gt;
&lt;p&gt;前端页面通过a标签向后跳提供参数，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;?ct=pxjg&amp;amp;city={{ city.id }}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;view逻辑获取，并分页显示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class OrgListView(View):
    def get(self, request):
        # 获取所有机构
        all_orgs = CourseOrg.objects.all()
        # 热门机构
        # 注意这里，排序参数前如果有‘-’则代表着降序，没有则默认升序
        hot_orgs = all_orgs.order_by(&amp;quot;-click_nums&amp;quot;)[:5]
        all_citys = CityDic.objects.all()
        # 取出筛选城市
        city_id = request.GET.get(&#39;city&#39;, &amp;quot;&amp;quot;)
        if city_id:
            all_orgs = all_orgs.filter(city_id=int(city_id))

        # 类别筛选
        category = request.GET.get(&#39;ct&#39;, &amp;quot;&amp;quot;)
        if category:
            all_orgs = all_orgs.filter(category=category)

        org_nums = all_orgs.count()
        try:
            page = request.GET.get(&#39;page&#39;, 1)
        except PageNotAnInteger:
            page = 1
        p = Paginator(all_orgs, 5, request=request)
        orgs = p.page(page)
        return render(request, &amp;quot;org-list.html&amp;quot;, {
            &amp;quot;all_orgs&amp;quot;: orgs,
            &amp;quot;org_nums&amp;quot;: org_nums,
            &amp;quot;all_citys&amp;quot;: all_citys,
            &amp;quot;city_id&amp;quot;: city_id,
            &amp;quot;category&amp;quot;: category,
            &amp;quot;hot_orgs&amp;quot;: hot_orgs
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前端以通过&lt;code&gt;&amp;lt;span class=&amp;quot;{% ifequal category &amp;quot;pxjg&amp;quot; %} active2{% endifequal %}&amp;quot;&amp;gt;培训机构&amp;lt;/span&amp;gt;&lt;/code&gt;添加样式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;?city={{ city.id }}&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;{% ifequal category &amp;quot;&amp;quot; %}active2{% endifequal %}&amp;quot;&amp;gt;全部&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;?ct=pxjg&amp;amp;city={{ city.id }}&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;{% ifequal category &amp;quot;pxjg&amp;quot; %} active2{% endifequal %}&amp;quot;&amp;gt;培训机构&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 课程排行前端

&amp;lt;div class=&amp;quot;right companyrank layout&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;head&amp;quot;&amp;gt;授课机构排名&amp;lt;/div&amp;gt;
{% for hot_org in hot_orgs %}
    &amp;lt;dl class=&amp;quot;des&amp;quot;&amp;gt;
    	&amp;lt;dt class=&amp;quot;num fl&amp;quot;&amp;gt;{{ forloop.counter }}&amp;lt;/dt&amp;gt;
        &amp;lt;dd&amp;gt;
            &amp;lt;a href=&amp;quot;/company/2/&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;{{ hot_org.name }}&amp;lt;/h1&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;p&amp;gt;{{ hot_org.address }}&amp;lt;/p&amp;gt;
        &amp;lt;/dd&amp;gt;
    &amp;lt;/dl&amp;gt;
{% endfor %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;页面内异步提交表单&#34;&gt;页面内异步提交表单&lt;/h3&gt;
&lt;p&gt;异步操作需要ajax操作，对指定的表单声明自定义script&lt;/p&gt;
&lt;p&gt;如对网页中的某一表单进行异步操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./40.jpg&#34; alt=&#34;1565672331542&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置url&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(&#39;^add_ask/$&#39;, AddUserAskView.as_view(), name=&amp;quot;add_ask&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表单提交逻辑&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class AddUserAskView(View):
    def post(self, request):
        userask_form = UserAskForm(request.POST)
        if userask_form.is_valid():
            user_ask = userask_form.save(commit=True)
            return HttpResponse(&#39;{&amp;quot;status&amp;quot;:&amp;quot;success&amp;quot;}&#39;)
        else:
            return HttpResponse(json.dumps(&#39;{&amp;quot;status&amp;quot;:&amp;quot;fail&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;添加错误&amp;quot;}&#39;, ensure_ascii=False), content_type=&amp;quot;application/json,charset=utf-8&amp;quot;)
            # return JsonResponse(&#39;{&amp;quot;status&amp;quot;:&amp;quot;success&amp;quot;}&#39;, safe=False)
        # else:
            # return JsonResponse(&#39;{&amp;quot;status&amp;quot;:&amp;quot;fail&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;添加错误&amp;quot;}&#39;, safe=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;备注：django一般用JsonResponse来返回json数据格式，这种方式返回简单，但是中文会乱码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 格式
return JsonResponse(result, safe=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如若显示中文，需要改用HttpResponse来返回&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 格式
return HttpResponse(json.dumps(result,ensure_ascii=False),content_type=&amp;quot;application/json,charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意： 此处有坑,result要严格按照JSON格式书写.即&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;result = {&amp;quot;status&amp;quot;:&amp;quot;success&amp;quot;}
result = {&amp;quot;status&amp;quot;:&amp;quot;fail&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;添加错误&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;写下面的javascript代码，对表单提交进行监听&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{% block custom_js %}
&amp;lt;script&amp;gt;
    $(function () {
        $(&#39;#jsStayBtn&#39;).on(&#39;click&#39;, function () {
            $.ajax({
                cache: false,
                type: &amp;quot;POST&amp;quot;,
                url: &amp;quot;{% url &#39;org:add_ask&#39; %}&amp;quot;,
                data: $(&#39;#jsStayForm&#39;).serialize(),
                async: true,
                success: function (data) {
                    console.log(data)
                    # 装换成JSON格式，否则data.status为undefined
                    data = JSON.parse(data)
                    console.log(data.status)
                    if (data.status == &#39;success&#39;) {
                        $(&#39;#jsStayForm&#39;)[0].reset();
                        alert(&amp;quot;提交成功&amp;quot;)
                    } else if (data.status == &#39;fail&#39;) {
                        $(&#39;#jsCompanyTips&#39;).html(data.msg)
                    }
                },
            });
        });
    })
&amp;lt;/script&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;机构首页课程介绍讲师&#34;&gt;机构首页/课程/介绍/讲师&lt;/h3&gt;
&lt;p&gt;点击机构图片查看机构详情等操作&lt;/p&gt;
&lt;p&gt;与前面操作类似，唯一需要提到的是url配置，因为点击机构图片logo的时候需要传递参数，以便知道是哪个机构，所以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# url配置
url(r&#39;^home/(?P&amp;lt;org_id&amp;gt;.*)/$&#39;, OrgHomeView.as_view(), name=&amp;quot;org_home&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# view逻辑
class OrgHomeView(View):
    &amp;quot;&amp;quot;&amp;quot;
    机构首页
    &amp;quot;&amp;quot;&amp;quot;
    def get(self, request, org_id):
        current_page = &amp;quot;home&amp;quot;
        course_org = CourseOrg.objects.get(id=int(org_id))
        has_fav = False
        if request.user.is_authenticated:
            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):
                has_fav = True
        # 这里可以通过外键_set来反向获取外键数据
        all_courses = course_org.course_set.all()[:3]
        all_teachers = course_org.teacher_set.all()[:2]

        return render(request, &#39;org-detail-homepage.html&#39;, {
            &amp;quot;all_courses&amp;quot;: all_courses,
            &amp;quot;all_teachers&amp;quot;: all_teachers,
            &amp;quot;course_org&amp;quot;: course_org,
            &amp;quot;current_page&amp;quot;: current_page,
            &amp;quot;has_fav&amp;quot;: has_fav
        })


class OrgCourseView(View):
    &amp;quot;&amp;quot;&amp;quot;
    机构课程
    &amp;quot;&amp;quot;&amp;quot;

    def get(self, request, org_id):
        current_page = &amp;quot;course&amp;quot;
        course_org = CourseOrg.objects.get(id=int(org_id))
        has_fav = False
        if request.user.is_authenticated:
            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):
                has_fav = True
        all_courses = course_org.course_set.all()

        return render(request, &#39;org-detail-course.html&#39;, {
            &amp;quot;all_courses&amp;quot;: all_courses,
            &amp;quot;course_org&amp;quot;: course_org,
            &amp;quot;current_page&amp;quot;: current_page,
            &amp;quot;has_fav&amp;quot;: has_fav
        })


class OrgDescView(View):
    &amp;quot;&amp;quot;&amp;quot;
    机构介绍
    &amp;quot;&amp;quot;&amp;quot;

    def get(self, request, org_id):
        current_page = &amp;quot;desc&amp;quot;
        course_org = CourseOrg.objects.get(id=int(org_id))
        has_fav = False
        if request.user.is_authenticated:
            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):
                has_fav = True

        return render(request, &#39;org-detail-desc.html&#39;, {
            &amp;quot;course_org&amp;quot;: course_org,
            &amp;quot;current_page&amp;quot;: current_page,
            &amp;quot;has_fav&amp;quot;: has_fav
        })


class OrgTeacherView(View):
    &amp;quot;&amp;quot;&amp;quot;
    机构讲师
    &amp;quot;&amp;quot;&amp;quot;

    def get(self, request, org_id):
        current_page = &amp;quot;teacher&amp;quot;
        course_org = CourseOrg.objects.get(id=int(org_id))
        has_fav = False
        if request.user.is_authenticated:
            if UserFavorite.objects.filter(user=request.user, fav_id=course_org.id, fav_type=2):
                has_fav = True
        all_teachers = course_org.teacher_set.all()

        return render(request, &#39;org-detail-teachers.html&#39;, {
            &amp;quot;all_teachers&amp;quot;: all_teachers,
            &amp;quot;course_org&amp;quot;: course_org,
            &amp;quot;current_page&amp;quot;: current_page,
            &amp;quot;has_fav&amp;quot;: has_fav
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 访问时需要在url &#39;org:org_home&#39;后空一格，然后带上id
&amp;lt;a href=&amp;quot;{% url &#39;org:org_home&#39; org.id %}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其他操作均相同，略&lt;/p&gt;
&lt;h3 id=&#34;用户收藏&#34;&gt;用户收藏&lt;/h3&gt;
&lt;p&gt;用户收藏操作同样是异步操作，需要ajax，因为页面采用继承式，所以只需要在org_base.html中更改即可，首先在organization的url中配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url(r&#39;^add_fav/$&#39;, AddFavoriteView.as_view(), name=&amp;quot;add_fav&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于页面中的继承，在点击左侧的时候页面会刷新，导致收藏按钮更改，所以需要对每个操作（机构首页/课程/介绍/讲师）等均进行判断是否收藏，前端需要注意的是，由于界面中不存在form表单提交，所以无法使用&lt;code&gt;{% csrf-token %}&lt;/code&gt;，需要在ajax向后提交的时候补充发送，即：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;//收藏分享
function add_fav(current_elem, fav_id, fav_type) {
    $.ajax({
        cache: false,
        type: &amp;quot;POST&amp;quot;,
        url: &amp;quot;{% url &#39;org:add_fav&#39; %}&amp;quot;,
        data: {&#39;fav_id&#39;: fav_id, &#39;fav_type&#39;: fav_type},
        async: true,
        # ！！！！！！！！！！！！！！！！！！！！！！！
        beforeSend: function (xhr, settings) {
            xhr.setRequestHeader(&amp;quot;X-CSRFToken&amp;quot;, &amp;quot;{{ csrf_token }}&amp;quot;);
        },
        # ！！！！！！！！！！！！！！！！！！！！！！！
        success: function (data) {
            data = JSON.parse(data)
            console.log(data)
            console.log(data.status)
            console.log(data.msg)
            if (data.status == &#39;fail&#39;) {
                if (data.msg == &#39;用户未登录&#39;) {
                    window.location.href = &amp;quot;{% url &#39;login&#39; %}&amp;quot;;
                } else {
                    alert(data.msg)
                }

            } else if (data.status == &#39;success&#39;) {
                current_elem.text(data.msg)
            }
        },
    });
}

$(&#39;.collectionbtn&#39;).on(&#39;click&#39;, function () {
    add_fav($(this), {{ course_org.id }}, 2);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;后台逻辑&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class AddFavoriteView(View):
    &amp;quot;&amp;quot;&amp;quot;
    用户收藏
    &amp;quot;&amp;quot;&amp;quot;
    def post(self, request):
    	# 拿到前端数据
        fav_id = request.POST.get(&#39;fav_id&#39;, 0)
        fav_type = request.POST.get(&#39;fav_type&#39;, 0)

        # 判断用户是否登录(即使在未登录的情况下，request对象也会产生不同于自定义User的user对象，判断是否登录)
        if not request.user.is_authenticated:
            return HttpResponse(json.dumps(&#39;{&amp;quot;status&amp;quot;:&amp;quot;fail&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;用户未登录&amp;quot;}&#39;, ensure_ascii=False), content_type=&amp;quot;application/json, charset=utf-8&amp;quot;)
        exit_records = UserFavorite.objects.filter(user=request.user, fav_id=int(fav_id), fav_type=int(fav_type))
        if exit_records:
            # 如果存在则证明已收藏，现取消收藏
            exit_records.delete()
            # 返回JSON数据
            return HttpResponse(json.dumps(&#39;{&amp;quot;status&amp;quot;:&amp;quot;success&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;收藏&amp;quot;}&#39;, ensure_ascii=False), content_type=&amp;quot;application/json, charset=utf-8&amp;quot;)
        else:
            user_fav = UserFavorite()
            if int(fav_id) &amp;gt; 0 and int(fav_type) &amp;gt; 0:
                user_fav.user = request.user
                user_fav.fav_id = int(fav_id)
                user_fav.fav_type = int(fav_type)
                user_fav.save()
                return HttpResponse(json.dumps(&#39;{&amp;quot;status&amp;quot;:&amp;quot;success&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;已收藏&amp;quot;}&#39;, ensure_ascii=False), content_type=&amp;quot;application/json, charset=utf-8&amp;quot;)
            else:
                return HttpResponse(json.dumps(&#39;{&amp;quot;status&amp;quot;:&amp;quot;fail&amp;quot;, &amp;quot;msg&amp;quot;: &amp;quot;收藏出错&amp;quot;}&#39;, ensure_ascii=False), content_type=&amp;quot;application/json, charset=utf-8&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;公开课&#34;&gt;公开课&lt;/h2&gt;
&lt;p&gt;首先在courses下创建urls.py文件，然后通过导入到项目下的urls.py文件下，配置操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# urls.py
# 配置课程相关url
url(r&#39;^course/&#39;, include(&#39;courses.urls&#39;, namespace=&amp;quot;course&amp;quot;)),

# courses下urls.py
url(r&#39;^list/$&#39;, CourseListView.as_view(), name=&amp;quot;course_list&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;View&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CourseListView(View):
    def get(self, request):
        all_courses = Course.objects.all().order_by(&amp;quot;-add_time&amp;quot;)

        hot_courses = Course.objects.all().order_by(&amp;quot;-click_nums&amp;quot;)[:3]
        sort = request.GET.get(&amp;quot;sort&amp;quot;, &amp;quot;&amp;quot;)
        if sort:
            if sort == &amp;quot;students&amp;quot;:
                all_courses = all_courses.order_by(&amp;quot;-students&amp;quot;)
            elif sort == &amp;quot;hot&amp;quot;:
                all_courses = all_courses.order_by(&amp;quot;-click_nums&amp;quot;)
        org_nums = all_courses.count()

        # 对课程分页
        try:
            page = request.GET.get(&#39;page&#39;, 1)
        except PageNotAnInteger:
            page = 1

        p = Paginator(all_courses, 6, request=request)

        corses = p.page(page)

        return render(request, &#39;course-list.html&#39;, {
            &amp;quot;all_courses&amp;quot;: corses,
            &amp;quot;hot_courses&amp;quot;: hot_courses,
            &amp;quot;sort&amp;quot;: sort
        })

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;课程列表&#34;&gt;课程列表&lt;/h3&gt;
&lt;p&gt;同课程机构一样，首先修改页面，只需要在对应位置进行修改（{% block %}）即可完成页面配置，然后进行url配置，在course下创建urls.py文件，最后编写后台View逻辑&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# url 配置
url(r&#39;^list/$&#39;, CourseListView.as_view(), name=&amp;quot;course_list&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CourseListView(View):
    def get(self, request):
        all_courses = Course.objects.all().order_by(&amp;quot;-add_time&amp;quot;)

        hot_courses = Course.objects.all().order_by(&amp;quot;-click_nums&amp;quot;)[:3]
        sort = request.GET.get(&amp;quot;sort&amp;quot;, &amp;quot;&amp;quot;)
        if sort:
            if sort == &amp;quot;students&amp;quot;:
                all_courses = all_courses.order_by(&amp;quot;-students&amp;quot;)
            elif sort == &amp;quot;hot&amp;quot;:
                all_courses = all_courses.order_by(&amp;quot;-click_nums&amp;quot;)
        org_nums = all_courses.count()

        # 对课程分页
        try:
            page = request.GET.get(&#39;page&#39;, 1)
        except PageNotAnInteger:
            page = 1

        p = Paginator(all_courses, 6, request=request)

        corses = p.page(page)

        return render(request, &#39;course-list.html&#39;, {
            &amp;quot;all_courses&amp;quot;: corses,
            &amp;quot;hot_courses&amp;quot;: hot_courses,
            &amp;quot;sort&amp;quot;: sort
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;课程详情&#34;&gt;课程详情&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 课程详情页
url(r&#39;^detail/(?P&amp;lt;course_id&amp;gt;.*)/$&#39;, CourseDetailView.as_view(), name=&amp;quot;course_detail&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;class CourseDetailView(View):
    def get(self, request, course_id):
        course = Course.objects.get(id=int(course_id))
        # 增加课程点击数
        course.click_nums += 1
        course.save()

        # 判断是否收藏
        has_fav_course = False
        has_fav_org = False
        if request.user.is_authenticated:
            if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1):
                has_fav_course = True
            if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2):
                has_fav_org = True

        tag = course.tag
        if tag:
            relate_courses = Course.objects.filter(tag=tag)[:1]
        else:
            relate_courses = []
        return render(request, &#39;course-detail.html&#39;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;relate_courses&amp;quot;: relate_courses,
            &amp;quot;has_fav_course&amp;quot;: has_fav_course,
            &amp;quot;has_fav_org&amp;quot;: has_fav_org,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;课程章节信息配置&#34;&gt;课程章节信息配置&lt;/h4&gt;
&lt;p&gt;获取课程的章节：打开courses/models.py文件，在Course函数里面，新定义函数def get_course_lesson用于获取课程的章节：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;def get_course_lesson(self):
# 获取课程所有章节
	return self.lesson_set.all()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在lesson函数里面，新定义函数def get_lesson_video用于获取章节的视频信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;def get_lesson_video(self):
	# 获取章节视频信息
	return self.video_set.all()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在打开&lt;strong&gt;course-video.html&lt;/strong&gt;页面，配置数据的动态显示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{% for lesson in course.get_course_lesson %}
&amp;lt;div class=&amp;quot;chapter chapter-active&amp;quot; &amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;i class=&amp;quot;state-expand&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;{{ lesson.name }}&amp;lt;/strong&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;ul class=&amp;quot;video&amp;quot;&amp;gt;
{% for video in lesson.get_lesson_video %}
	&amp;lt;li&amp;gt;
    &amp;lt;a target=&amp;quot;_blank&amp;quot; href=&#39;https://CoMath21.github.io/video/3662&#39; class=&amp;quot;J-media-item studyvideo&amp;quot;&amp;gt;{{ video.name }}({{ video.learn_times }})
    &amp;lt;i class=&amp;quot;study-state&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
	&amp;lt;/a&amp;gt;
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;课程评论&#34;&gt;课程评论&lt;/h3&gt;
&lt;p&gt;打开courses/urls.py文件，配置课程评论页面的url&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from .views import CourseCommentView

 # 课程评论页面url
    re_path(&#39;comment/(?P&amp;lt;course_id&amp;gt;.*)/&#39;, CourseCommentView.as_view(), name=&amp;quot;course_comment&amp;quot;),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后打开courses/views.py文件，新定义课程评论页面函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from operation.models import CourseComments

# 课程评论页面
class CourseCommentView(View):
    def get(self, request, course_id):
        course = Course.objects.get(id=int(course_id))
        all_resources = CourseResource.objects.filter(course=course)
        all_comments = CourseComments.objects.all()
        return render(request, &amp;quot;course-comment.html&amp;quot;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;all_resources&amp;quot;: all_resources,
            &amp;quot;all_comments&amp;quot;: all_comments,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着打开&lt;strong&gt;course-comment.html&lt;/strong&gt;页面,修改跳转代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;a class=&amp;quot;ui-tabs-active active&amp;quot; id=&amp;quot;learnOn&amp;quot;  href=&amp;quot;{% url &#39;courses:course_info&#39; course.id %}&amp;quot;&amp;gt;&amp;lt;span&amp;gt;章节&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a id=&amp;quot;commentOn&amp;quot; class=&amp;quot;&amp;quot; href=&amp;quot;{% url &#39;course:course_comment&#39; course.id %}&amp;quot;&amp;gt;&amp;lt;span&amp;gt;评论&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后打开&lt;strong&gt;course-comment.html&lt;/strong&gt;页面，修改课程信息，资料下载，讲师提示等, 和前面在video页面配置的一样&lt;/p&gt;
&lt;h3 id=&#34;课程资源&#34;&gt;课程资源&lt;/h3&gt;
&lt;p&gt;第一步，前往xadmin后台为某一门课添加课程资源，第二步打开courses/views.py文件，修改视图函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from .models import  CourseResource

all_resources = CourseResource.objects.filter(course=course)
return render(request, &amp;quot;course-video.html&amp;quot;, {
            &amp;quot;all_resources&amp;quot;: all_resources,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开&lt;strong&gt;course-video.html&lt;/strong&gt;页面，配置资源下载的动态显示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{% for resources in all_resources %}
                               &amp;lt;li&amp;gt;
                                &amp;lt;span &amp;gt;&amp;lt;i class=&amp;quot;aui-iconfont aui-icon-file&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;{{ resources.name }}&amp;lt;/span&amp;gt;
                                &amp;lt;a href=&amp;quot;{{ MEDIA_URL }}{{ resources.download }}&amp;quot; class=&amp;quot;downcode&amp;quot; target=&amp;quot;_blank&amp;quot; download=&amp;quot;&amp;quot; data-id=&amp;quot;274&amp;quot; title=&amp;quot;&amp;quot;&amp;gt;下载&amp;lt;/a&amp;gt;
                            &amp;lt;/li&amp;gt;
                           {% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后刷新页面，发现显示没有问题。&lt;/p&gt;
&lt;p&gt;接下在&lt;strong&gt;course-video.html&lt;/strong&gt;页面完成课程信息的修改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;div class=&amp;quot;static-item &amp;quot;&amp;gt;
	&amp;lt;span class=&amp;quot;meta-value&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;{{ course.get_degree_display }}&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;meta&amp;quot;&amp;gt;难度&amp;lt;/span&amp;gt;
	&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;static-item static-time&amp;quot;&amp;gt;
	&amp;lt;span class=&amp;quot;meta-value&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;{{ course.learn_times }}分钟&amp;lt;/strong&amp;gt;	&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;meta&amp;quot;&amp;gt;时长&amp;lt;/span&amp;gt;
	&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;static-item&amp;quot;&amp;gt;
	&amp;lt;span class=&amp;quot;meta-value&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;{{ course.students }}人&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;meta&amp;quot;&amp;gt;学习人数&amp;lt;/span&amp;gt;
	&amp;lt;em&amp;gt;&amp;lt;/em&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在配置讲师提示的时候，发现讲师和课程之间没有建立外键连接，所以在courses/models.py文件的Course函数，新增讲师字段 :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from organization.models import Teacher

teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, verbose_name=&amp;quot;讲师&amp;quot;, null=True, blank=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;记得数据库的变动需要两部曲：makemigrations和migrate&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然后前往xadmin后台为这门课添加一个讲师。然后修改&lt;strong&gt;course-video.html&lt;/strong&gt;页面&lt;/p&gt;
&lt;h4 id=&#34;课程相关推荐&#34;&gt;课程相关推荐&lt;/h4&gt;
&lt;p&gt;打开courses/views.py文件，找到CourseInfoView这个函数，修改为如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 课程章节信息
class CourseInfoView(View):
    def get(self, request, course_id):
        course = Course.objects.get(id=int(course_id))
        all_resources = CourseResource.objects.filter(course=course)

        # 取出所有选过这门课的学生
        user_courses = UserCourse.objects.filter(course=course)
        # 取出所有选过这门课的学生的id,采用递归表达式形式
        user_ids = [user_course.user.id for user_course in user_courses]
        # 取出刚才那些学生选过的所有的课程
        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)
        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式
        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]
        # 取出学过该课程用户学过的其他课程
        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&amp;quot;-click_nums&amp;quot;)[:5]
        return render(request, &amp;quot;course-video.html&amp;quot;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;all_resources&amp;quot;: all_resources,
            &amp;quot;relate_courses&amp;quot;: relate_courses,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：双下划线代表代表传进来的是一个可以遍历的list。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接着就是在前端页面配置动态加载信息了（记得course-video.html和course_comment.html这两个页面都需要配置，一模一样）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;ul class=&amp;quot;other-list&amp;quot;&amp;gt;
{% for relate_course in relate_courses %}
	&amp;lt;li class=&amp;quot;curr&amp;quot;&amp;gt;
	&amp;lt;a href=&amp;quot;{% url &#39;course:course_detail&#39; relate_course.id %}&amp;quot;target=&amp;quot;_blank&amp;quot;&amp;gt;
	&amp;lt;img src=&amp;quot;{{ MEDIA_URL }}{{ relate_course.image }}&amp;quot;alt=&amp;quot;{{ relate_course.name }}&amp;quot;&amp;gt;
	&amp;lt;span class=&amp;quot;name autowrap&amp;quot;&amp;gt;{{ relate_course.name }}&amp;lt;/span&amp;gt;
	&amp;lt;/a&amp;gt;
	&amp;lt;/li&amp;gt;
{% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;存在问题：那就是用户如果没有登录，那是不能让他进入课程章节这个页面的，因此需要判断一下。这里因为使用的是方法型编程所以可以使用装饰器loginrequired来进行判断。&lt;/p&gt;
&lt;p&gt;在utils文件夹下面，新建一个名为mixin_utils.py文件，在里面添加如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator


class LoginRequiredMixin(object):

    @method_decorator(login_required(login_url=&#39;https://CoMath21.github.io/login/&#39;))
    def dispatch(self, request, *args, **kwargs):
        return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着打开courses/views.py文件，在里面修改CourseInfoView和CourseCommentView，修改后如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from utils.mixin_utils import LoginRequiredMixin

# 课程章节信息
class CourseInfoView(LoginRequiredMixin, View):
     login_url = &#39;/login/&#39;
    redirect_field_name = &#39;redirect_to&#39;
    def get(self, request, course_id):
        course = Course.objects.get(id=int(course_id))
        all_resources = CourseResource.objects.filter(course=course)

        # 查询用户是否已经开始学习了该课程，如果没有则开始学习
        user_courses = UserCourse.objects.filter(user=request.user, course=course)
        if not user_courses:
            user_course = UserCourse(user=request.user, course=course)
            course.students += 1
            course.save()
            user_course.save()

        # 取出所有选过这门课的学生
        user_courses = UserCourse.objects.filter(course=course)
        # 取出所有选过这门课的学生的id,采用递归表达式形式
        user_ids = [user_course.user.id for user_course in user_courses]
        # 取出刚才那些学生选过的所有的课程
        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)
        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式
        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]
        # 取出学过该课程用户学过的其他课程
        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&amp;quot;-click_nums&amp;quot;)[:5]
        return render(request, &amp;quot;course-video.html&amp;quot;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;all_resources&amp;quot;: all_resources,
            &amp;quot;relate_courses&amp;quot;: relate_courses,
        })


# 课程评论页面
class CourseCommentView(LoginRequiredMixin, View):
    login_url = &#39;/login/&#39;
    redirect_field_name = &#39;redirect_to&#39; 
    def get(self, request, course_id):
        course = Course.objects.get(id=int(course_id))
        all_resources = CourseResource.objects.filter(course=course)
        all_comments = CourseComments.objects.all()
        return render(request, &amp;quot;course-comment.html&amp;quot;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;all_resources&amp;quot;: all_resources,
            &amp;quot;all_comments&amp;quot;: all_comments,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刷新一下页面，点几个课程试试看，发现都在该同学还学过哪些课里推荐了。&lt;/p&gt;
&lt;h3 id=&#34;课程视频&#34;&gt;课程视频&lt;/h3&gt;
&lt;h4 id=&#34;课程播放页面配置&#34;&gt;课程播放页面配置&lt;/h4&gt;
&lt;p&gt;打开courses/urls.py文件，新增代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from .views import  VideoPlayView

# 视频播放页面url
re_path(&#39;video/(?P&amp;lt;video_id&amp;gt;.*)/&#39;, VideoPlayView.as_view(), name=&amp;quot;video_play&amp;quot;),
或者 re_path(&#39;video/(?P&amp;lt;video_id&amp;gt;\d+)/&#39;, VideoPlayView.as_view(), name=&amp;quot;video_play&amp;quot;),都是可以的
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着打开courses/views.py文件，新增代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from .models import  Video

# 视频播放页面
class VideoPlayView(LoginRequiredMixin, View):
    login_url = &#39;/login/&#39;
    redirect_field_name = &#39;redirect_to&#39;
    
    def get(self, request, video_id):
        video = Video.objects.get(id=int(video_id))
        course = video.lesson.course
        all_resources = CourseResource.objects.filter(course=course)
        # 查询用户是否已经开始学习了该课程，如果没有则开始学习
        user_courses = UserCourse.objects.filter(user=request.user, course=course)
        if not user_courses:
            user_course = UserCourse(user=request.user, course=course)
            course.students += 1
            course.save()
            user_course.save()

        # 取出所有选过这门课的学生
        user_courses = UserCourse.objects.filter(course=course)
        # 取出所有选过这门课的学生的id,采用递归表达式形式
        user_ids = [user_course.user.id for user_course in user_courses]
        # 取出刚才那些学生选过的所有的课程
        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)
        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式
        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]
        # 取出学过该课程用户学过的其他课程
        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&amp;quot;-click_nums&amp;quot;)[:5]

        return render(request, &amp;quot;course-play.html&amp;quot;, {
            &amp;quot;course&amp;quot;: course,
            &amp;quot;all_resources&amp;quot;: all_resources,
            &amp;quot;relate_courses&amp;quot;: relate_courses,
            &amp;quot;video&amp;quot;: video,
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码和之前在课程章节信息里面定义的几乎一模一样，只是course的来源不一样。&lt;/p&gt;
&lt;p&gt;接着打开&lt;strong&gt;course-video.html&lt;/strong&gt;文件，配置跳转链接：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{% for video in lesson.get_lesson_video %}
    &amp;lt;li&amp;gt;
        &amp;lt;a target=&amp;quot;_blank&amp;quot; href=&#39;{% url &#39;course:video_play&#39; video.id %}&#39;
 class=&amp;quot;J-media-item studyvideo&amp;quot;&amp;gt;{{ video.name }}({{ video.learn_times }})
     &amp;lt;i class=&amp;quot;study-state&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后打开&lt;strong&gt;course-video.html&lt;/strong&gt;文件，配置视频链接，记住由于我们这边是&lt;strong&gt;type=&amp;lsquo;video/mp4&amp;rsquo;&lt;strong&gt;所以后台所添加的视频必须是&lt;/strong&gt;.mp4&lt;/strong&gt;结尾，否则会出错。&lt;/p&gt;
&lt;p&gt;备注：&lt;strong&gt;{{ forloop.counter|add:2 }}是为了从第三个开始计数的，这是Django自带的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;{% if forloop.counter|divisibleby:5 %}five{% endif %}表示如果能被5整除则显示five，这也是Django自带的功能&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;404和500页面的配置&#34;&gt;404和500页面的配置&lt;/h2&gt;
&lt;p&gt;从前端资料里面拷贝我们的404和500页面到templates文件夹并修改文件里面的静态文件地址。打开eduline/urls.py文件，新增代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 全局404页面配置
handler404 = &#39;users.views.page_not_found&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后打开users/views.py文件，新增以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 404页面对应的处理函数
def page_not_found(request):
    from django.shortcuts import render_to_response
    response = render_to_response(&amp;quot;404.html&amp;quot;, {})
    # 设置response的状态码
    response.status_code = 404
    return response
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着运行项目，随意输入一个地址，发现页面并没有出来，那是因为在eduline/settings.py文件里面：&lt;code&gt;DEBUG = True&lt;/code&gt;，所以我们需要修改它为&lt;code&gt;False&lt;/code&gt;，还有下面的允许访问IP地址，否则404页面也是出不来的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DEBUG = False

ALLOWED_HOSTS = [&#39;*&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样重新运行一下项目，发现页面有了，但是样子却没加载出来，这是为什么呢？&lt;/p&gt;
&lt;p&gt;因为DEBUG为True时，系统会自动前往STATICFILES_DIRS下寻找文件。所以一般都会选择True，便于错误信息的显示。&lt;/p&gt;
&lt;p&gt;但是一旦DEBUG为False时，情况就不一样了，Django就不会代管静态文件，而事实上一般静态文件都是通过第三方http服务器来代理转发。（如常见的服务器Nignx 和 Apache都会自动代理这些静态文件）&lt;/p&gt;
&lt;p&gt;为了解决上述问题，可以：打开eduline/settings.py文件，新增代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开eduline/urls.py文件，新增代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from eduline.settings import  STATIC_ROOT
# 配置静态文件上传的访问处理url
    re_path(&#39;static/(?P&amp;lt;path&amp;gt;.*)&#39;, serve, {&amp;quot;document_root&amp;quot;: STATIC_ROOT}),
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新运行项目即可.500的页面的配置和这个一样（注意函数名为page_error）&lt;/p&gt;
&lt;p&gt;隐藏的坑：按照上述步骤可以解决404/500等问题，但是进入到后台管理界面(127.0.0.1:800/xadmin)界面则会发现样式丢失！&lt;/p&gt;
&lt;h6 id=&#34;产生原因&#34;&gt;产生原因：&lt;/h6&gt;
&lt;p&gt;django的生产环境不同开发环境，在生产环境下（DEBUG=False）,&lt;code&gt;django.contrib.staticfiles &lt;/code&gt;是不起任何作用的，也就说 &lt;code&gt;django.contrib.staticfiles &lt;/code&gt;只对开发环境（DEBUG=True）开启。所以会导致xadmin样式丢失现象。&lt;/p&gt;
&lt;h6 id=&#34;解决方案&#34;&gt;解决方案：&lt;/h6&gt;
&lt;p&gt;① 在settings.py中添加如下配置，同时注释STATICFILES_DIRS&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, &amp;quot;static&amp;quot;),
# )

STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;② 修改主项目中的urls.py文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from.settings import STATIC_ROOT

urlpatterns = [
    //...
    url(r&#39;^static/(?P&amp;lt;path&amp;gt;.*)$&#39;, serve, {&amp;quot;document_root&amp;quot;: STATIC_ROOT}),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③ 在控制台执行如下命令，它会在根目录下生成static文件，里边存储的是xadmin的样式文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt; collectstatic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./41.jpg&#34; alt=&#34;1565939339498&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./42.jpg&#34; alt=&#34;1565939297975&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见的web攻击&#34;&gt;常见的Web攻击&lt;/h2&gt;
&lt;p&gt;具体包括&lt;strong&gt;SQL注入攻击及防护&lt;/strong&gt;，&lt;strong&gt;XSS攻击及防护&lt;/strong&gt;以及&lt;strong&gt;CSRF攻击及防护&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;sql注入攻击及防护&#34;&gt;SQL注入攻击及防护&lt;/h3&gt;
&lt;p&gt;什么是SQL注入？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;SQL注入的危害:&lt;/p&gt;
&lt;p&gt;非法读取、篡改、删除数据库中的数据&lt;/p&gt;
&lt;p&gt;盗取用户的各类敏感信息，获取利益&lt;/p&gt;
&lt;p&gt;通过修改数据库来修改网页上的内容&lt;/p&gt;
&lt;p&gt;注入木马等等&lt;/p&gt;
&lt;p&gt;下面通过一段代码了解一下SQL注入的过程：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# users/views.py文件：
class LoginUnsafeView(View):
    def get(self, request):
        return render(request, &amp;quot;login.html&amp;quot;, {})
    def post(self, request):
        user_name = request.POST.get(&amp;quot;username&amp;quot;, &amp;quot;&amp;quot;)
        pass_word = request.POST.get(&amp;quot;password&amp;quot;, &amp;quot;&amp;quot;)

        import MySQLdb
        conn = MySQLdb.connect(host=&#39;127.0.0.1&#39;, user=&#39;root&#39;, passwd=&#39;root&#39;, db=&#39;mxonline&#39;, charset=&#39;utf8&#39;)
        cursor = conn.cursor()
        sql_select = &amp;quot;select * from users_userprofile where email=&#39;{0}&#39; and password=&#39;{1}&#39;&amp;quot;.format(user_name, pass_word)

        result = cursor.execute(sql_select)
        for row in cursor.fetchall():
            # 查询到用户
            pass
        print &#39;hello&#39;

# eduline/urls.py文件:
from users.views import LoginUnsafeView

urlpatterns = [
    path(&#39;login/&#39;, LoginUnsafeView.as_view(), name=&#39;login&#39;),
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里竟然把sql语句写到这里，所以可以在参数中加入sql语句，使之拼接字符串从而为真被系统识别通过，盗取用户信息。但是在Django自带了orm,可以对这个进行验证，从而保证系统的安全。因此建议采用orm这种形式，不要使用原生的sql语句。&lt;/p&gt;
&lt;h3 id=&#34;xss攻击及防护&#34;&gt;XSS攻击及防护&lt;/h3&gt;
&lt;h3 id=&#34;csrf攻击及防护&#34;&gt;CSRF攻击及防护&lt;/h3&gt;
&lt;h2 id=&#34;xadmin进阶&#34;&gt;xadmin进阶&lt;/h2&gt;
&lt;h3 id=&#34;自定义icon&#34;&gt;自定义icon&lt;/h3&gt;
&lt;p&gt;以修改邮箱验证码为例，打开users/adminx.py文件，在EmailVerifyRecordAdmin函数新增一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;model_icon = &#39;fa fa-user&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实这个样式就是对应于&lt;a href=&#34;http://fontawesome.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;font awesome&lt;/a&gt;/http://www.fontawesome.com.cn/里面的图标，你可以下载新的源代码对目录下的css和fonts文件夹进行替换：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./43.jpg&#34; alt=&#34;1565963538707&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后刷新一下就出现想要的样式icon了。（如果为出现，用Ctrl+F5强制刷新，还是不行的话，注销重新登录）&lt;/p&gt;
&lt;h3 id=&#34;默认排序字段只读字段隐藏&#34;&gt;默认排序，字段只读，字段隐藏&lt;/h3&gt;
&lt;p&gt;我们以课程为例，来介绍这3个小功能。打开couses/adminx.py文件，在CourseAdmin中加入以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 默认排序：以点击数排序
ordering = [&#39;-click_nums&#39;]

# 字段只读：点击数只允许读取
readonly_fields = [&#39;click_nums&#39;, &#39;fav_nums&#39;]

# 字段隐藏：收藏数隐藏显示
exclude = [&#39;fav_nums&#39;]

# 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;搜索框&#34;&gt;搜索框&lt;/h3&gt;
&lt;p&gt;当课程很多时，我们不能以下拉菜单的形式来查找课程，需要有搜索框。课程它有一个外键是课程机构，因此需要到课程机构里面进行搜索框的配置。打开organization/adminx.py文件，在CourseOrgAdmin函数里面添加一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 搜索框，当课程数据量过大时，有课程指向它，会以ajax方式加载
    relfield_style = &#39;fk-ajax&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./44.jpg&#34; alt=&#34;1565963789074&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./45.jpg&#34; alt=&#34;1565963895535&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;inlines添加数据&#34;&gt;inlines添加数据&lt;/h3&gt;
&lt;p&gt;在这之前，新增课程的时候是不能同时新增课程章节信息的，需要跳到另一个页面，这是很麻烦的。所以考虑采用inlines来添加数据从而完成在一个页面直接完成章节信息的添加。&lt;/p&gt;
&lt;p&gt;打开couses/adminx.py文件，在最顶部新定义一个函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 课程直接添加章节
class LessonInline(object):
    model = Lesson
    extra = 0

# 同时在CourseAdmin中，新增一行代码
# 课程直接添加章节
class CourseAdmin(object):
    inlines = [LessonInline] # 数组，支持多个
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;刷新一下后台，发现章节信息在课程页面底部&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./46.jpg&#34; alt=&#34;1565963922420&#34;&gt;&lt;/p&gt;
&lt;p&gt;支持多个添加，但不支持嵌套添加（只能添加一级）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 再添加 一个CourseRecourseInline

class CourseRecourseInline(object):
    model = CourseRecource
    extra = 0

# 同时在CourseAdmin中，新增一行代码
# 课程直接添加章节
class CourseAdmin(object):
    inlines = [LessonInline, CourseRecourseInline] # 数组，支持多个
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样存储到这两个中的数据会保存到对应的表中&lt;/p&gt;
&lt;h3 id=&#34;一张表分两个model来进行管理&#34;&gt;一张表分两个model来进行管理&lt;/h3&gt;
&lt;p&gt;录播课程与非轮播课程可以分开管理，但是最好是在一张表里显示。打开courses/models.py文件，在course函数下面新增代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class BannerCourse(Course):  # 注意是继承Course而不是object这个最高类
    class Meta:
        verbose_name = &amp;quot;轮播课程&amp;quot;
        verbose_name_plural = verbose_name
        proxy = True  # 很重要，否则会生成另外一张表，这样设置具有model的功能，但不会生成表
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后打开courses/adminx.py文件，修改之前的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;from .models import  BannerCourse

class CourseAdmin(object):
    list_display = [&#39;image&#39;, ....&#39;,&#39;add_time&#39;]  # 一次显示你想出现的多行数据
    search_fields = [&#39;name&#39;, ...，&#39;click_nums&#39;]  # 查询你想要的数据
    list_filter = [&#39;name&#39;, ..., &#39;click_nums&#39;,&#39;add_time&#39;]  # 过滤器
    # # 默认排序：以点击数排序
    # ordering = [&#39;-click_nums&#39;]
    #
    # # 字段只读：点击数只允许读取
    # readonly_fields = [&#39;click_nums&#39;, &#39;fav_nums&#39;]
    #
    # # 字段隐藏：收藏数隐藏显示
    # exclude = [&#39;fav_nums&#39;]
    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏

    # 课程直接添加章节,课程资源
    inlines = [LessonInline, CourseResourceInline]

    # 过滤列表中的数据：为了两个页面信息不重复
    def queryset(self):
        qs = super(CourseAdmin, self).queryset()
        qs = qs.filter(is_banner=False)
        return qs


class BannerCourseAdmin(object):
     list_display = [&#39;image&#39;, ....&#39;,&#39;add_time&#39;]  # 一次显示你想出现的多行数据
    search_fields = [&#39;name&#39;, ...，&#39;click_nums&#39;]  # 查询你想要的数据
    list_filter = [&#39;name&#39;, ..., &#39;click_nums&#39;,&#39;add_time&#39;]  # 过滤器
    # # 默认排序：以点击数排序
    # ordering = [&#39;-click_nums&#39;]
    #
    # # 字段只读：点击数只允许读取
    # readonly_fields = [&#39;click_nums&#39;, &#39;fav_nums&#39;]
    #
    # # 字段隐藏：收藏数隐藏显示
    # exclude = [&#39;fav_nums&#39;]
    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏

    # 课程直接添加章节,课程资源
    inlines = [LessonInline, CourseResourceInline]

    # 过滤列表中的数据
    def queryset(self):
        qs = super(BannerCourseAdmin, self).queryset()
        qs = qs.filter(is_banner=True)
        return qs

xadmin.site.register(BannerCourse, BannerCourseAdmin)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./47.jpg&#34; alt=&#34;1565965032042&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;直接列表页编辑&#34;&gt;直接列表页编辑&lt;/h3&gt;
&lt;p&gt;即可以直接在列表页进行更改编辑操作，在courses/adminx.py文件的CourseAdmin函数，新增一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; # 直接列表页编辑
    list_editable = [&#39;degree&#39;, &#39;desc&#39;, ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./48.jpg&#34; alt=&#34;1565965179247&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;列表页显示章节数&#34;&gt;列表页显示章节数&lt;/h3&gt;
&lt;p&gt;在courses/adminx.py文件的CourseAdmin和BannerCourseAdmin函数的list_display中，新增显示字段&lt;code&gt;get_zj_nums&lt;/code&gt;，刷新后台发现是黑色的英文&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./49.jpg&#34; alt=&#34;1565965771620&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要修改，新增一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;get_zj_nums.short_description = &amp;quot;章节数&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./50.jpg&#34; alt=&#34;1565965942119&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;显示自定义的html代码&#34;&gt;显示自定义的html代码&lt;/h3&gt;
&lt;p&gt;在刚才的页面下面新增以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def go_to(self):
	from django.utils.safestring import mark_safe
     # 如果不使用mark_safe，系统则会对其进行转义
    return mark_safe(&amp;quot;&amp;lt;a href=&#39;http://www.baidu.com&#39;&amp;gt;跳转&amp;lt;/&amp;gt;&amp;quot;)

go_to.short_description = &amp;quot;跳转&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;列表页定时刷新&#34;&gt;列表页定时刷新&lt;/h3&gt;
&lt;p&gt;打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增一行代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; refresh_times = 3,5  # 列表页定时刷新3s或者5s
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;字段联动&#34;&gt;字段联动&lt;/h3&gt;
&lt;p&gt;某一字段发生改变的时候不需要手动更改，比如添加一门课程之后，机构的课程数需要+1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# CourseAdmin中添加

def save_models(self):
    # 在保存课程的时候,统计课程机构的课程数
    obj = self.new_obj
    # 新增课程还没有保存，统计的课程数就会少一个
    obj.save()
    # 必须确定存在
    if obj.course_org is not None:
        # obj实际是一个course对象
        course_org = obj.course_org
        course_org.course_nums = Course.objects.filter(course_org=course_org).count()
        course_org.save()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;xadmin目录&#34;&gt;xadmin目录&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;- locale  对应语言包
- migrations 是数据表的记录
- plugins 每一个后台页面都是一个plugin插件
- static 静态文件夹，里面有js,css
- template 这是xadmin自己使用的html文件
- templatetags  这是tag模板
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;xadmin集成富文本&#34;&gt;xadmin集成富文本&lt;/h3&gt;
&lt;p&gt;首先点击&lt;a href=&#34;https://xadmin.readthedocs.io/en/docs-chinese/make_plugin.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Xadmin 插件制作&lt;/a&gt;，学着官网的介绍，自己尝试做一个插件:富文本编辑器.&lt;/p&gt;
&lt;p&gt;有坑的插件！！！先看完！！！
点击&lt;a href=&#34;https://github.com/zhangfisher/DjangoUeditor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DjangoUeditor&lt;/a&gt;，获取&lt;strong&gt;DjangoUeditor&lt;/strong&gt;的安装包，然后按照帮助文档或者下面的要求安装DjangoUeditor；或者&lt;a href=&#34;https://pypi.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PYPI&lt;/a&gt;下载DjangoUeditor.&lt;/p&gt;
&lt;h4 id=&#34;1安装方法注意需要转到虚拟环境下面才能安装&#34;&gt;1、安装方法(注意需要转到虚拟环境下面才能安装)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;方法一：将github整个源码包下载，在命令行运行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;方法二：使用pip工具在命令行运行(推荐)：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pip install DjangoUeditor
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2在django中安装djangoueditor&#34;&gt;2、在Django中安装DjangoUeditor&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在INSTALL_APPS里面增加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;INSTALLED_APPS = [
    &#39;captcha&#39;, # 验证码
    &#39;pure_pagination&#39;, # 分页
    &#39;DjangoUeditor&#39;,
]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3富文本相关path配置&#34;&gt;3、富文本相关path配置&lt;/h4&gt;
&lt;p&gt;配置url&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# 富文本相关url
url(&amp;quot;ueditor/&amp;quot;, include(&#39;DjangoUeditor.urls&#39;)),
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4在models中的使用&#34;&gt;4、在models中的使用&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# courses/models.py文件：

from DjangoUeditor.models import UEditorField

class Course(models.Model):

detail = UEditorField(verbose_name=&#39;课程详情&#39;, width=600, height=300, imagePath=&amp;quot;courses/ueditor/&amp;quot;,filePath=&amp;quot;courses/ueditor/&amp;quot;, default=&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5书写代码&#34;&gt;5、书写代码&lt;/h4&gt;
&lt;p&gt;在xadmin的plugins文件夹下面，新增一个&lt;strong&gt;ueditor.py&lt;/strong&gt;文件，在里面新增：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xadmin

from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView
from DjangoUeditor.models import UEditorField
from DjangoUeditor.widgets import UEditorWidget
from django.conf import settings

class XadminUEditorWidget(UEditorWidget):
	def __init__(self,**kwargs):
        self.ueditor_options=kwargs
        self.Media.js = None
        super(XadminUEditorWidget,self).__init__(kwargs)
        
class UeditorPlugin(BaseAdminPlugin):
    def get_field_style(self, attrs, db_field, style, **kwargs):
        if style == &#39;ueditor&#39;:
            if isinstance(db_field, UEditorField):
                widget = db_field.formfield().widget
                param = {}
                param.update(widget.ueditor_settings)
                param.update(widget.attrs)
                return {&#39;widget&#39;: XadminUEditorWidget(**param)}
        return attrs
    
    # 在生成的页面中放入自己的js文件
    def block_extrahead(self, context, nodes):
        js = &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;%s&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39; % (settings.STATIC_URL + &amp;quot;ueditor/ueditor.config.js&amp;quot;)         #自己的静态目录
        js += &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;%s&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39; % (settings.STATIC_URL + &amp;quot;ueditor/ueditor.all.min.js&amp;quot;)   #自己的静态目录
        nodes.append(js)
        
# 新增页面
xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)

# 修改页面
xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6字段显示样式&#34;&gt;6、字段显示样式&lt;/h4&gt;
&lt;p&gt;courses/adminx.py文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CourseAdmin(object):
	# 字段显示样式
	style_fields = {&amp;quot;detail&amp;quot;: &amp;quot;ueditor&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7注册进入plugins&#34;&gt;7、注册进入plugins&lt;/h4&gt;
&lt;p&gt;找到plugins文件夹下的__init__.py文件，在PLUGINS中写入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;PLUGINS= (&#39;ueditor&#39;,)	# 与文件名一致
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有坑！！！&lt;/p&gt;
&lt;p&gt;会报错！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./51.jpg&#34; alt=&#34;1565968548065&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是UEditor 好像是没有Python3版本的。 直接这样安装，要自己修改里面的一些Python2的语法&lt;/p&gt;
&lt;p&gt;解决方法：找到DjangoUeditor3下载命令行安装，或者解压后复制到项目下的extra_apps下&lt;/p&gt;
&lt;p&gt;（可能还需要将DjangoUeditor下static中的ueditor文件夹拷贝到根目录下的static文件中）&lt;/p&gt;
&lt;h4 id=&#34;excel导入插件&#34;&gt;Excel导入插件&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./52.jpg&#34; alt=&#34;1566010637041&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、根目录下找到\extra_apps\xadmin\plugins\路径，创建excel.py文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# _*_ coding:utf-8 _*_
import xadmin
from xadmin.views import BaseAdminPlugin, ListAdminView
from django.template import loader
from xadmin.plugins.utils import get_context_dict


# excel 导入
class ListImportExcelPlugin(BaseAdminPlugin):
    import_excel = False

    def init_request(self, *args, **kwargs):
        return bool(self.import_excel)

    def block_top_toolbar(self, context, nodes):
        # context = {&amp;quot;context&amp;quot;: context}
        nodes.append(loader.render_to_string(&#39;xadmin/excel/model_list.top_toolbar.import.html&#39;,
                                             context=get_context_dict(context)))


xadmin.site.register_plugin(ListImportExcelPlugin, ListAdminView)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：这里有个坑！按照视频或者网站上的说法写的excel.py文件会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./53.jpg&#34; alt=&#34;1566016115014&#34;&gt;&lt;/p&gt;
&lt;p&gt;原因是：&lt;code&gt;context_instance&lt;/code&gt;字段在Django1.8以后产生，而在Django1.10之后就移除了，按照网上的修改方法将改成&lt;code&gt;context&lt;/code&gt;，即：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nodes.append(loader.render_to_string(&#39;xadmin/excel/model_list.top_toolbar.import.html&#39;, context))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;仍会报错！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./54.jpg&#34; alt=&#34;1566016056433&#34;&gt;&lt;/p&gt;
&lt;p&gt;再更改为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;context = {&amp;quot;context&amp;quot;: context}
nodes.append(loader.render_to_string(&#39;xadmin/excel/model_list.top_toolbar.import.html&#39;, context))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以完成操作，但是会报警告！&lt;/p&gt;
&lt;p&gt;2、配置.html文件，即项目根目录下找到\extra_apps\xadmin\templates\xadmin，创建excel文件夹，在excel文件夹下创建model_list.top_toolbar.import.html文件，复制以下代码.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{% load i18n %}
&amp;lt;div class=&amp;quot;btn-group export&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;dropdown-toggle btn btn-default btn-sm&amp;quot; data-toggle=&amp;quot;dropdown&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;
    &amp;lt;i class=&amp;quot;icon-share&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 导入 &amp;lt;span class=&amp;quot;caret&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;/a&amp;gt;
  &amp;lt;ul class=&amp;quot;dropdown-menu&amp;quot; role=&amp;quot;menu&amp;quot; aria-labelledby=&amp;quot;dLabel&amp;quot;&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;a data-toggle=&amp;quot;modal&amp;quot; data-target=&amp;quot;#export-modal-import-excel&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;icon-circle-arrow-down&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 导入 Excel&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
    &amp;lt;script&amp;gt;
        function fileChange(target){
//检测上传文件的类型
            var imgName = document.all.submit_upload.value;
            var ext,idx;
            if (imgName == &#39;&#39;){
                document.all.submit_upload_b.disabled=true;
                alert(&amp;quot;请选择需要上传的 xls 文件!&amp;quot;);
                return;
            } else {
                idx = imgName.lastIndexOf(&amp;quot;.&amp;quot;);
                if (idx != -1){
                    ext = imgName.substr(idx+1).toUpperCase();
                    ext = ext.toLowerCase( );
					{# alert(&amp;quot;ext=&amp;quot;+ext);#}
                    if (ext != &#39;xls&#39; &amp;amp;&amp;amp; ext != &#39;xlsx&#39;){
                        document.all.submit_upload_b.disabled=true;
                        alert(&amp;quot;只能上传 .xls 类型的文件!&amp;quot;);
 
                        return;
                    }
                } else {
                    document.all.submit_upload_b.disabled=true;
                    alert(&amp;quot;只能上传 .xls 类型的文件!&amp;quot;);
                    return;
                }
            }
        }
    &amp;lt;/script&amp;gt;
    &amp;lt;div id=&amp;quot;export-modal-import-excel&amp;quot; class=&amp;quot;modal fade&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt;
          &amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
              {% csrf_token %}
          &amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;×&amp;lt;/button&amp;gt;
            &amp;lt;h4 class=&amp;quot;modal-title&amp;quot;&amp;gt;导入 Excel&amp;lt;/h4&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt;
               &amp;lt;input type=&amp;quot;file&amp;quot; οnchange=&amp;quot;fileChange(this)&amp;quot; name=&amp;quot;excel&amp;quot; id=&amp;quot;submit_upload&amp;quot;&amp;gt;
 
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt;
            &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-default&amp;quot; data-dismiss=&amp;quot;modal&amp;quot;&amp;gt;{% trans &amp;quot;Close&amp;quot; %}&amp;lt;/button&amp;gt;
            &amp;lt;button class=&amp;quot;btn btn-success&amp;quot; type=&amp;quot;submit&amp;quot; id=&amp;quot;submit_upload_b&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;icon-share&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; 导入&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-content --&amp;gt;
      &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal-dalog --&amp;gt;
    &amp;lt;/div&amp;gt;&amp;lt;!-- /.modal --&amp;gt;
 
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、在想导入的XxxAdmin下添加&lt;code&gt;impotr_excel = True&lt;/code&gt;，并且重写post方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; def post(self, request, *args, **kwargs):
    #  导入逻辑
    if &#39;excel&#39; in request.FILES:
        pass
    return super(CourseAdmin, self).post(request, args, kwargs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4、最后在xadmin/plugins文件夹下找到&lt;code&gt;__init__.py&lt;/code&gt;文件夹，添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGINS = (
    &#39;excel&#39;,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./55.jpg&#34; alt=&#34;1566021359412&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH框架整合基本步骤</title>
      <link>https://CoMath21.github.io/post/1-ssh%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-ssh%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;　　首先需要找到开发软件：Eclipse-J2EE版本，并且安装相应插件（最好安装，便于初期简单编程）.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：云盘中一个压缩包中有完整软件.&lt;/p&gt;
&lt;p&gt;安装插件步骤：
打开Eclipse-J2EE版本，找到Help→Install New SoftWare → Work with右面的Add ，在Archive…中找到对应软件的路径，点集OK即可.
需要的软件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hibernate的插件：hibernatetools-Update-4.1.1.Final_2013-12-08_01-06-33-B605.zip&lt;/li&gt;
&lt;li&gt;Spring的插件：springsource-tool-suite-3.4.0.RELEASE-e4.3.1-updatesite.zip&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果没有服务器，需要安装Tomcat服务器.&lt;/p&gt;
&lt;h2 id=&#34;springhibernatestruts的顺序整合框架&#34;&gt;Spring→Hibernate→Struts的顺序整合框架&lt;/h2&gt;
&lt;h3 id=&#34;1-加入spring&#34;&gt;1. 加入Spring&lt;/h3&gt;
&lt;h4 id=&#34;1加入-spring-所需要的-jar-包文件&#34;&gt;1)	加入 Spring 所需要的 Jar 包文件&lt;/h4&gt;
&lt;p&gt;　　找到 Spring 的 jar 包文件夹，\Jar包文件\Spring4.0.0\spring-framework-4.0.0.RELEASE\required，大约15个左右；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.springsource.net.sf.cglib-2.2.0.jar&lt;/li&gt;
&lt;li&gt;com.springsource.org.aopalliance-1.0.0.jar&lt;/li&gt;
&lt;li&gt;com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar&lt;/li&gt;
&lt;li&gt;commons-logging-1.2.jar&lt;/li&gt;
&lt;li&gt;spring-aop-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-aspects-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-beans-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-context-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-core-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-expression-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-jdbc-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-orm-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-tx-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-web-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;li&gt;spring-webmvc-4.0.0.RELEASE.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2配置-webxml-文件&#34;&gt;2)	配置 web.xml 文件&lt;/h4&gt;
&lt;p&gt;　　配置web.xml文件可以找到ContextLoaderListener会自动生成以下代码，随后将Location改为applicationContext（Spring配置文件）的路径.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置  Spring 配置文件的名称和位置 --&amp;gt;
&amp;lt;context-param&amp;gt;
  &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
  &amp;lt;param-value&amp;gt;classpath:applicationContext.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/context-param&amp;gt;
		
&amp;lt;!-- 启动 IOC 容器的  ServletContextListener --&amp;gt;
&amp;lt;listener&amp;gt;
&amp;lt;listener-class&amp;gt;
org.springframework.web.context.ContextLoaderListener
&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3加入-spring-的配置文件&#34;&gt;3)	加入 Spring 的配置文件&lt;/h4&gt;
&lt;p&gt;　　可以先创建一个资源文件conf，将资源文件放入其中（也可以直接在src下创建），在资源文件下创建一个Spring的配置文件点击右键找到Spring Bean Configuration File，输入配置文件的名字，（注意这里面的名字要与web.xml下的的配置文件的名字相同，也就是一个文件）；然后选中aop、beans、context、tx等选项，（注意这里面所选取的是最基本的，根据需要可以自行添加其他选项）；最后Finish即可.
&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2加入hibernate&#34;&gt;2.	加入Hibernate&lt;/h3&gt;
&lt;h4 id=&#34;1-建立持久化类-和其对应的-hbmxml-文件-生成对应的数据表&#34;&gt;1). 建立持久化类, 和其对应的 .hbm.xml 文件, 生成对应的数据表&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;i. 配置hibernate.cfg.xml文件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　鼠标右键找到Hibernate Configuration File(cfg.xml)创建hibernate.cfg.xml配置文件并配置基本信息（可根据需求自行添加）.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;hibernate-configuration&amp;gt;
&amp;lt;session-factory&amp;gt;
    &amp;lt;!-- 配置基本属性 --&amp;gt;
    &amp;lt;!-- 方言 --&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot;&amp;gt;org.hibernate.dialect.SQLServer2008Dialect
&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.dialect&amp;quot;&amp;gt; org.hibernate.dialect.MySQL5InnoDBDialect&amp;lt;/property&amp;gt;

    &amp;lt;!-- 是否显示及格式化SQL --&amp;gt;
    &amp;lt;property name=&amp;quot;hibernate.show_sql&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;hibernate.format_sql&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;hibernate.temp.use_jdbc_metadata_defaults&amp;quot;&amp;gt;false&amp;lt;/property&amp;gt;  
    &amp;lt;!-- 生成数据表的策略 --&amp;gt;
    &amp;lt;property name=&amp;quot;hibernate.hbm2ddl.auto&amp;quot;&amp;gt;update&amp;lt;/property&amp;gt;
    &amp;lt;!-- 生成二级缓存 --&amp;gt;
  &amp;lt;/session-factory&amp;gt;
&amp;lt;/hibernate-configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;ii. 建立持久化类&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;　　也就是平时所说的对象类、beans（一般创建在domain包下或者entities下），并生成对应参数的getter and setter；之后鼠标右键创建Hibernate XML Mapping file (hbm.xml)文件，直接创建即可. 就会生成对应的*. hbm.xml文件（根据不同的需求可能够对*. hbm.xml文件进行适当的修改）&lt;/p&gt;
&lt;h4 id=&#34;2-spring-整合-hibernate&#34;&gt;2). Spring 整合 Hibernate&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①  加入 jar 包: 找到 Hibernate 的 jar 包文件夹，\Jar包文件\Jar包文件\Hibernate4.2.21\hibernate-release-4.2.21.Final\lib\required路径下的所有 jar 包.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;antlr-2.7.7.jar&lt;/li&gt;
&lt;li&gt;dom4j-1.6.1.jar&lt;/li&gt;
&lt;li&gt;hibernate-commons-annotations-4.0.2.Final.jar&lt;/li&gt;
&lt;li&gt;hibernate-core-4.2.21.Final.jar&lt;/li&gt;
&lt;li&gt;hibernate-jpa-2.0-api-1.0.1.Final.jar&lt;/li&gt;
&lt;li&gt;javassist-3.18.1-GA.jar&lt;/li&gt;
&lt;li&gt;jboss-logging-3.1.0.GA.jar&lt;/li&gt;
&lt;li&gt;jboss-transaction-api_1.1_spec-1.0.1.Final.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;②  在类路径下加入 hibernate.cfg.xml 文件，并在其中配置   hibernate 的基本属性&lt;/p&gt;
&lt;p&gt;③  建立持久化类和其对应的  .hbm.xml 文件（过）&lt;/p&gt;
&lt;p&gt;④  和 Spring 进行整合（过）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加入c3p0和SQLServer的驱动（需要引入相关jar包文件：c3p0-0.9.2.1.jar、sqljdbc4.jar（SQL2005））&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;（c3p0:是一个 数据库连接池 ，利用 sqljdbc4 建立与数据库的连接 ， 并且管理这些连接，不用每次访问数据库都 重新发出数据库连接请求；大大提升性能）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;具体实现：
首先要创建*.properties文件，并对其进行配置，主要为数据库的相关参数设置.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 资源文件样式 --&amp;gt;
  jdbc.user=sa
  jdbc.password=sa123
  jdbc.driverClass=com.microsoft.sqlserver.jdbc.SQLServerDriver
  jdbc.jdbcUrl=jdbc:sqlserver://localhost:1433; DatabaseName=PwdManagerTest

  jdbc.initialPoolSize=5
  jdbc.maxPoolSize=10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在applicationContext.xml中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 导入资源文件 --&amp;gt;
  &amp;lt;context:property-placeholder location=&amp;quot;classpath:db.properties&amp;quot; /&amp;gt;
&amp;lt;!-- 配置 C3P0 数据源 --&amp;gt;
&amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.mchange.v2.c3p0.ComboPooledDataSource&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;user&amp;quot; value=&amp;quot;${jdbc.user}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${jdbc.password}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;driverClass&amp;quot; value=&amp;quot;${jdbc.driverClass}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;jdbcUrl&amp;quot; value=&amp;quot;${jdbc.jdbcUrl}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    
  &amp;lt;property name=&amp;quot;initialPoolSize&amp;quot; value=&amp;quot;${jdbc.initialPoolSize}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;maxPoolSize&amp;quot; value=&amp;quot;${jdbc.maxPoolSize}&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=red&gt;这里会报一个错误：Error creating bean with name &amp;lsquo;dataSource&amp;rsquo; defined in class path resource [applicationContext.xml]:&amp;hellip;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误原因&lt;/strong&gt;：缺少mchange-commons-java-0.2.3.4.jar包.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：mchange-commons-java-0.2.3.4.jar包是c3p0数据库连接池的辅助包，如果没有这个包系统启动时会报classnotfoundexception，这是更新c3p0-0.9.2版本后分离出来的包，0.9.1的时候还是只是一个包.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：导入mchange-commons-java-0.2.3.4.jar包即可.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路径&lt;/strong&gt;：Jar包文件\C3P0\C3P0-0.9-2.1JAR\c3p0-0.9.2.1\lib...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Spring 的配置文件中配置:数据源dataSource,SessionFactory,声明式事务（先了解事务，包括事务隔离级别等）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置 SessionFactory --&amp;gt;
&amp;lt;bean id=&amp;quot;sessionFactory&amp;quot;					class=&amp;quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;configLocation&amp;quot; value=&amp;quot;classpath:hibernate.cfg.xml&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;mappingLocations&amp;quot; value=&amp;quot;classpath:com/PwdManager/domain/*.hbm.xml&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=blue&gt;说明：执行到当前操作即可打开服务器，运行当前项目检测，正常情况下，不会报错，没有错误信息，而且在数据库中会生成对应的表结构. &lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置 Spring 的声明式事务 --&amp;gt;
&amp;lt;!-- 1. 配置 Hibernate 的事务管理器 --&amp;gt;
&amp;lt;bean id=&amp;quot;transactionManager&amp;quot; class=&amp;quot;org.springframework.orm.hibernate4.HibernateTransactionManager&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;sessionFactory&amp;quot; ref=&amp;quot;sessionFactory&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
      
&amp;lt;!-- 2. 配置事务属性 --&amp;gt;
&amp;lt;tx:advice id=&amp;quot;txAdvice&amp;quot; transaction-manager=&amp;quot;transactionManager&amp;quot;&amp;gt;
    &amp;lt;tx:attributes&amp;gt;
      &amp;lt;tx:method name=&amp;quot;get*&amp;quot; read-only=&amp;quot;true&amp;quot;/&amp;gt;
      &amp;lt;tx:method name=&amp;quot;*&amp;quot;/&amp;gt;
    &amp;lt;/tx:attributes&amp;gt;
&amp;lt;/tx:advice&amp;gt;
	
&amp;lt;!-- 3. 配置事务切入点,再把事务属性和事务切入点关联起来 --&amp;gt;
  &amp;lt;aop:config&amp;gt;
  &amp;lt;!-- 任一修饰符,任意返回值 ..下的所有类下的所有方法,参数值任意--&amp;gt;
  &amp;lt;aop:pointcut expression=&amp;quot;execution(* com.PwdManager.service.*.*(..))&amp;quot; id=&amp;quot;txPointcut&amp;quot;/&amp;gt;
  &amp;lt;!-- 把事务属性和事务切入点关联起来 --&amp;gt;
  &amp;lt;aop:advisor advice-ref=&amp;quot;txAdvice&amp;quot; pointcut-ref=&amp;quot;txPointcut&amp;quot;/&amp;gt;
&amp;lt;/aop:config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-加入-stuts2&#34;&gt;3. 加入 Stuts2&lt;/h3&gt;
&lt;h4 id=&#34;1-加入--jar-包&#34;&gt;1) 加入  jar 包&lt;/h4&gt;
&lt;p&gt;　　找到 Stuts2 的 jar 包文件夹，\Jar包文件 \Jar包文件\Struts2.3.34\struts-2.3.34\apps\struts2-blank\WEB-INF\lib路径下的所有 jar 包.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xwork-core-2.3.34.jar&lt;/li&gt;
&lt;li&gt;struts2-spring-plugin-2.3.34.jar&lt;/li&gt;
&lt;li&gt;struts2-json-plugin-2.3.34.jar&lt;/li&gt;
&lt;li&gt;struts2-core-2.3.34.jar&lt;/li&gt;
&lt;li&gt;ognl-3.0.21.jar&lt;/li&gt;
&lt;li&gt;log4j-core-2.3.jar&lt;/li&gt;
&lt;li&gt;log4j-api-2.3.jar&lt;/li&gt;
&lt;li&gt;javassist-3.11.0.GA.jar&lt;/li&gt;
&lt;li&gt;freemarker-2.3.22.jar&lt;/li&gt;
&lt;li&gt;commons-lang3-3.2.jar&lt;/li&gt;
&lt;li&gt;commons-io-2.2.jar&lt;/li&gt;
&lt;li&gt;commons-fileupload-1.3.2.jar&lt;/li&gt;
&lt;li&gt;asm-tree-3.3.jar&lt;/li&gt;
&lt;li&gt;asm-commons-3.3.jar&lt;/li&gt;
&lt;li&gt;asm-3.3.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-在webxml文件中配置struts2的filter&#34;&gt;2) 在web.xml文件中配置Struts2的Filter&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置 Struts2 的 Filter --&amp;gt;
&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;
    org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
  &amp;lt;/filter-class&amp;gt;
&amp;lt;/filter&amp;gt;

&amp;lt;filter-mapping&amp;gt;
  &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-加入-struts2-的配置文件&#34;&gt;3) 加入 Struts2 的配置文件&lt;/h4&gt;
&lt;p&gt;　　可以拷贝例子下的struts.xml文件，例子可以在Jar包文件\Struts2.3.34\struts-2.3.34\apps\struts2-blank\WEB-INF\src\java\struts.xml文件参考.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE struts PUBLIC
  &amp;quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&amp;quot;
  &amp;quot;http://struts.apache.org/dtds/struts-2.3.dtd&amp;quot;&amp;gt;
&amp;lt;struts&amp;gt;
  &amp;lt;constant name=&amp;quot;struts.enable.DynamicMethodInvocation&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;constant name=&amp;quot;struts.devMode&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
  &amp;lt;package name=&amp;quot;default&amp;quot; namespace=&amp;quot;/&amp;quot; extends=&amp;quot;struts-default&amp;quot;&amp;gt;
      &amp;lt;action name=&amp;quot;index&amp;quot;&amp;gt;
        &amp;lt;result type=&amp;quot;redirectAction&amp;quot;&amp;gt;
            &amp;lt;param name=&amp;quot;actionName&amp;quot;&amp;gt;HelloWorld&amp;lt;/param&amp;gt;
        &amp;lt;/result&amp;gt;
    &amp;lt;/action&amp;gt;
&amp;lt;/package&amp;gt;
&amp;lt;!-- Add packages here --&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-整合-spring&#34;&gt;4) 整合 Spring&lt;/h4&gt;
&lt;p&gt;① 加入 Struts2 的 Spring 插件的 jar 包  struts2-spring-plugin-2.3.34.jar.&lt;/p&gt;
&lt;p&gt;② 在 Spring 的配置文件中正常配置 Action ,注意 Action 中需要配置 scope 属性为 prototype 不是单例的.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;XxxAction&amp;quot;&amp;gt; class=&amp;quot;&amp;quot; scope=&amp;quot;prototype&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;&amp;quot; ref=&amp;quot;&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;!-- 实例  --&amp;gt;
&amp;lt;bean id=&amp;quot;userloginDao&amp;quot; class=&amp;quot;com.dao.userLoginDao&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;sessionFactory&amp;quot; ref=&amp;quot;sessionFactory&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;userloginService&amp;quot; class=&amp;quot;com.service.userLoginService&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;userLoginDao&amp;quot; ref=&amp;quot;userloginDao&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
  
&amp;lt;bean id=&amp;quot;userloginAction&amp;quot; class=&amp;quot;com.action.userLoginAction&amp;quot; scope=&amp;quot;prototype&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;userLoginService&amp;quot; ref=&amp;quot;userloginService&amp;quot;/&amp;gt;	
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=red&gt;这里面需要注意的是&lt;/font&gt;：如果是在搭建初期只是为了测试是否成功，在创建对应的Package和Class后，在属性值为sessionFactory的Class下要创建sessionFactory的实例对象并设置setter方法，即&lt;code&gt;&amp;lt;property name=&amp;quot;sessionFactory&amp;quot; ref=&amp;quot;sessionFactory&amp;quot;/&amp;gt;&lt;/code&gt;的&lt;code&gt;&amp;lt;bean id=&amp;quot;userloginDao&amp;quot; class=&amp;quot;com.dao.userLoginDao&amp;quot;&amp;gt;&lt;/code&gt;需要在类userLoginDao下实例：&lt;code&gt;private SessionFactory sessionFactory&lt;/code&gt;;并设置&lt;code&gt;setter&lt;/code&gt;方法（可以带上&lt;code&gt;getter&lt;/code&gt;方法），以下其他bean相同. （依赖注入相关知识）&lt;/p&gt;
&lt;p&gt;③ 在Struts2的配置文件中配置Action时,class 属性指向该 Action 在Spring IOC中的id.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先要定义拦截器&lt;/strong&gt;
I. 在JSP页面如果没有采用Ajax可以直接使用以下action&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;action name=&amp;quot;XxxName&amp;quot; class=&amp;quot;XxxAction&amp;quot;&amp;gt;
  &amp;lt;result&amp;gt;/success.jsp&amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JSP	页面form表单提交直接交给XxxName，即：&lt;code&gt;&amp;lt;form action=&amp;quot;XxxName&amp;quot;&amp;gt;&lt;/code&gt;
这种情况需要接受的action中提供form表单中input的name所对应的getter和setter
然后可以直接获取到form表单中的值.
II. 如果JSP页面使用了Ajax则需要使用以下action&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;action name=&amp;quot;userJson-*&amp;quot; class=&amp;quot;com.action.userJsonAction&amp;quot; method=&amp;quot;{1}&amp;quot;&amp;gt;
  &amp;lt;result name=&amp;quot;success&amp;quot; type=&amp;quot;json&amp;quot;&amp;gt;
    &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;result&amp;lt;/param&amp;gt;
  &amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;result为返回ajax的data数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里需要注意的是在使用Ajax搭配Json实现数据的交互时，需要定义拦截器的时候继承json-default拦截器，同时继承两者也可以.
这里要是采用AJAX的方式，可能需要引入JSON的相关Jar包：
但是这里需要注意的是存在两种不同的JSON的Jar包，主要区别在于实现构造方法的变量不同.&lt;/p&gt;
&lt;p&gt;例如：
&lt;font color=red&gt;√&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JSONObject json = new JSONObject(map);&lt;/code&gt;带参构造需要引入org.json.JSONObject; &lt;code&gt;JSONObject json = new JSONObject();&lt;/code&gt;   无参构造引入的是net.sf.json.JSONObject
org.json.JSONObject类在json.jar包下—— \Jar包文件\JSON\org.json
net.sf.json.JSONObject其他包中—— \Jar包文件\JSON\net.sf.json&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commons-beanutils-1.7.0.jar&lt;/li&gt;
&lt;li&gt;commons-collections-3.2.1.jar&lt;/li&gt;
&lt;li&gt;commons-httpclient-3.1.jar&lt;/li&gt;
&lt;li&gt;commons-lang-2.3.jar&lt;/li&gt;
&lt;li&gt;commons-logging-1.1.1.jar&lt;/li&gt;
&lt;li&gt;ezmorph-1.0.3.jar&lt;/li&gt;
&lt;li&gt;json-lib-2.2.3-jdk15.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取ajax传过来的参数需要使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 用于获取data数据，定义request
HttpServletRequest request = null;
request = ServletActionContext.getRequest();
String UserID = request.getParameter(&amp;quot;UserID&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;struts&amp;gt;				
  &amp;lt;constant name=&amp;quot;struts.i18n.encoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/constant&amp;gt;
  &amp;lt;constant name=&amp;quot;struts.enable.DynamicMethodInvocation&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
  &amp;lt;constant name=&amp;quot;struts.devMode&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
  &amp;lt;package name=&amp;quot;default&amp;quot; namespace=&amp;quot;/&amp;quot; extends=&amp;quot;json-default,struts-default&amp;quot;&amp;gt;
  &amp;lt;!-- 定义新的拦截器栈, 配置prepare拦截器栈的alwaysInvokePrepare参数值为false --&amp;gt;
    &amp;lt;interceptors&amp;gt;
      &amp;lt;interceptor-stack name=&amp;quot;sshStack&amp;quot;&amp;gt;
        &amp;lt;interceptor-ref name=&amp;quot;paramsPrepareParamsStack&amp;quot;&amp;gt;
          &amp;lt;param name=&amp;quot;prepare.alwaysInvokePrepare&amp;quot;&amp;gt;false&amp;lt;/param&amp;gt;
        &amp;lt;/interceptor-ref&amp;gt;
      &amp;lt;/interceptor-stack&amp;gt;
    &amp;lt;/interceptors&amp;gt;
    &amp;lt;!-- 使用新的拦截器栈 --&amp;gt;
    &amp;lt;default-interceptor-ref name=&amp;quot;sshStack&amp;quot;&amp;gt;&amp;lt;/default-interceptor-ref&amp;gt;
                  
    &amp;lt;action name=&amp;quot;userJson-*&amp;quot; class=&amp;quot;com.action.userJsonAction&amp;quot; method=&amp;quot;{1}&amp;quot;&amp;gt;
      &amp;lt;result name=&amp;quot;success&amp;quot; type=&amp;quot;json&amp;quot;&amp;gt;
        &amp;lt;param name=&amp;quot;root&amp;quot;&amp;gt;result&amp;lt;/param&amp;gt;
      &amp;lt;/result&amp;gt;
    &amp;lt;/action&amp;gt;
  &amp;lt;/package&amp;gt;			
  &amp;lt;/struts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$.ajax({
  url : &amp;quot;blogJson-readArticle&amp;quot;,
  type : &amp;quot;POST&amp;quot;,	
  data : {
    userID : &amp;quot;132&amp;quot;,
    artID : $(&amp;quot;input:hidden[name=&#39;artID&#39;]&amp;quot;).val()
  },
  timeout : 30000,
  dataType : &amp;quot;json&amp;quot;,// 设置需要返回的数据类型
  scriptCharset : &#39;utf-8&#39;,
  success : function(data) {
    var obj = $.parseJSON(data);
    var data = obj.data;
    
  },
  error : function(XMLHttpRequest, textStatus, errorThrown) {
    alert(errorThrown + 123);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-完成功能&#34;&gt;4. 完成功能&lt;/h3&gt;
&lt;p&gt;　　具体方式可以按照自己的要求实施，&lt;strong&gt;大致方法&lt;/strong&gt;：
在dao层可以直接管理有关数据库的一切方法，通过service层调用dao层的方法，在action层对service方法进行调用即可；这里需要注意一点，就是关于一些属性的设置问题，具体跟上述使用JSON时注意的事项一样.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XML学习笔记</title>
      <link>https://CoMath21.github.io/post/1-xml%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-xml%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;一xml语法&#34;&gt;一、xml语法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;文档声明&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　用来声明xml的基本属性,用来指挥解析引擎如何去解析当前xml.通常一个xml都要包含并且只能包含一个文档声明.xml的文档必须在整个xml的最前面,在文档声明之前不能有任何内容.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt; 
&amp;lt;!-- version是必须存在的属性,表明当前xml所遵循规范的版本,目前位置都写1.0就可以了. --&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;!-- encoding用来只会解析引擎在解析xml时使用的编码,一定要保证xml格式的数据在保存时使用的编码和解析时使用的编码必须一致,才不会有乱码问题. --&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot; ?&amp;gt;
&amp;lt;!-- standalone属性用来指明当前xml是否是一个独立的xml,默认值是yes表明当前文档不需要依赖于其他文档,如果当前文档依赖其他文档而存在则需要将此值设置为no. --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;元素&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一个xml标签就是一个元素;&lt;/li&gt;
&lt;li&gt;一个标签分为开始标签和结束标签;&lt;/li&gt;
&lt;li&gt;在开始标签和结束标签之间可以包含文本内容,这样的文本内容叫做标签体;&lt;/li&gt;
&lt;li&gt;如果标签的开始标签和结束标签之间不包含标签和子标签则可以将开始标签和结束标签进行合并,这样的标签就叫做自闭标签;&lt;/li&gt;
&lt;li&gt;一个标签中也可以包含任意多个子标签,但是一定要注意标签一定要合理嵌套;&lt;/li&gt;
&lt;li&gt;一个格式良好的xml要包含并且只能包含一个根标签,其他的标签都应该是这个标签的子孙标签;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=red&gt;注意&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区分大小写，例如，&lt;code&gt;&amp;lt;P&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;是两个不同的标记.&lt;/li&gt;
&lt;li&gt;不能以数字或标点符号或&amp;quot;_&amp;ldquo;开头.&lt;/li&gt;
&lt;li&gt;不能以xml(或XML、或Xml 等)开头.&lt;/li&gt;
&lt;li&gt;不能包含空格.&lt;/li&gt;
&lt;li&gt;名称中间不能包含冒号（:）.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;属性
一个标签可以有多个属性，每个属性都有它自己的名称和取值，例如：&lt;code&gt;&amp;lt;china capital=&amp;quot;beijing&amp;quot;/&amp;gt;&lt;/code&gt;.
属性的名在定义时要遵循和xml元素相同的命名规则;属性的值需要用单引号或双引号括起来.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 注释内容 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注释可以出现在xml文档的任意位置除了整个文档的最前面.不能出现在文档声明之前;注释不能嵌套注释.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;CDATA区/转义字符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;![CDATA[转义的内容]]&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当XML中一段内容不希望被解析器解析时可以使用CDATA区将其包住;&lt;/li&gt;
&lt;li&gt;当解析器遇到CDATA区时会将其内容当作文本对待，不会进行解析;&lt;/li&gt;
&lt;li&gt;语法：&amp;lt;![CDATA[ 内容 ]]&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;转义字符&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;amp;  &amp;ndash;&amp;gt; &amp;amp;amp;&lt;/li&gt;
&lt;li&gt;&amp;lt;  &amp;ndash;&amp;gt; &amp;amp;lt;&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;&amp;gt; &amp;amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;  &amp;ndash;&amp;gt; &amp;amp;quot;&lt;/li&gt;
&lt;li&gt;&#39;  &amp;ndash;&amp;gt; &amp;amp;apos;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;处理指令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　处理指令，简称PI （processing instruction）. 处理指令用来指挥解析引擎如何解析XML文档内容.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml-stylesheet type=&amp;quot;text/css&amp;quot; href=&amp;quot;1.css&amp;quot;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二dtd语法-----了解语法看得懂dtd就可以&#34;&gt;二、dtd语法 &amp;mdash; 了解语法,看得懂dtd就可以&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如何在xml中引入dtd&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;(1)外部引入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　可以将dtd的约束内容写在外置的dtd文件中,这个文件后缀必须为.dtd而文件保存时必须用utf-8编码保存.　再在xml文件中使用
&lt;code&gt;&amp;lt;!DOCTYPE 根元素名称  SYSTEM 文件的位置&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　如果写的是SYSTEM表明当前引入的dtd在当前文件系统中,后面制定的文件位置是当前硬盘中的位置
&lt;code&gt;&amp;lt;!DOCTYPE 文档根结点 PUBLIC &amp;quot;DTD名称&amp;quot; &amp;quot;DTD文件的URL&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;　　如果写的是PUBLIC表明当前引入的dtd在网络公共位置中,后面要指明dtd的名字和dtd所在网络位置URL地址.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)内部引入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　直接在xml中书写dtd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE 根元素名称[
    dtd约束....
  ]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;dtd语法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(1)元素
&lt;code&gt;&amp;lt;!ELEMENT 元素名称 元素约束&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素约束: 存放类型:ANY/EMPTY.&lt;/li&gt;
&lt;li&gt;元素约束:子元素的列表,将可以包含的子元素用小括号括起来
&lt;ul&gt;
&lt;li&gt;子元素之间可以使用逗号进行分割,表明子元素必须按照顺序出现&lt;/li&gt;
&lt;li&gt;子元素之间可以使用竖线进行分割,表面子元素出现其中之一.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#PCDATA 表明包含标签体&lt;/p&gt;
&lt;p&gt;+ : 表示一次或多次;&lt;/p&gt;
&lt;p&gt;* : 0次或多次;&lt;/p&gt;
&lt;p&gt;? : 0次或一次.&lt;/p&gt;
&lt;p&gt;也可以使用小括号进行组的操作.&lt;/p&gt;
&lt;p&gt;(2)属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!ATTLIST 元素名 
    属性名 属性类型 属性约束
    属性名2 属性类型  属性约束
    ......
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;属性类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDATA:表示属性的值是一个普通字符串&lt;/li&gt;
&lt;li&gt;ENUMERATED : 属性的值是一个枚举列表中的值&lt;/li&gt;
&lt;li&gt;ID: 表明属性的值必须在整个文档中都是唯一的,如果有重复的id则校验不通过,ID 属性的值只能由字母，下划线开始，不能使用数字，不能出现空白字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性约束:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#REQUIRED  &amp;mdash; 	表明当前属性是一个必须存在的属性,如果这样的属性不存在则在校验时会报错&lt;/li&gt;
&lt;li&gt;#IMPLIED &amp;mdash; 表明当前属性是一个可选的属性,可以有也可以没有&lt;/li&gt;
&lt;li&gt;#FIXED &amp;lsquo;固定值&amp;rsquo; &amp;mdash; 表明当前属性具有一个固定值,这样的属性不需要进行赋值,自动就会取这个固定值为值.如果这样的属性指定了一个不是固定值的值则校验报错&lt;/li&gt;
&lt;li&gt;&amp;lsquo;默认值&amp;rsquo;  &amp;mdash;  表明当前属性具有一个默认值,如果给了其他的值就用其他值,如果没有给值则取这个默认值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(3)ENTITY(实体)&lt;/p&gt;
&lt;p&gt;&amp;lt;!ENTITY &amp;gt;,就是对一大段内容的引用,可以简化代码的复用.&lt;/p&gt;
&lt;p&gt;引用实体:在xml中引用的实体叫做引用实体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!ENTITY 实体名称 “实体内容” &amp;gt;
  &amp;amp;实体名称;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数实体:在dtd中引用的实体叫做参数实体&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!ENTITY % 实体名称 &amp;quot;实体内容&amp;quot;&amp;gt;
  %实体名称;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三xml编程利用java程序去增删改查crudxml中的数据&#34;&gt;三、XML编程:利用java程序去增删改查(CRUD)xml中的数据&lt;/h2&gt;
&lt;p&gt;解析思想:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dom解析&lt;/li&gt;
&lt;li&gt;sax解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于这两种解析思想市面上就有了很多的解析api&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sun jaxp既有dom方式也有sax方式,并且这套解析api已经加入到j2se的规范中,意味这不需要导入任何第三方开发包就可以直接使用这种解析方式.但是这种解析方式效率低下,没什么人用.&lt;/li&gt;
&lt;li&gt;dom4j 可以使用dom方式高效的解析xml.&lt;/li&gt;
&lt;li&gt;pull&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!dom4j: 导入开发包,通常只需要导入核心包就可以了,如果在使用的过程中提示少什么包到lib目录下在导入缺少的包即可.&lt;/p&gt;
&lt;h2 id=&#34;四schema----xml的约束技术------需要掌握名称空间的概念会读简单的schema就可以了不需要大家自己会写&#34;&gt;四、Schema &amp;ndash; xml的约束技术  &amp;mdash; 需要掌握名称空间的概念,会读简单的Schema就可以了,不需要大家自己会写&lt;/h2&gt;
&lt;p&gt;　　Schema是xml的约束技术,出现的目的是为了替代dtd. 本身也是一个xml,非常方便使用xml的解析引擎进行解析.
对名称空间有非常好的支持;支持更多的数据类型,并且支持用户自定义数据类型;可以进行语义级别的限定,限定能力大大强于dtd;相对于dtd不支持实体;相对于dtd复杂的多,学习成本比较的高.&lt;/p&gt;
&lt;p&gt;　　如何在xml中引入Schema &amp;mdash; !!!!!名称空间的概念:全世界独一无二的名字,用来唯一的标识某个资源,通常是公司的域名,只是名字而已并不真的表示资源的位置.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schema的语法&amp;mdash;参照Schema的文档,了解即可&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ajax简介</title>
      <link>https://CoMath21.github.io/post/1-ajax%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-ajax%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ajax&lt;/strong&gt;：Asynchronous javascript and xml （异步javascript和xml）.AJax 不是新的编程语言，而是一种使用现有标准的新方法.&lt;/p&gt;
&lt;h2 id=&#34;创建ajax对象&#34;&gt;创建ajax对象：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主流浏览器方式：
火狐、Google、苹果Safari、opera包括IE7以上版本的浏览器
var xhr = new XMLHTTPRequest();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IE(6/7/8 )方式：
var xhr = new ActiveObject(“Microsoft.XMLHTTP”);	//最原始方式
var xhr = new ActiveObject(“Msxml2.XMLHTTP”);
var xhr = new ActiveObject(“Msxml2.XMLHTTP.3.0”);
var xhr = new ActiveObject(“Msxml2.XMLHTTP.5.0”);
var xhr = new ActiveObject(“Msxml2.XMLHTTP.6.0”);	//IE维护的最高版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发起对服务器的请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;&amp;quot;&amp;gt;
  function f() {
    //①创建ajax对象
    var xhr = new XMLHttpRequest();
	
    //②创建新的http请求（并设置请求地址）
    //open(请求方式get/post，url请求地址)
    xhr.open(‘get’,’./xxx.php’);
	
    //③发送请求
    //send(get---null/post---给服务器传递的信息)
    xhr.send(null);
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;接收服务器端返回的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ajax对象的成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性：
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;responseText：以字符串形式接收服务器端返回的信息.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;readyState：&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;刚创建ajax对象.&lt;/li&gt;
&lt;li&gt;已经调用open方法.&lt;/li&gt;
&lt;li&gt;已经调用send方法.&lt;/li&gt;
&lt;li&gt;已经返回部分数据.&lt;/li&gt;
&lt;li&gt;请求完成，数据返回完整.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onreadstatechange：事件，当ajax状态readState发生变化的时候处触发执行，为了获得较多的状态，最好在创建好阿加西对象后就设置.最多可以感知1/2/3/4 四种状态.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法：
&lt;ul&gt;
&lt;li&gt;open(); 创建新的http请求.&lt;/li&gt;
&lt;li&gt;send(); 把请+ 求发送给服务器端.　　&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;&amp;quot;&amp;gt;
  function f() {
  //①创建ajax对象
  var xhr = new XMLHttpRequest();

  //④ 给ajax设置事件
  xhr.onreadystatechange = function(){
    //console.log(xhr.readState);
    if(xhr.readyState==4){
        //console.log(xhr.responseText);
        //把服务端返回的信息显示在页面上
        document.getElementById(‘request’).innerHTML = xhr.responseText;
    }
  }
  //②创建新的http请求（并设置请求地址）
  //open(请求方式get/post，url请求地址)
  xhr.open(‘get’,’./xxx.php’);

  //③发送请求
  //send(get---null/post---给服务器传递的信息)
  xhr.send(null);
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;get请求注意事项：&lt;/p&gt;
&lt;p&gt;①	在url地址后面以请求字符串（传递的get参数信息）形式传递数据.&lt;/p&gt;
&lt;p&gt;②	对中文、=、&amp;amp;等特殊符号处理.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对特殊信息的处理：&lt;/p&gt;
&lt;p&gt;　　在浏览器里通过get参数传递一些特殊符号信息会被误解混淆，例如：=、&amp;amp;等.为了避免特殊符号被误解产生歧义，需要对其进行编码处理：在javascript里面可以通过encodeURLComponent()对特殊符号等信息进行编码;编码后的信息可以被正常接收使用，无需解码.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;post请求的注意事项：&lt;/p&gt;
&lt;p&gt;①	给服务器传递数据需要调用send(请求字符串数据)方法;
②	调用方法sentRequestHeader()把传递的数据组织为xml格式（模仿form表单传递数据）;
③	传递的中文信息无需编码，特殊符号 &amp;amp;、=等仍需编码;
④	该房是请求的同时也可以传递get参数信息，同样适用$_GRT 接受信息.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步、异步&lt;/p&gt;
&lt;p&gt;ajax对象.open(方式get/post，url地址，[异步true]同步false);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;异步：同一时间点允许执行多个线程.&lt;/li&gt;
&lt;li&gt;同步：同一时间点只允许执行一个线程.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;
&lt;p&gt;无刷新分页效果：&lt;/p&gt;
&lt;p&gt;ajax刷新无分页效果是对传统分页效果的封装;先将传统分页效果制作出来,在javascript代码块中定义函数，再创建ajax对象，创建事件，打开open，send，其中在创建事件的时候将加载后的信息显示到指定位置，为了实现分页跳转，则需要将url地址传给函数作为参数，其原因主要是因为分页效果其实就是实现的超链接，而ajax实现无刷新分页效果则是将超链接替换成定义的函数.
&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ajax对xml信息的接收和处理&lt;/p&gt;
&lt;p&gt;ajax负责请求xml和接收xml信息，都没负责处理xml信息;&lt;/p&gt;
&lt;p&gt;dom：javascript里，dom是负责javascript与html(xml)之间沟通的桥梁.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ajax对缓存的处理&lt;/p&gt;
&lt;p&gt;①	给请求的地址设置随机数，即：保证每次请求的地址不一样；
&lt;code&gt;url?Math.random();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;②	给动态程序设置header头信息，禁止浏览器对其缓存（PHP中这样设置）.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;header(“Cache-Control:no-cache”)
header(“Pragma: :no-cache”)
header(“Expires:-1”)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HuGo搭建个人博客</title>
      <link>https://CoMath21.github.io/post/3-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/3-hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JSP简介</title>
      <link>https://CoMath21.github.io/post/1-jsp%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-jsp%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;h2 id=&#34;为什么要jsp技术&#34;&gt;为什么要JSP技术?&lt;/h2&gt;
&lt;p&gt;　　开发web网站的时候，servlet做界面比较麻烦. JSP 是基于 Servlet API 的，所以拥有 Servlet 拥有的一系列好处.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jsp运行在服务器端&lt;/li&gt;
&lt;li&gt;jsp（java service page）&lt;/li&gt;
&lt;li&gt;jsp的基础是servlet&lt;/li&gt;
&lt;li&gt;jsp是一个综合技术  jsp=html+css+javascript+java代码+jsp标签(Servlet)&lt;/li&gt;
&lt;li&gt;jsp无需配置，可以直接使用；如果修改了jsp文件，不需要重新reload web应用&lt;/li&gt;
&lt;li&gt;jsp访问方法：http://ip:8080/web应用名/jsp路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容的生成和显示相分离&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;采用标签简化页面开发&lt;/li&gt;
&lt;li&gt;使用可重用组件&lt;/li&gt;
&lt;li&gt;完善的存储管理和安全性
&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jsp语法基础&#34;&gt;JSP语法基础：&lt;/h2&gt;
&lt;h3 id=&#34;基本元素&#34;&gt;基本元素：&lt;/h3&gt;
&lt;h4 id=&#34;注释jsp自带的注释规范是隐式注释htmlxml的注释是显示注释&#34;&gt;注释(JSP自带的注释规范是隐式注释,HTML/XML的注释是显示注释)&lt;/h4&gt;
&lt;p&gt;HTML/XML的注释(显示注释)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 个注释 --&amp;gt;
&amp;lt;!-- 个注释 ：&amp;lt;%counter++;%&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里会对counter++进行编译,显示编译后的结果
隐式注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%-- 注释 --%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JSP在编译时不会对&amp;lt;%&amp;ndash;和&amp;ndash;%&amp;gt;中的进行编译;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Scriptlets中的注释：跟java注释一致.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;指令元素&#34;&gt;指令元素&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;页面(page)指令：
页面page指令用于定义JSP文件中的全局属性,一个JSP页面可以包含多个页面指令.除了import指令外其他的页面指令定义的属性或值只能出现一次.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ page attribute=&amp;quot;value&amp;quot;%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中attribute的可取值为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;language(定义使用的脚本&amp;mdash;语言默认java)、import(定义JSP网页使用的java API)、&lt;/li&gt;
&lt;li&gt;contentType(定义MIME类型和JSP网页的编码方式—默认TYPE=text/html CHARSET=iso-8859-1)、&lt;/li&gt;
&lt;li&gt;pageEncoding(JSP页面的字符编码&amp;mdash;默认pageEncoding=&amp;ldquo;iso-8859-1&amp;rdquo;)、
　&lt;strong&gt;区别&lt;/strong&gt;：contentType—pageEncoding.
&lt;ul&gt;
&lt;li&gt;contentType：只能指定网页以什么方式显示&lt;/li&gt;
&lt;li&gt;pageEncoding：除了显示之外还可以以指定形式保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;session(定义该JSP网页是否可以使用session对象—-默认true)、&lt;/li&gt;
&lt;li&gt;buffer(指定客户输出流的缓冲模式,如果是none,则不缓冲,如果指定数值,就定义了缓冲区的大小)、默认8K&lt;/li&gt;
&lt;li&gt;autoFlush(定义输出流的缓存区是否要自动清除-—默认true)、&lt;/li&gt;
&lt;li&gt;isThreadSafe(定义该JSP页面是否能处理多个请求&amp;mdash;默认true)、&lt;/li&gt;
&lt;li&gt;info(定义该JSP网页的相关信息-—默认忽略)、&lt;/li&gt;
&lt;li&gt;errorPage(定义此页面出现意外时的调用的页面—-默认忽略)、跳转到错误页面&lt;/li&gt;
&lt;li&gt;isErrorPage(定义该JSP网页是否为处理意外错误的网页—-默认false)、&lt;/li&gt;
&lt;li&gt;extends().&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;include指令：
include指令通知容器在当前JSP页面中指定位置包含另一个文件的内容. 被包含的文件内容可以被JSP引擎解析,这种解析发生在编译期间
&amp;lt;%@ include file=&amp;ldquo;filename&amp;rdquo;%&amp;gt;
include只有这一个属性. 其中filename为包含的文件路径,一般来说是指相对路径.
由于被包含的内容常常是代码片断,因此代码片断的后缀名最好以“f”(表示fragment)结尾,例如.htmlf&lt;/li&gt;
&lt;li&gt;标签库taglib指令：
taglib指令允许页面使用者自定义标签. 先用户开发标签库，为标签库编写.tld配置文件，然后再JSP页面使用自定义标签.
&amp;lt;%@ taglib uri=&amp;ldquo;URL&amp;rdquo; prefix=&amp;ldquo;tagPrefix&amp;rdquo;%&amp;gt;
uri 用来表示标签描述符，也就是如何找到标签文件和标签库；
tagPrefix 定义了子JSP页面里引用这个标签的前缀.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;脚本元素&#34;&gt;脚本元素&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;声明(Declaration)
声明就是在JSP程序中声明合法的变量和方法,用&amp;lt;%!和%&amp;gt;来表示)：
当代码只用于单一页面时：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%!
  variable declaration;
    method declaration(paramType param,...)
%&amp;gt;

&amp;lt;%!
  private static int counter;
  public void counterInit(){
    counter = 0 ;
  };
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;表达式(Expression)—用来吧java数据直接插入到输出：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=red&gt;表达式&lt;/font&gt;是位于&lt;font color=red&gt;&amp;lt;%=&lt;/font&gt;和&lt;font color=red&gt;%&amp;gt;&lt;/font&gt;之间的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= &amp;quot;你是第&amp;quot;+counter+&amp;quot;次访问&amp;quot; %&amp;gt;
&amp;lt;%= &amp;quot;hello world&amp;quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Web服务器将其编译成Servlet后，变成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;out.wreite(String.valueOf(&amp;quot;hello world&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相当于JSP页面中的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;out.println(&amp;quot;hello world&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=red&gt;注：表达式结束处可以不使用省略号，表达式可以包含表达式.&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脚本小程序(Scriptlet)&amp;mdash;可以在处理请求时间执行的java代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scriptlet则位于&amp;lt;%和%&amp;gt;之间,他们是合法的java代码
&lt;code&gt;&amp;lt;%counter++;%&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;动作元素&#34;&gt;动作元素&lt;/h4&gt;
&lt;p&gt;　　JSP规范定义了一系列的标准动作. 以jsp作为前缀,例如使用JavaBean的动作元素&amp;lt;jsp:useBean&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:tag attribute=value attribute=value.../&amp;gt;
&amp;lt;!-- 或者 --&amp;gt;
&amp;lt;jsp:tag attribute=value attribute=value...&amp;gt;
...
&amp;lt;/jsp:tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;动作元素是在请求处理阶段起作用的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文本导入标签&amp;lt;jsp:include&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:include page=&amp;quot;filename&amp;quot; flush=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;!-- 或者 --&amp;gt;
&amp;lt;jsp:include page=&amp;quot;filename&amp;quot; flush=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;jsp:param name=&amp;quot;paramName&amp;quot; value=&amp;quot;paramValue&amp;quot;/&amp;gt;
  ...
&amp;lt;/jsp:include&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　&amp;lt;jsp:param&amp;gt;用于传递一个或者多个参数给动态页面;&amp;lt;jsp:include&amp;gt;动作与&amp;lt;%@include%&amp;gt;指令的不同是：前者包含的内容可以是动态改变的，它在执行时才确定；而后者包含的内容是固定不变的，在编译阶段就已经确定而不能改变.&lt;/p&gt;
&lt;p&gt;案例：Login.html、Ex1.jsp、Ex2.jsp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面转发标签&amp;lt;jsp:forward&amp;gt;该操作允许将请求转发到另一个JSP、Servlet或者其他静态资源文件. 请求被转至的资源必须位于同JSP发送请求相同的上下文环境之中. 每当遇到&amp;lt;jsp:forward&amp;gt;操作时，就停止执行当前的JSP，转至执行被转发的资源.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:forward page=&amp;quot;uri&amp;quot;/&amp;gt;
&amp;lt;!-- 或者 --&amp;gt;
&amp;lt;jsp:forward&amp;gt;
  &amp;lt;jsp:param name=&amp;quot;paramName&amp;quot; value=&amp;quot;paramValue&amp;quot;/&amp;gt;
  ...
&amp;lt;/jsp:forward&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中page=&amp;ldquo;uri&amp;rdquo; 指明将要定向的文件或url地址,&lt;code&gt;&amp;lt;jsp:param name=&amp;quot;paramName&amp;quot; value=&amp;quot;paramValue&amp;quot;/&amp;gt;&lt;/code&gt;中name指定参数名，value指定参数值. 参数被发送到一个动态文件，参数可以是一个或多个值，而这个文件却必须是动态文件.&lt;/p&gt;
&lt;p&gt;案例：Ex3.jsp、Ex4.jsp、Ex5.jsp&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例化JavaBean标签&lt;a href=&#34;jsp:useBean&#34;&gt;jsp:useBean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:useBean id=&amp;quot;id&amp;quot; scope=&amp;quot;page|request|session|application typeSpec&amp;quot;/&amp;gt;
&amp;lt;!-- id 是大小写相关的名字,用来表示这个实例;scope表示此对象作用的范围；typeSpace可以是以下四者之一：class=&amp;quot;className&amp;quot; --&amp;gt;
class=&amp;quot;className&amp;quot; type=&amp;quot;typeName&amp;quot;
          beanName=&amp;quot;beanName&amp;quot; type=&amp;quot;typeName&amp;quot;
          type=&amp;quot;typeName&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;scope表示Bean的作用域，此属性是可选的，默认是page.&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;page&lt;/strong&gt;：
能够在包含&amp;lt;jsp:useBean&amp;gt;标签的JSP文件以及此文件中的所有静态包含文件中使用Bean，直到页面执行完毕客户端发回响应或转到另一个文件为止. 超出这个范围Bean就失效了.&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;request&lt;/strong&gt;：
如果该Bean不是请求上下文的一部分，将在请求上下文中创建并保存该Bean.&lt;/p&gt;
&lt;p&gt;③ &lt;strong&gt;session&lt;/strong&gt;：
从创建Bean开始，就开始在session有效范围内使用这个Bean，这个Bean对于JSP来说是共享的. 但在创建Bean的JSP文件里，page指令必须指定session=True.&lt;/p&gt;
&lt;p&gt;④ &lt;strong&gt;application&lt;/strong&gt;：
如果此Bean尚不存在于Web应用程序上下文中，则在应用程序上下文中创建并储存此Bean. application对象在应用服务器启东市就创建了，直到应用服务器关闭. 这个Bean存在于整个application生命周期内，任何在此分享application的JSP文件都能使用同一个Bean. class=&amp;ldquo;className&amp;quot;代表的是Bean的类路径和类名. 这个class不是抽象的，必须有一个公用的、没有参数的构造器. beanName=&amp;ldquo;beanName&amp;rdquo; 表示Bean的名称，而Type=&amp;ldquo;typeName&amp;quot;则用于指定Bean的类型. type=&amp;ldquo;typeName&amp;quot;指定雷鸣，既可以是本身，也可以是一个类的父类，或者是一个类的接口. 如果没有使用class或者BeanName指定type，Bean将不会被实例化.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置JavaBean属性标签&amp;lt;jsp:setProperty&amp;gt;
　　该动作主要用于设定JavaBean的属性，因此必须和useBean一起协作. &amp;lt;jsp:setProperty&amp;gt;标签通过JavaBean给定的&lt;code&gt;setXXX()&lt;/code&gt;方法，在javaBean中设置一个或多个属性值. 利用此动作标签设置属性值有多种方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:setProperty name=&amp;quot;beanInstanceName&amp;quot; propertyDetails/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中beanInstanceName是必选属性，即JavaBean实例的名字，在使用前通过&amp;lt;jsp:useBean&amp;gt;引入. propertyDetails指可以通过三种不同的方式来指定属性信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;property=&amp;quot;*&amp;quot;&lt;/strong&gt;:
这种赋值方式表示请求参数的所有值. 在Bean中的属性名字必须和Request对象中的参数名一致.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;property=&amp;ldquo;propertyName&amp;rdquo;[param=&amp;ldquo;parameterName&amp;rdquo;]&lt;/strong&gt;:
这种赋值方式使用request中的一个参数值来指定Bean中的一个属性值. property指定Bean的属性名，param指定request中的参数名. 如果Bean属性和request参数的名字不同，name就必须指定property和param的值；若果同名，则需要指明property就可以了. 参数值为空，那么对应的属性值也不会被设定.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;property=&amp;ldquo;propertyName&amp;rdquo; value=&amp;ldquo;propertyValue&amp;rdquo;&lt;/strong&gt;:
这种赋值方式使用指定的值来设定Bean属性. propertyValue可以是字符串也可以是表达式. 如果是字符串，那么他就会被转换成Bean属性类型. 如果是表达式，那么它的类型就必须和它将要设定的属性值类型保持一致.
注：不能在一个&amp;lt;jsp:setProperty&amp;gt;中同时使用param和value.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;获取JavaBean对象属性标签&amp;lt;jsp:getproperty&amp;gt;
　　与&amp;lt;jsp:setproperty&amp;gt;相对应，访问一个JavaBean属性，因此使用该动作标签之前必须用&amp;lt;jsp:useBean&amp;gt;引入一个JavaBean对象.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jdp:getProperty name=&amp;quot;beanInstanceName&amp;quot; property=&amp;quot;propertyName&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中beanInstanceName对应&amp;lt;jsp:useBean&amp;gt;的id，因此name要和&amp;lt;jsp:useBean&amp;gt;的id相同.
propertyName是要获得的属性值.&lt;/p&gt;
&lt;p&gt;c.d.e.的案例：Zhuce.jsp、Ex6.jsp、StudentBean.java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;追加参数标签&amp;lt;jsp:param&amp;gt;
　　＼&lt;a href=&#34;jsp:param&#34;&gt;jsp:param&lt;/a&gt;标签用来提供key/value的值，与&lt;a href=&#34;jsp:inclde&#34;&gt;jsp:inclde&lt;/a&gt;、&lt;a href=&#34;jsp:forwadrd&#34;&gt;jsp:forwadrd&lt;/a&gt;等标签一起搭配使用.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 格式： --&amp;gt;
&amp;lt;jsp:param name=&amp;quot;parameterName&amp;quot; value=&amp;quot;parameterValue&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;name=&amp;ldquo;parameterName&amp;rdquo; ：该属性表示参数的名字
value=&amp;ldquo;parameterValue&amp;rdquo;：表示参数的值．&lt;/p&gt;
&lt;h2 id=&#34;servlet容器概念&#34;&gt;Servlet容器概念&lt;/h2&gt;
&lt;p&gt;　　Servlet容器为Java_Web应用提供运行时环境,它负责管理Servlet和JSP的生命周期,以及管理他们的共享数据.
Servlet容器也称为Java_Web应用容器,或者Servlet/JSP容器．&lt;/p&gt;
&lt;p&gt;流行的Servlet容器软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;—Tomcat&lt;/li&gt;
&lt;li&gt;—Resin
&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署tomcat服务器&#34;&gt;部署tomcat服务器：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解压文件apache-tomcat&lt;/li&gt;
&lt;li&gt;启动：startup.bat&amp;mdash;&amp;mdash;启动服务器&lt;/li&gt;
&lt;li&gt;需要配置环境：JAVA_HOME   java   jdk的根目录&lt;/li&gt;
&lt;li&gt;想在任意目录下打开服务器
&lt;ul&gt;
&lt;li&gt;设置环境CATALINA_HOME&amp;mdash;-bin/catalina.bat&lt;/li&gt;
&lt;li&gt;Tomcat的管理程(manager)：要访问manager web应用程序,需要添加具有管理员权限的账号,编辑conf目录下的tomcat-users.xml文件,添加manager角色设置用户名密码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第一个web程序&#34;&gt;第一个web程序：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在Eclipse新建一个Java Project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Java项目下创建Web开发的目录结构
&lt;img src=&#34;./3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在WebContent目录下新建一个JSP文件：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把WebContent 目录复制到Tomcat的webapps目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后在浏览器打开&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javaeen版-eclipse开发web&#34;&gt;JavaEEn版 Eclipse开发web&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;显切换到JavaEE&lt;/li&gt;
&lt;li&gt;Servers下新建一个Tomcat服务器&amp;ndash;&amp;gt;关联到Tomcat根目录&lt;/li&gt;
&lt;li&gt;新建一个Dynamic Web Project 其中Target Runtime需选中&lt;/li&gt;
&lt;li&gt;开发应用&lt;/li&gt;
&lt;li&gt;可以通过run so server 来运行WEB项目&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;servlet-的helloworld&#34;&gt;Servlet 的HelloWorld&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建一个Servlet接口的实现类&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;public class HelloWorld implements Servlet
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在web.xml 文件中配置和映射这个Servlet&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置和映射Servlet --&amp;gt;
&amp;lt;Servlet&amp;gt;
  &amp;lt;!—Servlet 注册的名字 –&amp;gt;
  &amp;lt;servlet-name&amp;gt;类名&amp;lt;/servlet-name&amp;gt;
  &amp;lt;!—Servlet 的全类名 --&amp;gt;
  &amp;lt;servlet-class&amp;gt;包名&amp;lt;/servlet-class&amp;gt;
&amp;lt;/Servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
  &amp;lt;!—需要和某一个Servlet 节点的servlet-name 子节点的文本节点一致–&amp;gt;
  &amp;lt;servlet-name&amp;gt;类名&amp;lt;/servlet-name&amp;gt;
&amp;lt;!—映射具体的访问路径：/代表当前WEB应用的根目录 –&amp;gt;
  &amp;lt;url-pattern&amp;gt;/hello&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;关于servlet-mapping&#34;&gt;关于servlet-mapping：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;同一个Servlet可以被映射到多个URL上,即多个&lt;servlet-mapping&gt;元素的&lt;servlet-name&gt;子元素的设置值可以是同一个Servlet的注册名.&lt;/li&gt;
&lt;li&gt;在Servlet映射到的URL中也可以使用&lt;em&gt;通配符,但是只能有两种固定的格式：一种格式是“&lt;/em&gt;.扩展名”,另一种格式是以正斜杠（/）开头并以“/*”结尾.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;servlet-容器&#34;&gt;Servlet 容器：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可以创建Servlet,并调用Servlet的相关生命周期&lt;/li&gt;
&lt;li&gt;JSP,Filter,Listener&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;servlet-生命周期方法以下方法都是servlet容器负责调用&#34;&gt;Servlet 生命周期方法：以下方法都是Servlet容器负责调用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;构造器：只被调用一次,只有第一次请求Servlet时,创建Servlet的实例,调用构造器,这说明Servlet是单实例的.&lt;/li&gt;
&lt;li&gt;init方法：只被调用一次,在创建好的实例后即被调用,用于初始化当前Servlet.&lt;/li&gt;
&lt;li&gt;service：被多次调用. 每次请求都会调用service方法,实际响应请求的.&lt;/li&gt;
&lt;li&gt;destroy：只被调用一次,在当前Servlet所在的Web应用被卸载前调用,用于释放当前的Servlet所占用的资源&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;loda-on-start-up参数&#34;&gt;loda-on-start-up参数：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;配置在servlet节点中&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Servlet&amp;gt;
  &amp;lt;!—Servlet 注册的名字 –&amp;gt;
    &amp;lt;servlet-name&amp;gt;类名1&amp;lt;/servlet-name&amp;gt;
    &amp;lt;!—Servlet 的全类名 --&amp;gt;
    &amp;lt;servlet-class&amp;gt;包名&amp;lt;/servlet-class&amp;gt;
    &amp;lt;!—可以指定Servlet 被创建的时机 --&amp;gt;
&amp;lt;load-on-startup&amp;gt;2&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/Servlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;load-on-startup：可以指定Servlet被创建的时机.如为负数,则在第一次请求时创建;若为0或正数,则在当前WEB应用被Servlet 容器加载时创建实例,且越小越早被创建.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>node.js介绍(一)</title>
      <link>https://CoMath21.github.io/post/1-node.js/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-node.js/</guid>
      <description>&lt;h2 id=&#34;什么是nodejs&#34;&gt;什么是node.js&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;node.js是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。
-何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API（SDK:Software Development Kit）&lt;/li&gt;
&lt;li&gt;该平台使用的编程语言是Javascript 语言。&lt;/li&gt;
&lt;li&gt;node.js平台是基于Chrome V8 Javascript引擎构建。&lt;/li&gt;
&lt;li&gt;基于node.js可以开发控制台程序（命令行程序、CLI程序）、桌面应用程序（GUI）（借助 node-webkit、electron等框架实现）、Web应用程序（网站）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PHP开发技术栈：LAMP-Linux Apache MySQL PHP&lt;/p&gt;
&lt;p&gt;node.js全栈开发技术栈：MEAN-MongoDB Express Angular Node.js&lt;/p&gt;
&lt;h2 id=&#34;nodejs有哪些特点&#34;&gt;node.js有哪些特点？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;事件驱动（当事件被触发时，执行传递过去的回调函数）&lt;/li&gt;
&lt;li&gt;非阻塞I/0模型（当执行I/0操作时，不会阻塞线程）&lt;/li&gt;
&lt;li&gt;单线程&lt;/li&gt;
&lt;li&gt;拥有世界最大的开源库生态系统一npm。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nodejs网站&#34;&gt;node.js网站&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;[node.js官方网站]（https://nodejs.org/）&lt;/li&gt;
&lt;li&gt;[node.js中文网]（http://nodejs.cn/）&lt;/li&gt;
&lt;li&gt;[node.js中文社区]（https://cnodejs.org/）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么要学习nodejs&#34;&gt;为什么要学习Node.js？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过学习Node.js开发深入理解&lt;strong&gt;服务器开发&lt;/strong&gt;、*&lt;em&gt;Web请求和响应过程&lt;/em&gt;、*&lt;em&gt;了解服务器端如何与客户端配合&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;学习服务器端渲染&lt;/li&gt;
&lt;li&gt;学习服务器端为客户端编写接口&lt;/li&gt;
&lt;li&gt;现在前端工程师面试，对Node.js开发有要求&lt;/li&gt;
&lt;li&gt;补充提问：
-在Node.js平台开发时，能使用Dom API吗？比如：document.getElementById（&amp;lsquo;id&amp;rsquo;）；window.location等？&lt;/li&gt;
&lt;li&gt;复习浏览器端JavaScript 组成：ECMAscript、Dom、Bom&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;学习目标&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;了解服务器开发过程&lt;/li&gt;
&lt;li&gt;会使用node.js开发基本的http服务程序（Web应用程序）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nodejs安装和配置&#34;&gt;Node.js安装和配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载地址&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;[当前版本]（https://nodejs.org/en/download/）&lt;/li&gt;
&lt;li&gt;[历史版本]（https://nodejs.org/en/download/releases/）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;官网术语解释&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;LTS版本：Long-term Support版本，长期支持版，即稳定版。&lt;/li&gt;
&lt;li&gt;Current 版本：Latest Features版本，最新版本，新特性会在该版本中最先加入。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;注意：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;安装完毕后通过命令：node-v来确定是否安装成功【注意：打开“命令窗口”的时候建议使用“管理员方式“打开】&lt;/li&gt;
&lt;li&gt;如果需要则配置环境变量。 
！ [配置环境变量]（imgs/env_pathpng）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;通过nvm-windows管理一台计算机上的多个node版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;node-version-managernode-版本管理器&#34;&gt;Node Version Manager（Node 版本管理器）&lt;/h3&gt;
&lt;h4 id=&#34;nvmlinuxunixos-x&#34;&gt;nvm（Linux、Unix、OS-X）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;https://github.com/creationix/nvm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;产用命令：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nvm-install-node（安装最新版本的node）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nvm-use node-（使用指定版本的node）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nvm-windowswindows&#34;&gt;nvm-windows·（Windows）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/coreybutler/nvm-windows&#34;&gt;https://github.com/coreybutler/nvm-windows&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常用命令：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nvm-version&lt;/p&gt;
&lt;p&gt;nvm-install-latest&lt;/p&gt;
&lt;p&gt;nvm-instal1-版本号&lt;/p&gt;
&lt;p&gt;nvm-uninstall版本号&lt;/p&gt;
&lt;p&gt;nvm-list&lt;/p&gt;
&lt;p&gt;nvm-use 版本号
#在node.js上编写程序
##REPL介绍&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;REPL全称：Read-Eval-Print-Loop（交互式解释器）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;R 读取-读取用户输入，解析输入了Javascript 数据结构并存储内存中。&lt;/li&gt;
&lt;li&gt;E 执行-执行输入的数据结构&lt;/li&gt;
&lt;li&gt;P 打印-输出结果&lt;/li&gt;
&lt;li&gt;L循环-循环操作以上步骤直到用户两次按下ctrl-c按钮退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在REPL中编写程序（类似于浏览器开发人员工具中的控制台功能）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;直接在控制台输入node命令进入REPL环境&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;按两次Control+C退出REPL界面或者输入exit退出REPL界面&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;按住control键不要放开，然后按两下c键
##创建JavaScript文件编写程序
###编程注意事项&lt;/li&gt;
&lt;li&gt;配置一下Sublime Text的代码缩进格式为2个空格&lt;/li&gt;
&lt;li&gt;方式一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;！[@配置方式1]（imgs/sublimeconf1.png）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式二&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;！[@配置方式2-第一步]（imgs/sublimeconf21.png）&lt;/p&gt;
&lt;p&gt;！[配置方式2-第二步]（imgs/sublimeconf22.png）
##写入文件操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;//执行文件操作&lt;br&gt;
//&amp;mdash;&amp;mdash;&amp;mdash;-实现文件写入操作&amp;ndash;&lt;br&gt;
//1.加载文件操作模块，fs模块。&lt;br&gt;
var fs=require（&amp;lsquo;fs&amp;rsquo;）；&lt;br&gt;
//2.实现文件写入操作&lt;br&gt;
var msg=&amp;lsquo;Hello world，你好世界！’；&lt;br&gt;
//调用fs.writeFile（）进行文件写入&lt;br&gt;
//fs.writeFile（file，datal，options]，callback）&lt;br&gt;
fs.writeFile（&amp;rsquo;./hello.txt&#39;，msg，&amp;lsquo;utf8&amp;rsquo;，function（err）{&lt;br&gt;
//body..&lt;br&gt;
//如果err===null，表示写入文件成功，没有错误！&lt;br&gt;
//只要err里面不是null，就表示写入文件失败了！&lt;br&gt;
if（err）{&lt;br&gt;
    console.1og（&amp;lsquo;写文件出错啦！具体错误：‘+err）；&lt;br&gt;
}else{&lt;br&gt;
    console.log（&amp;lsquo;ok&amp;quot;）；&lt;br&gt;
}
}）；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##读取文件操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;//&amp;mdash;&amp;mdash;&amp;mdash;-实现文件写入操作&amp;ndash; &lt;br&gt;
//1.加载文件操作模块，fs模块。&lt;br&gt;
var fs=require(&amp;lsquo;fs&amp;rsquo;)；&lt;br&gt;
调用fs.readFile（）方法来读取文件&lt;br&gt;
//fs.readFile（filel，options]，callback）&lt;br&gt;
fs.readFile（&amp;rsquo;./hello.txt&amp;rsquo;，function-（err，-data）-{&lt;br&gt;
if(err){ throw-err；}&lt;br&gt;
//data参数的数据类型是一个Buffer对象，里面保存的就是一个一个的字节（理解为字节数组）&lt;br&gt;
//把buffer对象转换为字符串，调用tostring（）方法&lt;br&gt;
//console.log（data）；console.log（data.toString  （&amp;lsquo;utf8&amp;rsquo;））;
}）;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;
//此处的./相对路径，相对的是执行node命令的路径&lt;br&gt;
//而不是相对于正在执行的这个js文件来查找hello.txt&lt;br&gt;
//解决在文件读取中./相对路径的问题&lt;br&gt;
//解决：dirname、filename&lt;br&gt;
//dirname：表示，当前正在执行的js文件所在的目录&lt;br&gt;
//filename：表示，当前正在执行的js文件的完整路径&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径拼接：path.join(&#39;/foo&#39;,&amp;lsquo;bar&amp;rsquo;,&#39;/ad&#39;,&#39;&amp;hellip;&#39;);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http服务程序&#34;&gt;HTTP服务程序&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;//创建一个简单的http服务器程序&lt;br&gt;
//1.加载http模块&lt;br&gt;
var http=require（&amp;lsquo;http&amp;rsquo;）；&lt;br&gt;
//2.创建一个http服务对象&lt;br&gt;
var server=http.createServer（）；&lt;br&gt;
//3.监听用户的请求事件（request事件）&lt;br&gt;
//request 对象包含了用户请求报文中的所有内容，通过request对象可以获取所有用户提交过来的数据&lt;br&gt;
//response 对象用来向用户响应一些数据，当服务器要向客户端响应数据的时候必须使用response.对象&lt;br&gt;
//有了request对象和response对象，就既可以获取用户提交的数据，也可以向用户响应数据了 &lt;br&gt;
server.on（&amp;lsquo;request&amp;rsquo;，function（re4，res）{&lt;br&gt;
//body&amp;hellip;&lt;br&gt;
//解决乱码的思路：服务器通过设置http响应报文头，告诉浏览器使用相应的编码来解析网页res.setHeader(&amp;lsquo;Content-Type&amp;rsquo;,&amp;lsquo;text/plain;charset=utf-8&amp;rsquo;)；
res.write（&amp;lsquo;Hello world！！！！&#39;）；&lt;br&gt;
//对于每一个请求，服务器必须结束响应，否则客户端（浏览器）会一直等待服务器响应结束&lt;br&gt;
res.end（）; 
}）;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;//4.启动服务&lt;br&gt;
server.listen(8080，function(){
console.1og(&amp;lsquo;服务器启动了，请访问：http://1ocalhost：8080&amp;rsquo;；
});&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;获取用户请求路径&#34;&gt;获取用户请求路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;req.url&lt;br&gt;
通过 req.url 后区用户请求的路径，根据不同请求作出不同的响应&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if(req.url === &amp;lsquo;/&amp;rsquo; || req.u === &amp;lsquo;/index&amp;rsquo;){&lt;br&gt;
     res.end(&amp;lsquo;Hello World&amp;rsquo;);&lt;br&gt;
}else if(&amp;rsquo;&amp;hellip;&#39;){&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###根据用户不同请求相应不同页面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var http=require(&amp;lsquo;http&amp;rsquo;);&lt;br&gt;
//加载fs模块&lt;br&gt;
var fs=require(&amp;lsquo;fs&amp;rsquo;);&lt;br&gt;
//加载path模块&lt;br&gt;
var path=require(&amp;lsquo;path&amp;rsquo;);&lt;br&gt;
//创建http服务，并启动该服务&lt;br&gt;
http.createServer(function(req，res){&lt;br&gt;
//通过req.url获取用户请求的路径，根据不同的请求路径服务器做出不同的响应&lt;br&gt;
if(req.url===&#39;/&#39;|| req.url===&amp;quot;/index&#39;){&lt;br&gt;
//读取index.html文件&lt;br&gt;
fs.readFile（path.join(__dirname, &amp;lsquo;htmls&amp;rsquo;, &amp;lsquo;index.html&amp;quot;), function(err, data){&lt;br&gt;
if(err){&lt;br&gt;
throw err;&lt;br&gt;
//把读取到的index.html中的内容直接发送给浏览器&lt;br&gt;
res.end(data);&lt;br&gt;
});&lt;br&gt;
}else if(req.url-==·&amp;quot;/login)}else if(req.url-==·&amp;quot;/list)&lt;br&gt;
}else if(req.url===&amp;quot;/register&amp;rsquo;){&lt;br&gt;
}else{&lt;br&gt;
}).listen（9090，function(){&lt;br&gt;
console.1log(&amp;lsquo;http://1ocalhost:9090&amp;rsquo;)；&lt;br&gt;
});&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Spring2.5学习笔记</title>
      <link>https://CoMath21.github.io/post/1-spring2.5/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-spring2.5/</guid>
      <description>&lt;h2 id=&#34;1什么是spring&#34;&gt;1、什么是Spring&lt;/h2&gt;
&lt;p&gt;　　Spring是一个开源的控制反转(Inversion of Control,IoC)和面向切面(AOP)的容器框架，它的主要目的是简化企业开发. 用于配置bean,并维护bean之间关系的框架.&lt;/p&gt;
&lt;p&gt;　　在SSH框架中spring充当了管理容器的角色. 我们都知道Hibernate用来做持久层，因为它将JDBC做了一个良好的封装，程序员在与数据库进行交互时可以不用书写大量的SQL语句. Struts是用来做应用层的，他它负责调用业务逻辑serivce层. 所以SSH框架的流程大致是：Jsp页面&amp;mdash;-Struts&amp;mdash;&amp;mdash;Service（业务逻辑处理类）&amp;mdash;Hibernate（左到右）. Struts负责控制Service（业务逻辑处理类），从而控制了Service的生命周期，这样层与层之间的依赖很强，属于耦合. 这时，使用spring框架就起到了控制Action对象（Strus中的）和Service类的作用，两者之间的关系就松散了，Spring的Ioc机制（控制反转和依赖注入）正是用在此处.&lt;/p&gt;
&lt;p&gt;　　Spring的Ioc（控制反转和依赖注入）&lt;/p&gt;
&lt;p&gt;　　控制反转：就是由容器控制程序之间的（依赖）关系，而非传统实现中，由程序代码直接操控. 应用本身不负责以来对象的而创建和维护，以来对象的创建和维护是由外部容器负责的. 这样控制权就有应用转到了外部容器，控制权的转移就是所谓反转.&lt;/p&gt;
&lt;p&gt;　　依赖注入：组件之间的依赖关系由容器在运行期决定 ，由容器动态的将某种依赖关系注入到组件之中 .&lt;/p&gt;
&lt;h2 id=&#34;2为什么要使用springspring的好处&#34;&gt;2、为什么要使用Spring（Spring的好处）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;降低组建之间的耦合度，实现软件隔层之间的解耦；&lt;/li&gt;
&lt;li&gt;可以使用容器提供的众多服务，如：事务管理服务、消息服务等等. 当我们使用容器管理服务时，开发人员就不在需要手工控制事务，也不需要处理复杂的事务传播；&lt;/li&gt;
&lt;li&gt;容器提供单例模式支持，开发人员不需要自己编写实现代码；&lt;/li&gt;
&lt;li&gt;容器提供AOP技术，利用这些类能够够加快应用的开发，如：JdbcTemplate、HibernateTemplate；&lt;/li&gt;
&lt;li&gt;Spring对于主流的应用框架提供了集成支持，如：集成Hibernate、JPA、Struts等，这样更便于应用开发.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;轻量级与重量级概念的区分&lt;/p&gt;
&lt;p&gt;　　主要看它使用了多少服务，使用服务越多，容器为java对象做的工作就越多，必然会影响到应用的发布时间或者运行性能.&lt;/p&gt;
&lt;p&gt;　　对于Spring容器，它提供了很多服务，但这些服务并不是默认应用打开的，应用需要某种服务，还需要知名使用该服务，如果应用使用的服务很少，如：只是用了Spring的核心服务，那么我们可以认为此时应用属于轻量级的，如果使用了Spring提供的大部分服务，这时应用属于重量级的，目前EJB容器就因为它默认为应用提供了EJB规范中的所有功能，所以它属于重量级的.&lt;/p&gt;
&lt;h2 id=&#34;3配置spring所需要的jar包&#34;&gt;3、配置spring所需要的jar包&lt;/h2&gt;
&lt;p&gt;　　spring.jar是包含有完整发布的单个jar 包，spring.jar中包含除了spring-mock.jar里所包含的内容外其它所有jar包的内容，因为只有在开发环境下才会用到 spring-mock.jar来进行辅助测试，正式应用系统中是用不得这些类的.&lt;/p&gt;
&lt;p&gt;　　除了spring.jar文件，Spring还包括有其它13个独立的jar包，各自包含着对应的Spring组件，用户可以根据自己的需要来选择组合自己的jar包，而不必引入整个spring.jar的所有类文件.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;spring-core.jar&lt;/b&gt;：这个jar文件包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心，当然你也可以在自己的应用系统中使用这些工具类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-beans.jar&lt;/b&gt;：这个jar文件是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类. 如果应用只需基本的IoC/DI支持，引入spring-core.jar及spring-beans.jar文件就可以了.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-aop.jar&lt;/b&gt;：这个jar文件包含在应用中使用Spring的AOP特性时所需的类. 使用基于AOP的Spring特性，如声明型事务管理（Declarative Transaction Management），也要在应用里包含这个jar包.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-context.jar&lt;/b&gt;：这个jar文件为Spring核心提供了大量扩展. 可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如Velocity、FreeMarker、JasperReports集成的类，以及校验Validation方面的相关类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-dao.jar&lt;/b&gt;：这个jar文件包含Spring DAO、Spring Transaction进行数据访问的所有类. 为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-hibernate.jar&lt;/b&gt;：这个jar文件包含Spring对Hibernate 2及Hibernate 3进行封装的所有类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-jdbc.jar&lt;/b&gt;：这个jar文件包含对Spring对JDBC数据访问进行封装的所有类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-orm.jar&lt;/b&gt;：这个jar文件包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，因为Hibernate已经独立成包了，现在不包含在这个包里了. 这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-remoting.jar&lt;/b&gt;：这个jar文件包含支持EJB、JMS、远程调用Remoting（RMI、Hessian、Burlap、Http Invoker、JAX-RPC）方面的类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-support.jar&lt;/b&gt;：这个jar文件包含支持缓存Cache（ehcache）、JCA、JMX、邮件服务（Java Mail、COS Mail）、任务计划Scheduling（Timer、Quartz）方面的类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-web.jar&lt;/b&gt;：这个jar文件包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-webmvc.jar&lt;/b&gt;：这个jar文件包含Spring MVC框架相关的所有类. 包含国际化、标签、Theme、视图展现的FreeMarker、JasperReports、Tiles、Velocity、XSLT相关类. 当然，如果你的应用使用了独立的MVC框架，则无需这个JAR文件里的任何类.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;spring-mock.jar&lt;/b&gt;：这个jar文件包含Spring一整套mock类来辅助应用的测试. Spring测试套件使用了其中大量mock类，这样测试就更加简单. 模拟HttpServletRequest和HttpServletResponse类在Web应用单元测试是很方便的.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何选择这些发布包，决定选用哪些发布包其实相当简单.&lt;/p&gt;
&lt;p&gt;　　如果你正在构建Web应用并将全程使用Spring，那么最好就使用单个全部的spring.jar文件；
如果你的应用仅仅用到简单的Inversion of Control / Dependency Injection（IoC/DI）容器，那么只需spring-core.jar与spring-beans.jar即可；&lt;/p&gt;
&lt;p&gt;　　如果你对发布的大小要求很高，那么就得精挑细选了，只取包含自己所需特性的jar文件了.
采用独立的发布包你可以避免包含自己的应用不需要的全部类. 当然你可以采用其它的一些工具来设法令整个应用包变小，节省空间的重点在于准确地找出自己所需的Spring依赖类，然后合并所需的类与包就可以了.&lt;/p&gt;
&lt;p&gt;Eclispe有个插件叫ClassPath Helper可以帮你找找所依赖的类.&lt;/p&gt;
&lt;h2 id=&#34;4spring包依赖说明&#34;&gt;4、Spring包依赖说明:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;spring-core.jar需commons-collections.jar，spring-core.jar是以下其它各个的基本.&lt;/li&gt;
&lt;li&gt;spring-beans.jar需spring-core.jar，cglib-nodep-2.1_3.jar&lt;/li&gt;
&lt;li&gt;spring-aop.jar需spring-core.jar，spring-beans.jar，cglib-nodep-2.1_3.jar，aopalliance.jar&lt;/li&gt;
&lt;li&gt;spring-context.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，commons-collections.jar，aopalliance.jar&lt;/li&gt;
&lt;li&gt;spring-dao.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-context.jar&lt;/li&gt;
&lt;li&gt;spring-jdbc.jar需spring-core.jar，spring-beans.jar，spring-dao.jar&lt;/li&gt;
&lt;li&gt;spring-web.jar需spring-core.jar，spring-beans.jar，spring-context.jar&lt;/li&gt;
&lt;li&gt;spring-webmvc.jar需spring-core.jar/spring-beans.jar/spring-context.jar/spring-web.jar&lt;/li&gt;
&lt;li&gt;spring-hibernate.jar需spring-core.jar，spring- beans.jar，spring-aop.jar，spring-dao.jar，spring-jdbc.jar，spring- orm.jar，spring-web.jar，spring-webmvc.jar&lt;/li&gt;
&lt;li&gt;spring-orm.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-jdbc.jar，spring-web.jar，spring-webmvc.jar&lt;/li&gt;
&lt;li&gt;spring-remoting.jar需spring-core.jar，spring-beans.jar，spring- aop.jar，spring-dao.jar，spring-context.jar，spring-web.jar，spring- webmvc.jar&lt;/li&gt;
&lt;li&gt;spring-support.jar需spring-core.jar，spring-beans.jar，spring-aop.jar，spring-dao.jar，spring-context.jar，spring-jdbc.jar&lt;/li&gt;
&lt;li&gt;spring-mock.jar需spring-core.jar，spring-beans.jar，spring-dao.jar，spring-context.jar，spring-jdbc.jar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;一、只是使用spring框架&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dist\spring.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lib\jakarta-commons\commons-logging.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果使用到了切面编程(AOP)，还需要下列jar文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lib\aspectj\aspectjweaver.jsr 和 aspectjrt.jar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lib\cglib\cglib-nodep-2.1_3.jar&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果使用了JSR-250中的注解如&lt;code&gt;@Resource/@PostConstruct/@PreDestroy&lt;/code&gt;,还需下列jar文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lib\j2ee\common-annotations.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;二、只是使用spring框架若使用注解方式&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　只要加一些命名空间和开启解析器,并且@Resource需要加lib\j2ee\common-annotations.jar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;context:annotation-config/&amp;gt;&lt;/code&gt;打开处理器&lt;/p&gt;
&lt;p&gt;&lt;b&gt;三、要自动扫描&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　只要开启解析器和一些命名空间
&lt;code&gt;&amp;lt;context:component-scan base-package=&amp;quot;&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;四、spring框架采用aop编程&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;需要导入一些命名空间
xmlns:aop&amp;hellip;&amp;hellip;.
&lt;code&gt;&amp;lt;aop:aspectj-autoproxy/&amp;gt;&lt;/code&gt;开启解析器
如果使用到了切面编程(AOP)，还需要下列jar文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lib\aspectj\aspectjweaver.jsr 和 aspectjrt.jar&lt;/li&gt;
&lt;li&gt;lib\cglib\cglib-nodep-2.1_3.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;五、spring+Jdbc开发&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　需要数据源文件 lib\jakarta-commons\commons-pool.jar、lib\jakarta-commons\commons-dbcp.jar&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;spring文件 ：
dist\spring.jar、
lib\jakarta-commons\commons-logging.jar&lt;/li&gt;
&lt;li&gt;jdbc驱动文件 mysql**** sql*** ：
导入tx命名空间
&amp;lt;tx:annotation-driven transaction-manager=&amp;quot;&amp;quot;/&amp;gt;
对事务注解的解析器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;六、spring2.5+hibernate3.3+struts1.3&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;hibernate核心包&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;hibernate3.jar&lt;/li&gt;
&lt;li&gt;lib\required*.jar&lt;/li&gt;
&lt;li&gt;lib\optional\ehcache-1.2.3.jar (二级缓存文件)&lt;/li&gt;
&lt;li&gt;hibernate注解包
l+ ib\test\slf4j-log4j12.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;spring包&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;dist\spring.jar&lt;/li&gt;
&lt;li&gt;lib\jakarta-commons\commons-logging.jar 和commons-pool.jar、commons-dbcp.jar(后为数据源文件)&lt;/li&gt;
&lt;li&gt;dist\modules\spring-webmvc-struts.jar (与struts1的集成)&lt;/li&gt;
&lt;li&gt;lib\aspectj\aspectjweaver.jsr 和 aspectjrt.jar (Aop文件)&lt;/li&gt;
&lt;li&gt;lib\cglib\cglib-nodep-2.1_3.jar     (Aop文件)&lt;/li&gt;
&lt;li&gt;lib\j2ee\common-annotations.jar     (注解文件)&lt;/li&gt;
&lt;li&gt;lib\log4j\log4j-1.2.15.jar&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;sturs1.3.8&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　建议将jstl-1.0.2.jar和standard-1.0.2.jar文件更换为1.1版本，此时JSTL文件．还有spring已存在antlr-2.7.6.jar文件所以将struts中的antlr-2.7.6.jar文件删除以免冲突．&lt;/p&gt;
&lt;p&gt;&lt;b&gt;七、spring2.5+hibernate3.3+struts2整合开发&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　struts2文件lib里面所有不带-plugin结尾的jar文件，但除了struts2-spring-plugin-2.0.11.1.jar.&lt;/p&gt;
&lt;h2 id=&#34;5实例化spring容器&#34;&gt;5、实例化Spring容器&lt;/h2&gt;
&lt;h3 id=&#34;51实例化spring容器的方式有两种&#34;&gt;5.1、实例化Spring容器的方式有两种：&lt;/h3&gt;
&lt;p&gt;方法一：
在类路径下寻找配置文件来实例化容器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ApplicationContext ctx =
 new ClassPathXmlApplicationContext(&amp;quot;beans.xml&amp;quot;);
//1.创建Spring的IOC容器对象ApplicationContext代表IOC容器
// ClassPathXmlApplicationContext:类路径下的XML格式的配置文件
ApplicationContext ctx = new ClassPathXmlApplicationContext(&amp;quot;applicationContext.xml&amp;quot;);
//2.从IOC容器对象中获取Bean实例
HelloWorld helloWorld2 = (HelloWorld) ctx.getBean(&amp;quot;helloworld&amp;quot;);
//3.调用hello方法
helloWorld2.hello();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法二：
在文件内系统路径下寻找配置文件来实现容器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ApplicationContext ctx =
new FileSystemXmlApplicationContext(&amp;quot;beans.xml&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring配置文件可以指定多个，可以通过String数组传入.
配置Spring环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
  xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; 
  xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
  xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd&amp;quot;&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;
测试是否搭建成功:项目右键新建Junit Test Case.
&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6如何将业务bean交给spring管理&#34;&gt;6、如何将业务bean交给Spring管理&lt;/h2&gt;
&lt;p&gt;　　在Spring配置中添加&lt;code&gt;&amp;lt;bean id=”名称” name=”名称” class=””&amp;gt;&amp;lt;/bean&amp;gt;&lt;/code&gt;，此时bean就可以由Spring容器帮助创建和维护，当我们要用到bean的时候只需要从Spring容器中获取即可，获取的时候可以用ApplicationContext.getBean(id);（返回值为 Object），可以通过bean的接口对其进行引用，之后即可调用其方法.&lt;/p&gt;
&lt;p&gt;注意：id中不能包含特殊字符例如&lt;code&gt;“/”&lt;/code&gt;，而name中可以包含. 如果包含特殊字符则用&lt;code&gt;name=””&lt;/code&gt;；其他可以用&lt;code&gt;id=””&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;实例：首先创建一个业务bean&amp;ndash;PersonServiceBean，建议使用面向接口编程（要实现软件之间的解耦），所以可以抽取接口，然后交给Spring管理.
&lt;img src=&#34;./4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7三种实例化bean的方式&#34;&gt;7、三种实例化bean的方式：&lt;/h2&gt;
&lt;h3 id=&#34;71实用类构造器实例化&#34;&gt;7.1、实用类构造器实例化&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;personService&amp;quot;
  class=&amp;quot;com.haibao.service.impl.PersonServiceBean&amp;quot;/&amp;gt; 
&amp;lt;!--  配置bean
  class:bean的全类名，通过反射的方式在IOC容器中创建Bean，所以Bean中必须有无参构造器
  id:表示容器中的bean唯一
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;72使用静态工厂方法实例化&#34;&gt;7.2、使用静态工厂方法实例化&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;personService2&amp;quot; 
  class=&amp;quot;com.haibao.service.impl.PersonServiceFactory&amp;quot; 
  factory-method=&amp;quot;createPersonService&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class PersonServiceFactory {
  public static PersonServiceBean createPersonService() {
    return new PersonServiceBean();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;73使用实例化工厂实例化&#34;&gt;7.3、使用实例化工厂实例化&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;personServiceFactory&amp;quot; 
  class=&amp;quot;com.haibao.service.impl.PersonServiceFactory&amp;quot;/&amp;gt;
&amp;lt;bean id=&amp;quot;personService3&amp;quot; 
factory-bean=&amp;quot;personServiceFactory&amp;quot; 
factory-method=&amp;quot;createPersonService2&amp;quot;/&amp;gt;
public class PersonServiceFactory {
  public PersonServiceBean createPersonService() {
    return new PersonServiceBean();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8bean的作用域及bean的生命周期&#34;&gt;8、Bean的作用域及bean的生命周期&lt;/h2&gt;
&lt;p&gt;　　.sigleton（单例模式，Spring容器启动的时候bean就被实例化）
在每个Spring IoC容器中一个bean定义只有一个对象实例. 默认情况下会在容器启动时初始化bean，我们可以指定Bean节点的laz-init=”true”来延迟初始化bean，这时候，只有第一次获取bean才会初始化bean.
例如：&lt;code&gt;&amp;lt;bean id=”XXX” class=”XXX” lazy-init=“true”/&amp;gt; &lt;/code&gt;,
（设置lazy-init=“true”后Spring容器启动的时候bean不会被实例化）.如果想所有的应用都应用延迟初始化，可以在根节点beans设置default-lazy-init=”true”;即：&lt;code&gt;&amp;lt;bean id=”XXX” class=”XXX” default-lazy-init=“true”/&amp;gt;&lt;/code&gt;,.prototype(调用getBean()方法的时候bean才会被实例化).每次从容器获取bean都是新对象.
&lt;code&gt;&amp;lt;bean id=”XXX” class=”XXX” scope=” prototype”/&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;初始化：初始化方法可以在bean的配置中用&lt;code&gt;init-method=&amp;quot;&amp;quot;&lt;/code&gt;方法调用初始化函数.&lt;/p&gt;
&lt;p&gt;销毁：默认情况下只有Spring容器北校关闭才会销毁. 可以在bean的配置中用&lt;code&gt;destroy-method=&amp;quot;&amp;quot;&lt;/code&gt;方法销毁.&lt;/p&gt;
&lt;h2 id=&#34;9依赖注入对象&#34;&gt;9、依赖注入对象：&lt;/h2&gt;
&lt;p&gt;　　所谓依赖注入是指：在运行期，外部容器动态的将以来对象注入到组件.&lt;/p&gt;
&lt;p&gt;基本类型对象注入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;orderService&amp;quot; class=&amp;quot;orderServiceBean&amp;quot;&amp;gt;
  //构造器注入
  &amp;lt;constructor-arg index=&amp;quot;0&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;XXX&amp;quot;&amp;gt;
  //属性setter方法注入
  &amp;lt;property name=&amp;quot;name&amp;quot; value=&amp;quot;value&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式一：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;orderDao&amp;quot; class=&amp;quot;PersonDaoBean&amp;quot;/&amp;gt;
&amp;lt;bean id=&amp;quot;orderService&amp;quot; class=&amp;quot;PersonServiceBean&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;orderDao&amp;quot; ref=&amp;quot;orderDao&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
// ref：指向其他bean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式二：(使用内部bean，但该bean不能被其他bean使用)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;orderService&amp;quot; class=&amp;quot;PersonServiceBean&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;orderDao&amp;quot; ref=&amp;quot;orderDao&amp;quot;&amp;gt;
&amp;lt;bean class=&amp;quot; orderDao&amp;quot;/&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我们把依赖对象注入交给外部容器负责创建，namePersonServiceBean类可以改成：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class PersonServiceBean implements PersonService {
  private  PersonDao personDao;
  public PersonDao getPerson(){
    return personDao;
}
	
  public void getPersonDao(PersonDao personDao){
    this.personDao = personDao;
  }
	
  public void save(){
    personDao.add();
  }
}

public class PersonDaoBean implements PersonDao{
  public void add(){
    System.out.println(&amp;quot;add()方法&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;beans.xml配置中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;personDaoname&amp;quot; class=&amp;quot;PersonDaoBean&amp;quot;/&amp;gt;
&amp;lt;bean id=&amp;quot;personService&amp;quot; class=&amp;quot;PersonServiceBean&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;personDao&amp;quot; ref=&amp;quot;personDaoname &amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;属性setter方法注入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对基本类型进行注入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;name&amp;quot; value=&amp;quot;value&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;集合类型的装配&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public calss orderServiceBean{
  private Set&amp;lt;String&amp;gt; sets = new HashSet&amp;lt;Striing&amp;gt;();
  private List&amp;lt;String&amp;gt; lists = new ArrayList&amp;lt;Striing&amp;gt;();
  private Properties properties = new Properties ();
  private Map&amp;lt;String,String&amp;gt; maps = new HashMap&amp;lt;String,Striing&amp;gt;();
  // 一定要生成getter、setter方法
} 
&amp;lt;property name=&amp;quot;sets&amp;quot;&amp;gt;
  &amp;lt;set&amp;gt;
    &amp;lt;value&amp;gt;值1&amp;lt;/value&amp;gt;
    &amp;lt;value&amp;gt;值2&amp;lt;/value&amp;gt;
    &amp;lt;value&amp;gt;值3&amp;lt;/value&amp;gt;.
  &amp;lt;/set&amp;gt;
&amp;lt;property/&amp;gt;
&amp;lt;property name=&amp;quot;lists&amp;quot;&amp;gt;
  &amp;lt;list&amp;gt;
    &amp;lt;value&amp;gt;值1&amp;lt;/value&amp;gt;
    &amp;lt;value&amp;gt;值2&amp;lt;/value&amp;gt;
    &amp;lt;value&amp;gt;值3&amp;lt;/value&amp;gt;
  &amp;lt;/list&amp;gt;
&amp;lt;property/&amp;gt;
 

&amp;lt;property name=&amp;quot;properties&amp;quot;&amp;gt;
  &amp;lt;props&amp;gt;
    &amp;lt;prop key=&amp;quot;key1&amp;quot;&amp;gt;值1&amp;lt;/prop&amp;gt;
    &amp;lt;prop key=&amp;quot;key2&amp;quot;&amp;gt;值2&amp;lt;/prop&amp;gt;
    &amp;lt;prop key=&amp;quot;key3&amp;quot;&amp;gt;值3&amp;lt;/prop&amp;gt;.
  &amp;lt;/props&amp;gt;
&amp;lt;property/&amp;gt;
&amp;lt;property name=&amp;quot;maps&amp;quot;&amp;gt;
  &amp;lt;map&amp;gt;
    &amp;lt;entry key=&amp;quot;key1&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
    &amp;lt;entry key=&amp;quot;key2&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;
    &amp;lt;entry key=&amp;quot;key3&amp;quot; value=&amp;quot;3&amp;quot;/&amp;gt;.
  &amp;lt;/map&amp;gt;
&amp;lt;property/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;构造器参数注入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;constructor-arg index=&amp;quot;0&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;XXX&amp;quot;/&amp;gt;
&amp;lt;constructor-arg index=&amp;quot;1&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;XXX&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用Field注入（用于注解方式）
　　注入以来对象可以采用手工装配或自动装配，在实际应用中建议使用手工装配，因为自动装配会产生未知情况，开发人员无法预见最终结果.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;91依赖注入---手工装配&#34;&gt;9.1、依赖注入&amp;mdash;手工装配&lt;/h3&gt;
&lt;p&gt;手工装配依赖对象，在这种方式中有两种变成方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在xml配置文件中通过bean节点下配置. 如：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;orderDao&amp;quot; class=&amp;quot;PersonDaoBean&amp;quot;/&amp;gt;
&amp;lt;bean id=&amp;quot;orderService&amp;quot; class=&amp;quot;PersonServiceBean&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;orderDao&amp;quot; ref=&amp;quot;orderDao&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;在java代码中使用@Autowire或@Resource注解方式进行装配. 但我们需要在xml配置文件中配置以下信息：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;			 xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; 
  xmlns:context=http://www.springframework.org/schema/context 	xsi:schemaLocation=&amp;quot;http://www.  springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;quot;&amp;gt;
&amp;lt;context:annotation-config/&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个配置也是注册了多个对注释进行解析处理的处理器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AutwiredAnnotationBeanProcessor&lt;/li&gt;
&lt;li&gt;CommonAnnotationBeanPostProcessor&lt;/li&gt;
&lt;li&gt;PersistenceAnnotationBeanPostProcessor&lt;/li&gt;
&lt;li&gt;RequiredAnnotationBeanProcessor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=red&gt;注：@Resource注解在Spring安装目录下的lib\j2ee\common-annotation.jar&lt;/font&gt;
　　在java代码中使用@Autowire或@Resource注解方式进行装配，这两个注解的区别是：@Autowire默认按类型装配，@Resource，默认按名称装配，当找不到与名称匹配的bean才会按类型装配.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Autowire
private PersonDao personDao;//用于字段上
@Autowire
public void setOrderDao(PersonDao personDao){
//用于属性的setter方法上
	this.orderDao = orderDao；
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@Autowire注解是按类型装配依赖对象，默认情况下他要求对象必须存在，如果允许为null值，可以设置它的required属性为false. 如果想使用按名称装配，可以结合@Qualifier注解一起使用. 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Autowire @Qualifier(“personDaoBean”)
private PersonDao personDao；
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@Resource注解和@Autowire一样，也可以标注在字段或属性的setter方法上，但他默认按名称装配. 名称可以通过@Resource的name属性指定，如果没有指定name属性，当注解标注在字段上，即默认取字段的名称作为bean名称寻找依赖对象，当注解标注在属性的setter方法上，即默认取属性名作为bean名称寻找依赖对象.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Resource(name=”personDaoBean”)
private PersonDao personDao;//用于字段上
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：如果没有指定name属性，并且按照默认名称仍然找不到依赖对象时，@Resource注解会回退到安类型装配，但一旦指定了name属性，就只能按名称装配了.&lt;/p&gt;
&lt;h2 id=&#34;10aop--代理对象主要用在权限&#34;&gt;10、AOP&amp;ndash;代理对象（主要用在权限）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;环绕通知&lt;/li&gt;
&lt;li&gt;前置通知&lt;/li&gt;
&lt;li&gt;后置通知&lt;/li&gt;
&lt;li&gt;例外通知&lt;/li&gt;
&lt;li&gt;最终通知&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public Object invoke(Object proxy, Method method,Object[] args)
    throws Throwable {
  PersonServiceBean bean = (PersonServiceBean) this.targetObject;
  Object result = null;//环绕通知
  if(bean.getUser () != null {
    // ..... advice ( )--&amp;gt;前置通知
    try {
      result = method.invoke (targetObject, args);
        //afteradvice() --&amp;gt;后置通知
  } catch(RuntimeException e){
      // exceptionadvice ()--&amp;gt;例外通知
  }finally{
    // tinallyadvice () : --&amp;gt;最终通知
  }
    }
  return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;101aop中的概念基于注解方式声明切面&#34;&gt;10.1、AOP中的概念：（基于注解方式声明切面）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Aspect(切面)：指横切性关注点的抽象即为切面，它与类相似，只是两者的关注点不一样，类是对物体特征的抽象，而切面是横切性关注点的抽象.&lt;/li&gt;
&lt;li&gt;joinpoint(连接点)：所谓连接点是指那些被拦截到的点. 在spring中，这些点指的是方法，因为spring只支持方法类型的连接点，实际上joinpoint还可以是field或类构造器.&lt;/li&gt;
&lt;li&gt;Pointcut(切入点)：所为切入点是我们要对那些joinpoint进行拦截的定义.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注解：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Pointcut (“execution(* com.haibao.service.*.*(..))”)
private void anyMethod(){}//声明一个切入点
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=red&gt;说明&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 配置事务拦截器拦截哪些类的哪些方法,一般设置成拦截Service --&amp;gt;
&amp;lt;aop:config&amp;gt;
  &amp;lt;aop:pointcut expression=&amp;quot;execution(* com.xy.service.*.*(..))&amp;quot;
                              id=&amp;quot;allDaoMethod&amp;quot; /&amp;gt;
  &amp;lt;aop:advisor advice-ref=&amp;quot;txAdvice&amp;quot; pointcut-ref=&amp;quot;allDaoMethod&amp;quot; /&amp;gt; 
&amp;lt;/aop:config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示com.xy.service包下的所有方法为为事务管理.&lt;/p&gt;
&lt;p&gt;execution(&lt;font color=green&gt;*&lt;/font&gt; com.aptech.jb.epet.dao.hibimpl.&lt;font color=red&gt;*&lt;/font&gt;.&lt;font color=blue&gt;*&lt;/font&gt;(..))
这是com.aptech.jb.epet.dao.hibimpl包下所有的类的所有方法.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个&lt;font color=green&gt;*&lt;/font&gt;代表所有的返回值类型&lt;/li&gt;
&lt;li&gt;第二个&lt;font color=red&gt;*&lt;/font&gt;代表所有的类&lt;/li&gt;
&lt;li&gt;第三个&lt;font color=blue&gt;*&lt;/font&gt;代表类所有方法 最后一个..代表所有的参数.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一些常见切入点表达式的例子：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意公共方法的执行：&lt;code&gt;execution(public * *(..))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任何一个以“set”开始的方法的执行：&lt;code&gt;execution(* set*(..))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;AccountService 接口的任意方法的执行：
&lt;code&gt;execution(* com.xyz.service.AccountService.*(..))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义在service包里的任意方法的执行：
&lt;code&gt;execution(* com.xyz.service.*.*(..))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义在service包或者子包里的任意类的任意方法的执行：
&lt;code&gt;execution(* com.xyz.service..*.*(..))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Advice(通知)：所谓通知是指拦截到joinpoint之后所做的事情，通知分为前置通知（@Before(“anyMethod()”)）、&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;后置通知（@AfterReturning(“anyMethod()”)）、&lt;/li&gt;
&lt;li&gt;最终通知（@After(“anyMethod()”)）、&lt;/li&gt;
&lt;li&gt;例外通知（@AfterThrowing(“anyMethod()”)）、&lt;/li&gt;
&lt;li&gt;环绕通知（@Around(“anyMethod()”)）.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public Object doBasicProfiling(ProceedingJoinPoint p) throws Throwable{
  Object result = p.proceed();//必须执行该方法
return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Target(目标对象)：代理的目标对象.&lt;/p&gt;
&lt;p&gt;Weave(织入)：指将aspects应用到target对象并导致proxy对象创建的过程称为织入.&lt;/p&gt;
&lt;p&gt;Introduction(引入)：在不修改代码的前提下，Introduction可以在运行期间为类动态的添加一些方法或Field.&lt;/p&gt;
&lt;h3 id=&#34;102基于xml配置方式声明切面&#34;&gt;10.2、基于XML配置方式声明切面&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;aop:aspectj-autoproxy /&amp;gt;
  &amp;lt;bean id=&amp;quot;aspetbean&amp;quot; class=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
  &amp;lt;aop:config&amp;gt;
    &amp;lt;aop:aspect id=&amp;quot;asp&amp;quot; ref=&amp;quot;aspetbean&amp;quot;&amp;gt;
      &amp;lt;!-- 定义切入点 id=名称 expression 表示拦截... --&amp;gt;
      &amp;lt;aop:pointcut id=&amp;quot;mycut&amp;quot; expression=  &amp;quot;execution(* com.xy.service.*.*(..))&amp;quot;/&amp;gt;
      &amp;lt;!-- 前置通知 --&amp;gt;
      &amp;lt;aop:before pointcut-ref=&amp;quot;mycut&amp;quot;  method=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;!-- 后置通知 --&amp;gt;
      &amp;lt;aop:after-returning pointcut-ref=  &amp;quot;mycut&amp;quot;  method=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;!-- 例外通知 --&amp;gt;
      &amp;lt;aop:after-throwing pointcut-ref=&amp;quot;mycut&amp;quot;  method=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;!-- 最终通知 --&amp;gt;
      &amp;lt;aop:after pointcut-ref=&amp;quot;mycut&amp;quot;  method=&amp;quot;&amp;quot;/&amp;gt;
      &amp;lt;!-- 环绕通知 --&amp;gt;
      &amp;lt;aop:around pointcut-ref=&amp;quot;mycut&amp;quot;  method=&amp;quot;&amp;quot;/&amp;gt;
  &amp;lt;/aop:aspect&amp;gt;
&amp;lt;/aop:config&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11springjdbc组合开发&#34;&gt;11、Spring+JDBC组合开发&lt;/h2&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置数据源，如：
依赖的jar文件： commons-dbcp.jar、
commons-logging.jar、
commons-pool.jar&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;dataSource&amp;quot; 
class=&amp;quot;org.apach.commons.dbcp.BasicDataSource&amp;quot; 
destroy-method=&amp;quot;close&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;driveClassName&amp;quot; 
value=&amp;quot;org.gjt.mm.mysql.Driver&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;url&amp;quot;
value=&amp;quot;jdbc:mysql://localhost:3306/dbname?useUnicode=true
转义&amp;amp;←&amp;amp;amp;characterEncoding=UTF-8&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
&amp;lt;!-- 连接池启动时的初始值 --&amp;gt;
&amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;!-- 连接池最大值 --&amp;gt;
&amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;500&amp;quot;/&amp;gt;
&amp;lt;!-- 最大空闲值，当经历过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 --&amp;gt;
&amp;lt;property name=&amp;quot;maxIdle&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;
&amp;lt;!-- 最小空闲值，当空闲的连接数少于阙值时，连接池会预申请去一些连接，以免洪峰来时不及申请 --&amp;gt;
&amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
或者使用属性文件保存参数值
&amp;lt;context:property-placeholder location=&amp;quot;classpath.properties&amp;quot;/&amp;gt;
classpath:在类路径下
&amp;lt;bean id=&amp;quot;dataSource&amp;quot; 
class=&amp;quot;org.apach.commons.dbcp.BasicDataSource&amp;quot; 
destroy-method=&amp;quot;close&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;driveClassName&amp;quot; value=&amp;quot;${ driveClassName}&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;url&amp;quot;value=&amp;quot;${ url }&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;${ username}&amp;quot;/&amp;gt;
&amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;${ password }&amp;quot;/&amp;gt;
&amp;lt;!-- 连接池启动时的初始值 --&amp;gt;
&amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;${ initialSize }&amp;quot;/&amp;gt;
&amp;lt;!-- 连接池最大值 --&amp;gt;
&amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;${ maxActive }&amp;quot;/&amp;gt;
&amp;lt;!-- 最大空闲值，当经历过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 --&amp;gt;
&amp;lt;property name=&amp;quot;maxIdle&amp;quot; value=&amp;quot;${ maxIdle }&amp;quot;/&amp;gt;
&amp;lt;!-- 最小空闲值，当空闲的连接数少于阙值时，连接池会预申请去一些连接，以免洪峰来时不及申请 --&amp;gt;
&amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;${ minIdle }&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置事务：配置事务时，需要在XML配置文件中引入声明事务的tx命名空间，事务的配置方式有两种：注解方式和基于XML配置方式.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;111采用注解方式配置事务在xml文件中配置事务管理器&#34;&gt;11.1、采用注解方式配置事务：在XML文件中配置事务管理器&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;txManager&amp;quot; 
class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTranszctionManager&amp;quot;&amp;gt;
&amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;!-- 采用@Transactional注解方式使用事务 --&amp;gt;
&amp;lt;tx:annotation-driven transaction-manager=&amp;quot;txManager&amp;quot;&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tx命名空间.&lt;/p&gt;
&lt;p&gt;xmlns:tx=&amp;ldquo;&lt;a href=&#34;http://www.springframework.org/schema/tx%22&#34;&gt;http://www.springframework.org/schema/tx&amp;quot;&lt;/a&gt;
&lt;a href=&#34;http://www.springframework.org/schema/tx&#34;&gt;http://www.springframework.org/schema/tx&lt;/a&gt;
&lt;a href=&#34;http://www.springframework.org/schema/tx/spring-tx-2.5.xsd&#34;&gt;http://www.springframework.org/schema/tx/spring-tx-2.5.xsd&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;12采用基于xml方式配置事务&#34;&gt;12、采用基于XML方式配置事务&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;txManager&amp;quot; class=&amp;quot;org.springframework.jdbc.datasource.DatasourceTransactionManager&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;aop:config&amp;gt;
  &amp;lt;aop:pointcut id=&amp;quot;transactionPointcut&amp;quot; expression=&amp;quot;execute()…&amp;quot;/&amp;gt;
  &amp;lt;aop:advisor advice=&amp;quot;txAdvice&amp;quot; point-ref=&amp;quot;transactionPointcut&amp;quot;/&amp;gt;
&amp;lt;/aop:config&amp;gt;
&amp;lt;tx:advice id=&amp;quot;txAdvice&amp;quot; transaction-manager=&amp;quot;txManager&amp;quot;&amp;gt;
  &amp;lt;tx:attributes&amp;gt;
    &amp;lt;tx:method name=&amp;quot;get*&amp;quot; read-only=&amp;quot;true&amp;quot; proportion=&amp;quot;NOT_SUPPORTED&amp;quot;/&amp;gt;
    &amp;lt;tx:method name=&amp;quot;*&amp;quot;/&amp;gt;
  &amp;lt;/tx:attributes&amp;gt;
&amp;lt;/tx:advice&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13spring管理事务提交的规则&#34;&gt;13、Spring管理事务提交的规则：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遇到unckecked（运行期例外）事物会发生回滚，即：执行无效.&lt;/li&gt;
&lt;li&gt;遇到checked事物不会发生回滚.&lt;/li&gt;
&lt;li&gt;要求回滚：@Transcation(rollbackFor=Exception.class)&lt;/li&gt;
&lt;li&gt;事物传播属性：@Transcation(propagation=Propagation. NOT_SUPPORTED)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REQUIRED&lt;/strong&gt;:（默认）业务方法需要在一个事务中运行. 如果方法运行时，已经处在一个事务中，那么加入到该事务中，否则自己创建一个新事务.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOT_SUPPORTED&lt;/strong&gt;:声明方法不需要事务. 如果方法没有关联一个事务，容器不会为它开启事务；如果方法在一个事务中被调用，该事务会挂起，在方法调用结束后，原先的事务便会恢复执行.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REQUIRESNEW&lt;/strong&gt;:属性表明不管是否存在事务，业务方法总会为自己发起一个新的事务. 如果方法已经运行在一个事务中，则原事务会被挂起，新事务会被日创建，直到方法结束，新事务才算结束，原先的事务才会恢复.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MANDATORY&lt;/strong&gt;:该属性指定业务方法在某个事务范围，业务方法不能发起自己的事务. 如果业务方法在事务范围外被调用，则方法在没有事务的环境下执行.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SUPPORKTS&lt;/strong&gt;：这一事务属性表明，如果业务方法在某个事务范围内被调用，则方法成为该事务的一部分. 如果业务方法在没有事务的环境下调用，则方法在没有事务的环境下执行.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never&lt;/strong&gt;:指定业务方法绝对不能在事务范围内执行. 若果业务方法在某个事务中执行，容器会抛出例外，只有业务方法没有关联到任何事务，才能正常执行.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NESTED&lt;/strong&gt;:如果一个活动的事务存在，则运行在一个嵌套的事务中，如果没有活动事务，则按REQUIRED属性执行，它使用了一个人单独的事务，这个事务拥有多个可以回滚的保存点. 内部事务的回滚不会对外部事务造成影响. 他只对DataSourceTransactionManager事务管理器起效.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14数据库系统提供了四种事务隔离级&#34;&gt;14、数据库系统提供了四种事务隔离级&lt;/h2&gt;
&lt;p&gt;　　数据库系统提供了四级事务隔离级别供用户选择. 不同的隔离级别采用不同的所类型实现，在四级隔离级别中，Serislixstion的隔离级别最高，Read Uncommited的隔离级别最低. 大多数据库默认的隔离级别为Read Commited，如SQLServer 2000 &amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read Uncommited&lt;/strong&gt;：读未提交数据（会出现脏读，不可重复读和幻读）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read Commited&lt;/strong&gt;：读已提交数据（会出现不可重复读和幻读）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeatable Read&lt;/strong&gt;：可重复读（会出现幻读）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serializable&lt;/strong&gt;：串行化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;脏读&lt;/strong&gt;：一个事务读取到另一个事务未提交的更新数据.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可重复读&lt;/strong&gt;：在同一个事务中多次读取数据时，能够保证所读数据一样，也就是，后续读取不能读到另外一个事务已提交的更新数据.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;：在同一个事务中多次读取同一数据返回的结果有所不同，也就是，后续读取能读到另外一个事务已提交的更新数据.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻读&lt;/strong&gt;：一个事务读取到另一事务已提交的insert数据.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hibernate学习笔记</title>
      <link>https://CoMath21.github.io/post/1-hibernate/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-hibernate/</guid>
      <description>&lt;h2 id=&#34;hibernate-是什么&#34;&gt;Hibernate 是什么？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;hibernate是一个轻量级JavaEE应用的持久层框架（framework）&lt;/li&gt;
&lt;li&gt;hibernate是一个ORM（object relation mapping对象关系映射）框架
&lt;ul&gt;
&lt;li&gt;o object -&amp;gt; 业务层(只对对象操作)&lt;/li&gt;
&lt;li&gt;r relation-&amp;gt; 关系数据库，关系型数据库中二维表&lt;/li&gt;
&lt;li&gt;m mapping 对象关系映射文件
&lt;ul&gt;
&lt;li&gt;java类&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt;表&lt;/li&gt;
&lt;li&gt;java对象&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;表中记录&lt;/li&gt;
&lt;li&gt;java对象属性&amp;mdash;&amp;mdash;-&amp;gt;表中字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hibernate 处于我们项目的持久层位置(正因为如此，所以有人又把hibernate称为 持久层框架)&lt;/li&gt;
&lt;li&gt;hibernate 实际上就是对jdbc进行了轻量级的封装.&lt;/li&gt;
&lt;li&gt;hibernate 的基础还是我们java反射机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;手动配置hibernate方式完成crud操作&#34;&gt;手动配置hibernate方式完成crud操作&lt;/h2&gt;
&lt;p&gt;　　首先创建项目，再引入jar包. hibernate开发的三种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由domain object –&amp;gt; mapping -&amp;gt; db (官方推荐).&lt;/li&gt;
&lt;li&gt;由DB开始，用工具生成mapping和domain object (使用较多).&lt;/li&gt;
&lt;li&gt;由映射开始.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;employeehbmlxml配置文件&#34;&gt;Employee.hbml.xml配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE hibernate-mapping PUBLIC &amp;quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&amp;quot;
	&amp;quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&amp;quot;&amp;gt;
&amp;lt;hibernate-mapping package=&amp;quot;com.hsp.domain&amp;quot;&amp;gt;
  &amp;lt;class name=&amp;quot;Employee&amp;quot; table=&amp;quot;employee&amp;quot;&amp;gt;
    &amp;lt;!-- id元素用于指定主键属性 --&amp;gt;
    &amp;lt;id name=&amp;quot;id&amp;quot; column=&amp;quot;id&amp;quot; type=&amp;quot;java.lang.Integer&amp;quot;&amp;gt;
    &amp;lt;!-- 该元素用于指定主键值生成策略hilo native increment sequence uuid --&amp;gt;
      &amp;lt;generator class=&amp;quot;sequence&amp;quot;&amp;gt;
        &amp;lt;param name=&amp;quot;sequence&amp;quot;&amp;gt;emp_seq&amp;lt;/param&amp;gt;
      &amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;!-- 对其它属性还有配置 --&amp;gt;
    &amp;lt;property name=&amp;quot;name&amp;quot; type=&amp;quot;java.lang.String&amp;quot;&amp;gt;
      &amp;lt;column name=&amp;quot;name&amp;quot; not-null=&amp;quot;false&amp;quot;  /&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;email&amp;quot; type=&amp;quot;java.lang.String&amp;quot; &amp;gt;
      &amp;lt;column name=&amp;quot;email&amp;quot; not-null=&amp;quot;false&amp;quot;/&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;hiredate&amp;quot; type=&amp;quot;java.util.Date&amp;quot;&amp;gt;
      &amp;lt;column name=&amp;quot;hiredate&amp;quot; not-null=&amp;quot;false&amp;quot; /&amp;gt;
    &amp;lt;/property&amp;gt;
  &amp;lt;/class&amp;gt;	
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;hibernatecfgxml配置文件&#34;&gt;hibernate.cfg.xml配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-configuration PUBLIC
        &amp;quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;quot;
        &amp;quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt;
&amp;lt;hibernate-configuration&amp;gt;
  &amp;lt;session-factory&amp;gt;
    &amp;lt;!-- hibernate 设计者，给我们提供了一写常用的配置 --&amp;gt;
    &amp;lt;!-- 配置使用的driver --&amp;gt;
    &amp;lt;property name=&amp;quot;connection.driver_class&amp;quot;&amp;gt;oracle.jdbc.driver.OracleDriver&amp;lt;/property&amp;gt;
    &amp;lt;!-- 配置使用的账户密码 --&amp;gt;
    &amp;lt;property name=&amp;quot;connection.username&amp;quot;&amp;gt;scott&amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;connection.password&amp;quot;&amp;gt;tiger&amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;quot;connection.url&amp;quot;&amp;gt;jdbc:oracle:thin:@127.0.0.1:1521:orclhsp&amp;lt;/property&amp;gt;
    &amp;lt;!-- 配置dialect方言,明确告诉hibernate连接是哪种数据库 --&amp;gt;
    &amp;lt;property name=&amp;quot;dialect&amp;quot;&amp;gt;org.hibernate.dialect.OracleDialect&amp;lt;/property&amp;gt;
    &amp;lt;!-- 显示出对于sql语句 --&amp;gt;
    &amp;lt;property name=&amp;quot;show_sql&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
    &amp;lt;!-- 指定管理的对象映射文件 --&amp;gt;
    &amp;lt;mapping resource=&amp;quot;com/hsp/domain/Employee.hbm.xml&amp;quot;/&amp;gt;
  &amp;lt;/session-factory&amp;gt;
&amp;lt;/hibernate-configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;connection.driver_class:在etc下可以找到；&lt;/li&gt;
&lt;li&gt;hibernate.cfg.xml文件可以不写，但要在spring中配置.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;测试文件testmainjava&#34;&gt;测试文件TestMain.java&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;package com.hsp.view;
import com.hsp.util.*;
import java.util.Date;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.*;

import com.hsp.domain.Employee;
public class TestMain {
  public static void main(String[] args) {
    //查询[load]-&amp;gt;hql语句(hibernate query language)
  }
  public static void delEmp() {
    //删除
    //获取一个session
    Session session=MySessionFactory.getSessionFactory().openSession();
    Transaction ts=session.beginTransaction();
    //删除1.先获取该雇员，然后删除
    Employee emp=(Employee) session.load(Employee.class, 3);
    session.delete(emp);
    ts.commit();
    session.close();
  }

  public static void updateEmp() {
    // TODO Auto-generated method stub
    //修改用户
    //获取一个会话
    Session session=MySessionFactory.getSessionFactory().openSession();
    
    Transaction ts=session.beginTransaction();
    //修改用户1. 获取要修改的用户，2.修改
    //load是通过主键属性，获取该对象实例.&amp;lt;---&amp;gt;表的记录对应
    Employee emp=(Employee) session.load(Employee.class, 3);
    emp.setName(&amp;quot;韩顺平8&amp;quot;);//update...
    emp.setEmail(&amp;quot;abc@sohu.com&amp;quot;);
    ts.commit();
    session.close();
  }

  public static void addEmployee() {
    //我们使用hibernate完成crud操作[这里我们只见对象，不见表]
    //现在我们不是用service ,直接测试.
    //1. 创建Configuration,该对象用于读取hibernate.cfg.xml,并完成初始化
    Configuration configuration=new Configuration().configure();
    //2.创建SessoinFactory[这是一个会话工厂，是一个重量级的对象]
    SessionFactory sessionFactory=configuration.buildSessionFactory();
    //3.创建Sessoin 相当于jdbc Connection[ servelt HttpSession ,也不是 jsp session]
    Session session=sessionFactory.openSession();
    //4.对hiberate而言，要求在进行 增加，删除，修改的时候使用事务提交，
    Transaction transaction = session.beginTransaction();
    //添加一个雇员
    Employee employee=new Employee();
    employee.setName(&amp;quot;shunping&amp;quot;);
    employee.setEmail(&amp;quot;shunping@sohu.com&amp;quot;);
    employee.setHiredate(new Date());
    //insert .............
    //保存
    session.save(employee);//save employee就是持久化该对象 (把对象保存到了数据库中称为一条记录)
    //==&amp;gt;insert into ....[被hiberante封装]
    //提交
    transaction.commit();
    session.close();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;&amp;lt;Hibernate-mapping&amp;gt;&lt;/code&gt;标签的属性如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package：指定一个包前缀，如果在映射文档中(就是在class标签的那么属性里没有指定全类名)没有指定全限定的类名，就使用这个作为包名.&lt;/li&gt;
&lt;li&gt;schema：数据库schema的名称.&lt;/li&gt;
&lt;li&gt;catalog：数据库catalog的名称.&lt;/li&gt;
&lt;li&gt;default-cascade：默认的级联风格,默认为none.&lt;/li&gt;
&lt;li&gt;default-access：Hibernate用来访问属性的策略.&lt;/li&gt;
&lt;li&gt;default-lazy：指定了此属性，未明确注明lazy属性的Java属性和集合类，Hibernate会采取的默认使用这个属性加载风格,默认为true.&lt;/li&gt;
&lt;li&gt;auto-import：指定我们是否可以在查询语言中使用非全限定的类名,默认为true,如果项目中有两个同名的持久化类,则最好在这两个类的对应的映射文件中配置为false.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　Hibernate的子标签class标签：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;class 元素用于指定类和表的映射 .&lt;/li&gt;
&lt;li&gt;name:指定该持久化类映射的持久化类的类名.
&lt;ul&gt;
&lt;li&gt;example:&lt;code&gt;&amp;lt;class name=&amp;quot;com.jeremy.hibernate.example.News&amp;quot; table=&amp;quot;NEWS&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;table:指定该持久化类映射的表名, Hibernate 默认以持久化类的类名作为表名 .
&lt;ul&gt;
&lt;li&gt;example:&lt;code&gt;&amp;lt;class name=&amp;quot;com.jeremy.hibernate.example.News&amp;quot; table=&amp;quot;NEWS&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dynamic-insert: 若设置为 true, 表示当（调用Session的save()方法时）保存一个对象时, 会动态生成 insert 语句, insert 语句中仅包含所有取值不为 null 的字段. 默认值为 false.&lt;/li&gt;
&lt;li&gt;Example:这个跟dynamic-update一个意思.&lt;/li&gt;
&lt;li&gt;dynamic-update: 若设置为 true, 表示当(调用对象的set()方法)更新一个对象时, 会动态生成 update 语句, update 语句中仅包含所有取值需要更新的字段. 默认值为 false.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　Hibernate映射文件主要内容:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;映射内容的定义:
Hibernate映射文件由&lt;code&gt;&amp;lt;hibernate-mapping package=&amp;quot;JavaBean所在包的全路径&amp;quot;&amp;gt;&lt;/code&gt;节点定义映射内容并指定所对应的JavaBean的位置(也可以不在该节点中用package属性指定对应的JavaBean位置,而在该节点下的class节点中的name属性中指定).&lt;/li&gt;
&lt;li&gt;数据库和JavaBean的关联:
Hibernate映射文件中用&lt;code&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt;节点下的
&lt;code&gt;&amp;lt;class name=&amp;quot;JavaBean名称&amp;quot; table=&amp;quot;对应数据库中的表名&amp;quot;&amp;gt;&lt;/code&gt;节点指定数据库表和JavaBean的关联. ( 该节点的父节点中用package属性指定了JavaBean的包名时用)/全路径(该节点的父节点中没用package属性指定JavaBean的包名时用).&lt;/li&gt;
&lt;li&gt;主键映射:
在&lt;code&gt;&amp;lt;class &amp;gt;&lt;/code&gt;节点下用&lt;code&gt;&amp;lt;id name=&amp;quot;数据库中主键在JavaBean中的属性名称&amp;quot; column=&amp;quot;数据库中主键名&amp;quot; type=&amp;quot;string&amp;quot;&amp;gt;&lt;/code&gt;节点映射对应的主键,该节点必须有且只有一个(因为主键只有一个),同时必须放在&lt;code&gt;&amp;lt;property ...&amp;gt;&lt;/code&gt;节点前.&lt;/li&gt;
&lt;li&gt;普通字段映射:
在&lt;code&gt;&amp;lt;class ...&amp;gt;&lt;/code&gt;节点下用&lt;code&gt;&amp;lt;property name=&amp;quot;数据库中字段在JavaBean中的属性名称&amp;quot; column=&amp;quot;数据库中的字段名&amp;quot; type=&amp;quot;string&amp;quot;/&amp;gt;&lt;/code&gt;节点映射普通字段,该节点可有多个(一个字段用一个该节点来映射).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　Heibernate的主键映射方式：&lt;/p&gt;
&lt;p&gt;　　在&lt;code&gt;&amp;lt;id ...&amp;gt;节点下用&amp;lt;generator class=&amp;quot;映射方式&amp;quot;/&amp;gt;&lt;/code&gt;节点指定Hibernate向数据库插入数据时主键的生成方式.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assigned：应用程序自身对id赋值. 当设置&lt;code&gt;&amp;lt;generator class=&amp;quot;assigned&amp;quot;/&amp;gt;&lt;/code&gt;时，应用程序自身需要负责主键id的赋值，由外部程序负责生成(在session.save()之前为对象的主键设置值),无需Hibernate参与，一般应用在主键为自然主键时. 例如XH为主键时，当添加一个学生信息时，就需要程序员自己设置学号的值，这时就需要应用该id生成器.&lt;/li&gt;
&lt;li&gt;native：由数据库对id赋值. 当设置&lt;code&gt;&amp;lt;generator class=&amp;quot;native&amp;quot;/&amp;gt;&lt;/code&gt;时，数据库负责主键id的赋值，最常见的是int型的自增型主键. 例如，在SQLServer中建立表的id字段为identity，配置了该生成器，程序员就不用为该主键设置值，它会自动设置.&lt;/li&gt;
&lt;li&gt;identity：采用数据库提供的主键生成机制，为long/short/int型列生成唯一标识如SQL Server、MySQL中的自增主键生成机制.&lt;/li&gt;
&lt;li&gt;hilo：通过hi/lo算法实现的主键生成机制，需要额外的数据库表保存主键生成历史状态.&lt;/li&gt;
&lt;li&gt;seqhilo：与hi/lo类似，通过hi/lo算法实现的主键生成机制，只是主键历史状态保存在sequence中，适用于支持sequence的数据库，如Oracle.&lt;/li&gt;
&lt;li&gt;increment：主键按数值顺序递增. 此方式的实现机制为在当前应用实例中维持一个变量，以保存当前的最大值，之后每次需要生成主键的时候将此值加1作为主键. 这种方式可能产生的问题是：如果当前有多个实例访问同一个数据库，由于各个实例各自维护主键状态，不同实例可能生成同样的主键，从而造成主键重复异常. 因此，如果同一个数据库有多个实例访问，这种方式应该避免使用.&lt;/li&gt;
&lt;li&gt;sequence：采用数据库提供的sequence机制生成主键，用于用序列方式产生主键的数据库(如:Oracle、DB2等的Sequence),用于为long/short/int型列生成唯一标识,如:&lt;code&gt;&amp;lt;generator class=&amp;quot;sequence&amp;quot;&amp;gt;&amp;lt;param name=&amp;quot;sequence&amp;quot;&amp;gt;序列名&amp;lt;/param&amp;gt;&amp;lt;/generator&amp;gt;&lt;/code&gt;如Oracle sequence.&lt;/li&gt;
&lt;li&gt;uuid.hex：由Hibernate基于128位唯一值产生算法，根据当前设备IP、时间、JVM启动时间、内部自增量等4个参数生成十六进制数值（编码后长度为32位的字符串表示）作为主键. 即使是在多实例并发运行的情况下，这种算法在最大程度上保证了产生id的唯一性. 当然，重复的概率在理论上依然存在，只是概率比较小. 一般而言，利用uuid.hex方式生成主键将提供最好的数据插入性能和数据平台适应性.&lt;/li&gt;
&lt;li&gt;uuid.string：与uuid.hex类似，只是对生成的主键进行编码（长度为16位）. 在某些数据库中可能出现问题.&lt;/li&gt;
&lt;li&gt;foreign：使用外部表的字段作为主键. 该主键一般应用在表与表之间的关系上，会在后面的表对应关系上进一步讲解.&lt;/li&gt;
&lt;li&gt;select：Hibernate 3新引入的主键生成机制，主要针对遗留系统的改造工程.
由于常用的数据库，如SQLServer、MySQL等，都提供了易用的主键生成机制（如auto-increase字段），可以在数据库提供的主键生成机制上，采用native生成器来配置主键生成方式.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hibernate的核心类和接口&#34;&gt;Hibernate的核心类和接口&lt;/h2&gt;
&lt;h3 id=&#34;1configuration类&#34;&gt;1、Configuration类&lt;/h3&gt;
&lt;p&gt;它的作用是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;负责管理hibernate的配置信息；&lt;/li&gt;
&lt;li&gt;读取hibernate.cfg.xml文件；&lt;/li&gt;
&lt;li&gt;加载hibernate.cfg.xml配置文件中配置的驱动文件，url，用户名，密码，连接池；&lt;/li&gt;
&lt;li&gt;管理 *.hbm.xml对象关系文件.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2hibernatecfgxml文件&#34;&gt;2、hibernate.cfg.xml文件&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;该文件主要用于制定各个参数，值hibernate核心文件；&lt;/li&gt;
&lt;li&gt;默认放在src目录下，也可以在别的目录下；&lt;/li&gt;
&lt;li&gt;指定连接数据库的驱动、用户名、url、密码、连接池；&lt;/li&gt;
&lt;li&gt;制定对象关系映射文件位置；&lt;/li&gt;
&lt;li&gt;也可以使用hibernate,properties文件来替代该文件.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3sessionfactory-接口&#34;&gt;3、SessionFactory 接口&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可以缓存SQL语句或者数据（称为）.&lt;/li&gt;
&lt;li&gt;在应用程序化的时候创建，是一个重量级的类，一般用单例模式保证一个应用只需要一个SessionFactory实例.&lt;/li&gt;
&lt;li&gt;如果某个应用访问多个数据库，则要创建多个回话工厂实例，一般一个数据库一个会话工厂实例.&lt;/li&gt;
&lt;li&gt;通过SessionFactory接口可以获得Session实例.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;Configuration cf = new Configuration().configure();
SessionFactory sf = cf.buildSessionFactory();
Session s = sf.getCurrentSession();
//或者：Session  s = sf.openSession(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;31-opensession和getcurrentsession区别&#34;&gt;3.1 openSession()和getCurrentSession()区别&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;采用getCurrentSession()创建的session会绑定到当前线程中，而采用openSession()创建的Session则不会；&lt;/li&gt;
&lt;li&gt;采用getCurrentSession()创建的session在commit或rollback时会自动关闭，而采用openSession()创建的session必须手动关闭（建议不管是用哪个，最好都要手动关闭）；&lt;/li&gt;
&lt;li&gt;使用getCurrentSession()需要在hibernate.cfg.xml文件中加入如下配置：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;* 如果使用的是本地事务（jdbc事务：针对一个数据库的事务）*
&amp;lt;property name=&amp;quot;hibernate.current_session_context_class&amp;quot;&amp;gt;thread&amp;lt;/property&amp;gt;
* 如果使用的是全局事务（jta事务：卷数据库的事务）*
&amp;lt;property name=&amp;quot;hibernate.current_session_context_class&amp;quot;&amp;gt;jta&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;如何选择openSession()和getCurrentSession()&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;原则：&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要在同一线程中，保证使用同一个Session，则使用getCurrentSession().&lt;/li&gt;
&lt;li&gt;如果在一个线程中，需要使用不同的Session，则使用openSession().&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32get-vs-load&#34;&gt;3.2	get vs load&lt;/h4&gt;
&lt;p&gt;　可以使用&lt;code&gt;session.get(Student.class,i)/session.load(…)&lt;/code&gt;获取值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果查询不到数据，get会返回 null,但是不会报错, load如果查询不到数据，则报错ObjectNotFoundException&lt;/li&gt;
&lt;li&gt;使用get 去查询数据，(先到一级/二级)会立即向db发出查询请求(select &amp;hellip;), 如果你使用的是 load查询数据，(先到一级、二级))即使查询到对象，返回的是一个代理对象,如果后面没有使用查询结果，它不会真的向数据库发select ,当程序员使用查询结果的时候才真的发出select ,这个现象我们称为“懒加载”(lazy)&lt;/li&gt;
&lt;li&gt;通过修改配置文件，我们可以取消“懒加载”；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class  name=&amp;quot;Employee&amp;quot; lazy=&amp;quot;false&amp;quot; table=&amp;quot;employee&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;如何选择使用哪个: 如果你确定DB中有这个对象就用load(),不确定就用get()（这样效率高）.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4transaction事务接口&#34;&gt;4、Transaction（事务）接口&lt;/h3&gt;
&lt;p&gt;　　事务简单地说就是一组对数据库的操作集合，他们要么全部成功，要么全部失败，这个可以保证数据的一致性，事务具有原子性.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transaction是底层的事物实现中抽取出来的接口；&lt;/li&gt;
&lt;li&gt;可能是一个jdbc或者jta的事务，这样有利于hibernate在不同执行环境的移植；&lt;/li&gt;
&lt;li&gt;Hibernate要求显示的调用事务（如果仅仅是查询可以不调用）.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;//增加删除修改如果发生异常要tx.rollback()回滚
Session sess = factory.openSession();
Transaction tx;
try {
    tx = sess.beginTransaction();
    //do some work
    ...
    tx.commit();
}
catch (Exception e) {
    if (tx!=null) tx.rollback();
    throw e;
}
finally {
    sess.close();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5query-接口&#34;&gt;5、Query 接口&lt;/h3&gt;
&lt;p&gt;　　Query接口类型的对象可以对数据库操作，他可以使用Hql，Qbc，Qbe和原生SQL（native Sql）对数据库操作，官方推荐使用Hql语句.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//获取query引用[这里Employee不是表名，而是domain类名]，where后面的条件最好使用类下的属性名
Query query = session.createQuery(&amp;quot;from Employee where id=10&amp;quot;);
//通过list方法获取结果，这个list会自动封装成对应的domain对象
List&amp;lt;Employee&amp;gt; list = query.list();
for(Employee e:list)
	...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6criteria接口&#34;&gt;6、Criteria接口&lt;/h3&gt;
&lt;p&gt;　　什么是QBC：
QBC（Query By Criteria）按条件查询，通过Criteria构造查询条件，即通过调用Criteria的api实现各种查询.&lt;/p&gt;
&lt;p&gt;　　通过Criteria对象拼装 查询条件，调用Criteria的add方法拼接查询条件，最终hibernate通过criteria对象自动生成sql语句.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（了解）纯面向对象的检索方式&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Session session=HibernateUtil.getCurrentSession();
Transaction ts=null;		
try {			
  ts=session.beginTransaction();			
  Criteria cri = session.createCriteria(Employee.class).
  setMaxResults(2).addOrder(Order.desc(&amp;quot;id&amp;quot;) );//按照升序   
  List&amp;lt;Employee&amp;gt; list=cri.list();
  for(Employee e: list){
    System.out.println(e.getAaaid());
  }			
  ts.commit();			
} catch (Exception e) {			
  if(ts!=null){
    ts.rollback();
  }
  throw new RuntimeException(e.getMessage());
}finally{
  //关闭session
  if(session!=null&amp;amp;&amp;amp;session.isOpen()){
    session.close();
  }
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mysql记录总数查询&#34;&gt;MySQL记录总数查询&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;分页查询
&lt;img src=&#34;./4.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;li&gt;投影查询方法
&lt;img src=&#34;./5.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;li&gt;记录总数查询
&lt;img src=&#34;./6.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;detachedcriteria&#34;&gt;DetachedCriteria&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DetachedCriteria是什么？离线的Criteria.&lt;/li&gt;
&lt;li&gt;DetachedCriteria和Criteria区别：
&lt;ul&gt;
&lt;li&gt;Criteria创建方法：session.createCriteria&lt;/li&gt;
&lt;li&gt;DetachedCriteria创建方法：不需要session．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DetachedCriteria和Criteria相同点：实现查询条件拼装.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　建议使用DetachedCriteria，因为DetachedCriteria创建不需要session，在任何代码中通过DetachedCriteria 拼接查询条件.
&lt;img src=&#34;./7.png&#34; alt=&#34;png&#34;&gt;
这里的HibernateUtil为打开SessionFactory.&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;service&lt;/h2&gt;
&lt;p&gt;　　接收servlet传入查询条件，将查询条件拼装成DetachedCritriea.
&lt;img src=&#34;./8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public Long findCustomerCount(CstCustomer cstCustomer) {
  
  //创建DetachedCriteria
  DetachedCriteria detachedCriteria = DetachedCriteria.forClass(CstCustomer.class);
  
  //根据cstCustomer中数据动态拼接查询条件
  if(cstCustomer!=null){
    //拼接客户名称查询条件，使用like
    if(cstCustomer.getCustName()!=null &amp;amp;&amp;amp; !cstCustomer.getCustName().equals(&amp;quot;&amp;quot;)){
      detachedCriteria.add(Restrictions.like(&amp;quot;custName&amp;quot;, &amp;quot;%&amp;quot;+cstCustomer.getCustName()+&amp;quot;%&amp;quot;));
    }
    //拼接联系人查询条件
    if(cstCustomer.getCustLinkman()!=null &amp;amp;&amp;amp; !cstCustomer.getCustLinkman().equals(&amp;quot;&amp;quot;)){
      detachedCriteria.add(Restrictions.eq(&amp;quot;custLinkman&amp;quot;,cstCustomer.getCustLinkman()));
    }
  }
  
  CstCustomerDao cstCustomerDao = new CstCustomerDaoImpl();
  
  return cstCustomerDao.findCustomerCount(detachedCriteria);
}
@Override
public List&amp;lt;CstCustomer&amp;gt; findCustomerList(CstCustomer cstCustomer, int firstResult, int maxResults) {
  CstCustomerDao cstCustomerDao = new CstCustomerDaoImpl();
  //创建DetachedCriteria
  DetachedCriteria detachedCriteria = DetachedCriteria.forClass(CstCustomer.class);
  
  //拼接查询条件
  //根据cstCustomer中数据动态拼接查询条件
  if(cstCustomer!=null){
    //拼接客户名称查询条件，使用like
    if(cstCustomer.getCustName()!=null &amp;amp;&amp;amp; !cstCustomer.getCustName().equals(&amp;quot;&amp;quot;)){
      detachedCriteria.add(Restrictions.like(&amp;quot;custName&amp;quot;, &amp;quot;%&amp;quot;+cstCustomer.getCustName()+&amp;quot;%&amp;quot;));
    }
    //拼接联系人查询条件
    if(cstCustomer.getCustLinkman()!=null &amp;amp;&amp;amp; !cstCustomer.getCustLinkman().equals(&amp;quot;&amp;quot;)){
      detachedCriteria.add(Restrictions.eq(&amp;quot;custLinkman&amp;quot;,cstCustomer.getCustLinkman()));
    }
  }
  
  return cstCustomerDao.findCustomerList(detachedCriteria, firstResult, maxResults);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;log4j学习&#34;&gt;log4j学习&lt;/h2&gt;
&lt;p&gt;目标：学会使用log4j自定义输出日志信息.&lt;/p&gt;
&lt;p&gt;hibernate默认使用slf4j框架.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slf4j：提供了一套日志记录接口规范.&lt;/li&gt;
&lt;li&gt;log4j：日志接口的实现类.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　如果 使用log4j需要以classpath下添加log4j.properties文件.&lt;/p&gt;
&lt;p&gt;Log4j包括三个主要部件，分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;记录器（Loggers）：配置日志在哪记录.&lt;/li&gt;
&lt;li&gt;输出源（Appenders）：配置日志输出到哪里.
&lt;img src=&#34;./9.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;li&gt;布局（Layouts），指定日志输出格式
&lt;img src=&#34;./10.png&#34; alt=&#34;png&#34;&gt;
&lt;em&gt;记录器：&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;log4j.rootLogger=debug,A
log4j.appender.A=org.apache.log4j.ConsoleAppender
log4j.appender.A.layout=org.apache.log4j.PatternLayout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;日志级别&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;日志级别由低到高为：ALL &amp;lt; TRACE &amp;lt; DEBUG &amp;lt; INFO &amp;lt; WARN &amp;lt; ERROR &amp;lt; FATAL &amp;lt; OFF.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志级别越低输出日志越多，因为将系统调试信息设置级别低，系统的错误信息级别要高，设置成error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;根据log4j.properties中级别设置，将级别高的日志输出.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;在开发阶段设置为debug，在生产环境设置info或error.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;用myeclipse进行hibernate快速开发&#34;&gt;用MyEclipse进行hibernate快速开发&lt;/h2&gt;
&lt;p&gt;　　手动配置:&lt;/p&gt;
&lt;p&gt;db(table )-&amp;gt; 手写domain对象-&amp;gt;对象关系映射文件.&lt;/p&gt;
&lt;p&gt;现在我们希望用工具完成Domain对象和关系映射文件的工作.
&lt;img src=&#34;./11.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./12.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./13.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./14.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;错误信息&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;java.lang.AbstractMethodError: com.microsoft.jdbc.base.BaseDatabaseMetaData.supportsGetGeneratedKeys()Z&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;解决&lt;/b&gt;：microsoft提供的数据库驱动存在bug. 需要换一种驱动连接，使用jtds（&lt;a href=&#34;http://sourceforge.net/projects/jtds/files/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载地址&lt;/a&gt;）下载jtds1.2版，解压得到jtds-1.2.jar，引用到eclipse中项目目录下（去除原驱动引用），更改hibernate配置文件.&lt;/p&gt;
&lt;p&gt;原驱动连接配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;connection.driver_class&amp;quot;&amp;gt;com.microsoft.jdbc.sqlserver.SQLServerDriver&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;connection.url&amp;quot;&amp;gt;jdbc:microsoft:sqlserver://127.0.0.1:1433;DatabaseName=hibernate&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更改jtds连接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;connection.driver_class&amp;quot;&amp;gt;net.sourceforge.jtds.jdbc.Driver&amp;lt;/property&amp;gt;
&amp;lt;property name=&amp;quot;connection.url&amp;quot;&amp;gt;jdbc:jtds:sqlserver://127.0.0.1:1433;DatabaseName=hibernate&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题得到解决.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;补充&lt;/b&gt;：java代码调原驱动连接数据库是没有问题的，搭配hibernate会有此问题.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HibernateUtil工具类：
package com.haibao.util;

import javax.persistence.Entity;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

@Entity
final public class HibernateUtil {
  private static SessionFactory sessionFactory = null;
  private static ThreadLocal&amp;lt;Session&amp;gt; threadLocal = new ThreadLocal&amp;lt;Session&amp;gt;();

  private HibernateUtil(){};

  static{
    sessionFactory = new Configuration().configure().buildSessionFactory();
  }

  public static Session openSession(){
    return sessionFactory.openSession();
  }

  public static Session getCurrentSession(){
    Session session = threadLocal.get();
    if(session==null){
      session = sessionFactory.openSession();
      threadLocal.set(session);
    }
    return session;
  }
}
# 实现类：
package com.haibao.view;

import javax.persistence.Entity;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.haibao.bean.Person;
import com.haibao.util.HibernateUtil;

@Entity
public class Main {
  public static void main(String[] args) {

    Session session = null;
    Transaction ts = null;
    try {
      session = HibernateUtil.getCurrentSession();
      ts = session.beginTransaction();
      Person p = new Person();
      p.setName(&amp;quot;asd&amp;quot;);
      p.setSex(&amp;quot;男&amp;quot;);
      session.persist(p);
      ts.commit();
    } catch (Exception e) {
      if(ts!=null){
        ts.rollback();
      }
      throw new RuntimeException(e.getMessage());
    }finally{
      if(session!=null &amp;amp;&amp;amp; session.isOpen()){
        session.close();
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;hql语句hibernate-query-language&#34;&gt;HQL语句（Hibernate Query Language）&lt;/h2&gt;
&lt;p&gt;　　面向对象的查询语句，与SQL不同，HQl中的对象是区分大小写的（除了JAVA类和属性其他部分不区分大小写）；在HQL中查的是对象而不是表，并且支持多态；HQL主要通过Query来操作，Query的创建方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query query = session.createQuery(hql);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　现在使用hibernate工具，自动生成 domain 对象 和映射文件,如果我们的表有主外键的关系，则应当先映射主表，再映射从表.&lt;/p&gt;
&lt;h2 id=&#34;uniqueresult方法&#34;&gt;uniqueResult方法&lt;/h2&gt;
&lt;p&gt;　　如果我们检索一个对象，明确知道最多只有一个对象，则建议使用该方法，简单高效. 具体用法如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Student s=(Student) session.createQuery(&amp;quot;from Student where sid=&#39;20050003&#39;&amp;quot;).uniqueResult();
System.out.println(s.getSname());
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;distinct的用法&#34;&gt;distinct的用法&lt;/h2&gt;
&lt;p&gt;过滤重复的记录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//比如，显示所有学生的性别和年龄.
List list=session.createQuery(&amp;quot;select distinct sage,ssex from Student&amp;quot;).list();
  for(int i=0;i&amp;lt;list.size();i++){
    Object []  objs=(Object[]) list.get(i);
    System.out.println(objs[0].toString()+&amp;quot; &amp;quot;+objs[1].toString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;between-and&#34;&gt;between and..&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;List list=session.createQuery(&amp;quot;select distinct sage,ssex,sname from Student where sage between 20 and 22&amp;quot;).list();
  for(int i=0;i&amp;lt;list.size();i++){
    Object []  objs=(Object[]) list.get(i);
    System.out.println(objs[0].toString()+&amp;quot; &amp;quot;+objs[1].toString()+objs[2].toString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;innot-in&#34;&gt;in/not in&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//查询计算机系和外语系的学生信息
List&amp;lt;Student&amp;gt; list=session.createQuery(&amp;quot;from Student where sdept in (&#39;计算机系&#39;,&#39;外语系&#39;)&amp;quot;).list();
//取出1. for 增强
for(Student s:list){
  System.out.println(s.getSname()+&amp;quot; &amp;quot;+s.getSaddress()+&amp;quot; &amp;quot;+s.getSdept());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;group-by使用&#34;&gt;group by使用&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//显示各个系的学生的平均年龄
List&amp;lt;Object[]&amp;gt; list=session.createQuery(&amp;quot;select avg(sage),sdept from  Student group by sdept&amp;quot;).list();
  //取出1. for 增强
  for(Object[] obj:list){
    System.out.println(obj[0].toString()+&amp;quot; &amp;quot;+obj[1].toString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;having的使用&#34;&gt;having的使用&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//1.对分组查询后的结果，进行筛选:比如请显示人数大于3的系名称
//a. 查询各个系分别有多少学生.
List&amp;lt;Object[]&amp;gt; list=session.createQuery(&amp;quot;select count(*) as c1,sdept from  Student group by sdept having count(*)&amp;gt;3&amp;quot;).list();
//取出1. for 增强
for(Object[] obj:list){
  System.out.println(obj[0].toString()+&amp;quot; &amp;quot;+obj[1].toString());
}
//2查询女生少于200人的系
//a.查询各个系的女生有多个个
List&amp;lt;Object[]&amp;gt; list=session. createQuery(&amp;quot;select count(*) as c1,sdept from  Student where ssex=&#39;F&#39; group by sdept&amp;quot;).list();
//取出1. for 增强
for(Object[] obj:list){
  System.out.println(obj[0].toString()+&amp;quot; &amp;quot;+obj[1].toString());
}
//1.查询计算机系共多少人?-&amp;gt;如果我们返回的是一列数据
//这时我们的取法是直接取出list-&amp;gt;object 而不是 list-&amp;gt;Object[]
List&amp;lt;Object[]&amp;gt; list=session.createQuery(&amp;quot;select sage from  Student where sdept=&#39;计算机系&#39;&amp;quot;).list();
//取出1. for 增强
for(Object obj:list){
  System.out.println(obj.toString());
}
//3.查询选修11号课程的最高分和最低分.
List&amp;lt;Object[]&amp;gt; list=session.
createQuery(&amp;quot;select 11,max(grade),min(grade) from Studcourse where course.cid=11&amp;quot;).list();
//取出1. for 增强
for(Object[] obj:list){
  System.out.println(obj[0].toString()+&amp;quot; max=&amp;quot;+obj[1].toString()+&amp;quot; min=&amp;quot;+obj[2].toString());
}
//4.计算各个科目不及格的学生数量.
List&amp;lt;Object[]&amp;gt; list=session. createQuery(&amp;quot;select count(*),student.sdept from StudCourse where grade&amp;lt;60 group by student.sdept&amp;quot;).list();
//取出1. for 增强
for(Object[] obj:list){
  System.out.println(obj[0].toString()+&amp;quot; &amp;quot;+obj[1].toString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;分页显示对象&#34;&gt;分页显示对象：&lt;/h2&gt;
&lt;p&gt;　　根据用户输入的pageNow和pageSize现实对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query query = session.createQuery(hql);
query.setFirdtRequest(从第几条取//从0开始计算);
query.setMaxRequest(取出几条);
List list = query.list();
//list就是结果
query = session.createQuery(得到count(*)的查询语句);
int pageRow = (Integer)query.list().get(0).intValue();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;参数绑定&#34;&gt;参数绑定&lt;/h3&gt;
&lt;p&gt;　　可以用setParameter()方法来确定变量的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query query = session.createQuery(&amp;quot;from Student where sdept = :dept and sage&amp;gt;:age&amp;quot;);
query.setParameter(参数名，值);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用绑定参数的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读性好&lt;/li&gt;
&lt;li&gt;性能提高&lt;/li&gt;
&lt;li&gt;防止SQL注入（where 1=1）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提示：也可以使用setInteger().setString()…来指定值.&lt;/p&gt;
&lt;p&gt;另外：hql语句也可以用“?”来指定带绑定的参数.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Query query = session.createQuery(“from Student where sdept = ? and sage&amp;gt;?”);
query.setParameter(0，值);
query.setParameter(1，值);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;在映射文件中得到hql语句&#34;&gt;在映射文件中得到hql语句&lt;/h2&gt;
&lt;p&gt;　　可以从某些映射文件中得到hql语句，执行查询语句，这样可以更加灵活，在某种情况下，可以考虑使用. 比如：在Student.hbm.xml中.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;query name=”myquerytest”&amp;gt;
&amp;lt;![CDATA[select sname,ssex from Student where sage&amp;gt;22]]&amp;gt;
&amp;lt;/query&amp;gt;
如何使用：
List list = session.getNameQuery(“myQuerytest”).lise();
  System.out.println(list.size());
Iterator iterator = list.iterator();
while(iterator.hasNext()){
  Object obj[] = (Object[])iterator.next();
  System.out.println(“N=”+obj[0]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用子查询&#34;&gt;使用子查询&lt;/h2&gt;
&lt;h3 id=&#34;hibernate中的对象存在三种关系&#34;&gt;hibernate中的对象存在三种关系&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;one-to-one：身份证←→人&lt;/li&gt;
&lt;li&gt;one-to-many【many-to-one】部门←→员工&lt;/li&gt;
&lt;li&gt;many-to-many：老师←→学生（尽量化简）
实际开发中，如果出现了many-to-many关系，用将其装换成两个one-to-many或者many-to-one，这样程序好控制，同时不会冗余.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;criterial使用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//查询年龄大于10岁的学生 criteria
Session s=HibernateUtil.getCurrentSession();
Transaction tx=s.beginTransaction();
Criteria cri=s.createCriteria(Student.class);
//添加检索条件
cri.add(Restrictions.gt(&amp;quot;sage&amp;quot;, new Long(10)));
List&amp;lt;Student&amp;gt; list=cri.list();
for(Student s1: list){
  System.out.println(s1.getSname());
}
tx.commit();      
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;hibernate开发的三种方式中的&#34;&gt;hibernate开发的三种方式中的&lt;/h2&gt;
&lt;p&gt;　　编写domain object + 映射文件 &amp;mdash;&amp;mdash;&amp;gt; 创建出对应的数据库,这里我们说明如果要自动的创建出对应的数据库，需要做配置(hibernate.cfg.xml).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;hbm2ddl.auto&amp;quot;&amp;gt;create&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里有四个配置值: create , update , create-drop, validate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create:当我们的应用程序加载hibernate.cfg.xml[new Configuration().config();]就会根据映射文件，创建出数据库, 每次都会重新创建， 原来表中的数据就没有!!!&lt;/li&gt;
&lt;li&gt;update: 如果数据库中没有该表，则创建，如果有表，则看有没有变化，如果有变化，则更新.&lt;/li&gt;
&lt;li&gt;create-drop: 在显示关闭 sessionFactory时，将drop掉数据库的schema&lt;/li&gt;
&lt;li&gt;validate: 相当于每次插入数据之前都会验证数据库中的表结构和hbm文件的结构是否一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　在开发测试中，我们配置哪个都可以测试，但是如果项目发布后，最好自己配置一次，让对应的数据库生成，完后取消配置.&lt;/p&gt;
&lt;p&gt;domain对象的细节:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要一个无参的构造函数(用于hibernate反射该对象)&lt;/li&gt;
&lt;li&gt;应当有一个无业务逻辑的主键属性.&lt;/li&gt;
&lt;li&gt;给每个属性提供 get/set方法.&lt;/li&gt;
&lt;li&gt;在domian对象中的属性，只有配置到了对象映射文件xxx.hbm.xml后，才会被hiberante管理.&lt;/li&gt;
&lt;li&gt;属性一般是private范围&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对象关系映射文件的说明：&lt;/p&gt;
&lt;p&gt;　　对象关系文件中，有些属性是可以不配，hibernate会采用默认机制，比如&lt;code&gt;&amp;lt;class table=&amp;quot;?&amp;quot; &amp;gt;&lt;/code&gt; table 值不配，则以类的小写做表名；&lt;code&gt;&amp;lt;property type=&amp;quot;?&amp;quot;&amp;gt; &lt;/code&gt;type不配置，则hibernate会根据类的属性类型，选择一个适当的类型.&lt;/p&gt;
&lt;p&gt;Hibernate的三种状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;瞬时态：对象刚刚被创建，没有处于session的管理下，同时在数据库没有记录；&lt;/li&gt;
&lt;li&gt;持久态：既处于session的管理下，同时又被保存到数据库中（在数据库中有记录）；&lt;/li&gt;
&lt;li&gt;脱管/游离态：没有在session管理下，但在数据库中有记录.
&lt;img src=&#34;./15.png&#34; alt=&#34;png&#34;&gt;
&lt;b&gt;如何判断一个对象处于怎样的状态？&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要的依据是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看该对象是否处于session管理；&lt;/li&gt;
&lt;li&gt;看在数据库中有没有对应的记录.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;瞬时态: 没有session管理,同时数据库没有对应记录;new了一个对象，此时对象就是瞬时态;瞬时态对象和数据库记录没有对关系，和session没有关系.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持久态: 有session管理，同时在数据库中有记录; 瞬时态对象执行save变化持久层;持久态对象和数据库记录存在对应关系，和session有关系.修改对象的属性，直接将数据保证到数据库.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管态/游离态： 没有session管理，但是在数据库中有记录.当session关闭后，持久态对象变为托管态;	托管态对象和session没有关系，可能和数据库存在对象也可能不对应.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;托管态和瞬时态区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;托管态对象:	和session没有关联，可能和数据库存在对应关系，托管态对象中存在主键的值.&lt;/li&gt;
&lt;li&gt;持久态对象:	和session有状态&lt;/li&gt;
&lt;li&gt;瞬时态对象:	和session没有关联，和数据库记录没有对象关系，没有主键.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将瞬时态对象设置一个主键值，它就变为了托管态对象！！！&lt;/p&gt;
&lt;h3 id=&#34;saveorupdate方法测试&#34;&gt;saveOrUpdate方法测试：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;对瞬时态对象执行insert操作&lt;/li&gt;
&lt;li&gt;对持久态对象执行update操作&lt;/li&gt;
&lt;li&gt;对托管态对象执行update操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;懒加载&#34;&gt;懒加载:&lt;/h2&gt;
&lt;p&gt;　　简述: 当我们查询一个对象的时候，在默认情况下,返回的只是该对象的普通属性（直接属性，不需要通过外键等查询得到）,当用户去使用对象属性时，才会向数据库发出再一次的查询.这种现象我们称为 lazy现象.
解决方法可以这样:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;显示初始化代理对象： Hibernate.initized(student.getDepart())；与直接属性相连的对象.&lt;/li&gt;
&lt;li&gt;修改对象关系文件 lazy  改写 lazy=false（说明：不要再one-to-many的one中设置false，在many中设置可以提高效率）
以上两种方法 不能直接解决懒加载问题.&lt;/li&gt;
&lt;li&gt;通过过滤器(web项目) openSessionInView
添加一个过滤器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;懒加载详解&#34;&gt;懒加载详解：&lt;/h3&gt;
&lt;p&gt;　　懒加载（Load On Demand）是一种独特而又强大的数据获取方法，是指程序推迟访问数据库，这样可以保证有时候不必要的访问数据库，因为一次访问数据库是比较耗时的.
懒加载的几种情况：
首先明确一点：Domain Object是非finally的，才能实现懒加载. 解决方法：（因为要重写集合Set…）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明确初始化
在session还没有关闭时，访问一次xxx.getXxx()，强制访问数据库. 或者Hibernate.initialize(xxx)；&lt;/li&gt;
&lt;li&gt;openSessionView
这个往往需要过滤器配合使用(web程序)；&lt;/li&gt;
&lt;li&gt;在ssh中，可以实现在service层，标准方式解决懒加载；&lt;/li&gt;
&lt;li&gt;在映射文件中配置，lazy=false.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hibernate的关系映射&#34;&gt;Hibernate的关系映射：&lt;/h2&gt;
&lt;h3 id=&#34;mang-to-one&#34;&gt;mang-to-one：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 对于private Department depart就不能用property many-to-one 的name=“变量名” column name=“将来生成表的名” --&amp;gt;
&amp;lt;many-to-one name=&amp;quot;depart&amp;quot;&amp;gt;
  &amp;lt;column name=&amp;quot;depart_id&amp;quot;&amp;gt;&amp;lt;/column&amp;gt;
&amp;lt;/many-to-one&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./16.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;one-to-many&#34;&gt;one-to-many&lt;/h3&gt;
&lt;p&gt;需求：查询所有一号部门的学生.&lt;/p&gt;
&lt;p&gt;常规思维：&lt;code&gt;String hql = “from Student where dept.id=1”&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;还可以采用一对多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;现在Department中添加一个Set集合，并生成get/set方法；
private Set&lt;Student&gt; stu;//一个部门可以对应多个学生&lt;/li&gt;
&lt;li&gt;在Department.hbm.xml文件中添加&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;set name=“集合对象属性名”&amp;gt;
  &amp;lt;key column=“外键名”&amp;gt;
  &amp;lt;one-to-many class=“集合存放的类名”&amp;gt;
&amp;lt;/set&amp;gt;
&amp;lt;!-- 配置onne-to-many关系 --&amp;gt;
  &amp;lt;set name=“stus” cascade=“联级”&amp;gt;
  &amp;lt;key column=“depart_id”&amp;gt;
  &amp;lt;one-to-many class=“Student”&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;one-to-one&#34;&gt;one-to-one&lt;/h3&gt;
&lt;p&gt;一对一有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于主键的一对一:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;主键关联映射：其中一个表的主键依赖于另一张表的主键而建立起的一对一的关系，这两张互相关联的表的主键一致.&lt;/li&gt;
&lt;li&gt;必须为one-to-one元素增加constrained=&amp;ldquo;true&amp;quot;属性，表明该类的主键由关联类生成.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;【要点】&lt;/b&gt;Person - IdCard&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./17.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./18.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;id name=”id”&amp;gt;
&amp;lt;generator class=”foreign”&amp;gt;
&amp;lt;param name=”property”&amp;gt;idCard&amp;lt;/param&amp;gt;
&amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;
&amp;lt;one-to-one name=”idCard” constrained=”true”/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;基于外键的一对一
和&lt;many-to-one&gt;N-1相同，多添加一个unique=&amp;ldquo;true&amp;rdquo; 属性，用以表示N的一端必须唯一，加了唯一约束，即成了1-1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;【举例】&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;one-to-one name=”idCard” property-ref=“person”/&amp;gt;             
&amp;lt;many-to-one name=”person” unique=”true” /&amp;gt;
# property-ref：用于指定关联类的一个属性，这个属性将会和本外键相对应
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;many-to-many&#34;&gt;many-to-many&lt;/h3&gt;
&lt;p&gt;　　学生←→课程   顾客←→商品
student:one-to-mangy
&lt;img src=&#34;./19.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Student{
  private Integer id;
  private String name;
  private Set&amp;lt;StuCourse&amp;gt; stuCourses;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从stucourse的角度看是 many-to-one
&lt;img src=&#34;./20.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class StuCourse{
  private Integer id;
  private Student student;
  private Course course;
  private Integer grade;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;courset:one-to-mangy
&lt;img src=&#34;./21.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Course{
  private Integer id;
  private String name;
  private Set&amp;lt;StuCourse&amp;gt; stuCourses;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cascadeemployee-departmentbbs项目等&#34;&gt;cascade（Employee-Department、bbs项目等）&lt;/h3&gt;
&lt;p&gt;所谓级联操作就是说，当进行某个操作（添加/删除/修改…），就有hibernate自动完成. 例如：Department←→Employee当某个部门被删除后，员工也不会存在. 常用的cascade：none、all、save-update、delete、lock、refresh、evict、replic、persist、merge、delete-orphan(one-to-many). 一般对many-to-many，many-to-one不设置联级，在one-to-many和one-to-one中设置联级.&lt;/p&gt;
&lt;h3 id=&#34;在jsp页面中获取项目名称&#34;&gt;在JSP页面中获取项目名称：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%=this.getServletContext().getContextPath()%&amp;gt; //java片段
${ pageContext.request.contextPath } //通过标签
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;缓存&#34;&gt;缓存&lt;/h2&gt;
&lt;p&gt;　　缓存的作用主要用来提高性能，可以简单的理解成一个Map；使缓存涉及到三个操作：把数据放入缓存、从缓存获取数据、删除缓存中的无效数据.&lt;/p&gt;
&lt;h3 id=&#34;一级缓存session级共享&#34;&gt;一级缓存（Session级共享）&lt;/h3&gt;
&lt;p&gt;一级缓存是 session对象中一块内存.
在同一个session中，查询一个对象是不会发出sql语句.
session关闭一级缓存不存在了，再查询对象，会发出sql.&lt;/p&gt;
&lt;p&gt;save，update，saveOrUpdate，load，get，list，iterator，lock这些方法都会将对象放在一级缓存中，一级缓存不能控制缓存的数量，所以要注意将大批量操作数据时可能造成内存溢出；可以用evict(清楚一个对象)，clear(清除所有对象)方法清除缓存的内容.
用HashMap来模拟一个Session缓存，加深对缓存的深入.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package com.hsp.view;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
public class MyCache {
  //使用map来模拟缓存
  static Map&amp;lt;Integer,Student&amp;gt; maps=new HashMap&amp;lt;Integer,Student&amp;gt;();
  public static void main(String[] args) {
    // TODO Auto-generated method stub

    getStudent(1);
    getStudent(1);
    getStudent(1);
    getStudent(1);
    getStudent(3);
    getStudent(3);
  }

  public static Student getStudent(Integer id){  //s.get()
    //先到缓存去
    if(maps.containsKey(id)){
      //在缓存有
      System.out.println(&amp;quot;从缓存取出&amp;quot;);
      return maps.get(id);
    }else{
      System.out.println(&amp;quot;从数据库中取&amp;quot;);
      //到数据库取
      Student stu=MyDB.getStudentFromDB(id);
      //放入缓存
      maps.put(id, stu);
      return stu;
    }
  }
}

//我的数据库
class MyDB{	
  static List&amp;lt;Student&amp;gt; lists=new  ArrayList&amp;lt;Student&amp;gt;();
  //初始化数据库,假设有三个学生
  static{
    Student s1=new Student();
    s1.setId(1);
    s1.setName(&amp;quot;aaa&amp;quot;);
    Student s2=new Student();
    s2.setId(2);
    s2.setName(&amp;quot;bbb&amp;quot;);
    Student s3=new Student();
    s3.setId(3);
    s3.setName(&amp;quot;ccc&amp;quot;);
    lists.add(s1);
    lists.add(s2);
    lists.add(s3);
  }
  public static Student getStudentFromDB(Integer id){
    for(Student s: lists){
      if(s.getId().equals(id)){
        return s;
      }
    }
    return null;// 在数据库中没有.
  }
}

class Student{
  private Integer id;
  private String name;
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二级缓存sessionfactory级共享&#34;&gt;二级缓存（SessionFactory级共享）&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;为什么需要二级缓存?&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　因为一级缓存有限(生命周期短),所以我们需要二级缓存(SessionFactory缓存)来弥补这个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要配置&lt;/li&gt;
&lt;li&gt;二级缓存是交给第三方去处理,常见的Hashtable , OSCache , EHCache&lt;/li&gt;
&lt;li&gt;二级缓存的原理；&lt;/li&gt;
&lt;li&gt;二级缓存的对象可能放在内存，也可能放在磁盘.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用OsCache来演示二级缓存的使用.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置二级缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对配置说明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;hbm2ddl.auto&amp;quot;&amp;gt;update&amp;lt;/property&amp;gt;
  &amp;lt;!-- 启动二级缓存 --&amp;gt;
  &amp;lt;property name=&amp;quot;cache.use_second_level_cache&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt;
  &amp;lt;!-- 指定使用哪种二级缓存 --&amp;gt;
  &amp;lt;property name=&amp;quot;cache.provider_class&amp;quot;&amp;gt;org.hibernate.cache.OSCacheProvider&amp;lt;/property&amp;gt;
  &amp;lt;mapping resource=&amp;quot;com/hsp/domain/Department.hbm.xml&amp;quot; /&amp;gt;
  &amp;lt;mapping resource=&amp;quot;com/hsp/domain/Student.hbm.xml&amp;quot; /&amp;gt;
  &amp;lt;!-- 指定哪个domain启用二级缓存 
  特别说明二级缓存策略:
  1. read-only
  2. read-write
  3. nonstrict-read-write
  4. transcational
  --&amp;gt;
  &amp;lt;class-cache class=&amp;quot;com.hsp.domain.Student&amp;quot; usage=&amp;quot;read-write&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可以把oscache.properties文件放在 src目录下，这样你可以指定放入二级缓存的对象capacity 大小. 默认1000.&lt;/li&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;// TODO Auto-generated method stub
//通过获取一个sesion,让hibernate框架运行(config-&amp;gt;加载hibernate.cfg.xml)
Session s=null;
Transaction tx=null;		
try {
//我们使用基础模板来讲解.
s=HibernateUtil.openSession();
tx=s.beginTransaction();			
//查询45号学生		
Student stu1=(Student) s.get(Student.class, 45);//45-&amp;gt;一级缓存		System.out.println(stu1.getName());
tx.commit();			
} catch (Exception e) {
  e.printStackTrace();
  if(tx!=null){
    tx.rollback();
  }
}finally{			
  if(s!=null &amp;amp;&amp;amp; s.isOpen()){
    s.close();
  }
}		
System.out.println(&amp;quot;*********************************&amp;quot;);
try {
  //我们使用基础模板来讲解.
  s=HibernateUtil.openSession();
  tx=s.beginTransaction();			
  //查询45号学生		
  Student stu1=(Student) s.get(Student.class, 45);	
  System.out.println(stu1.getName());			
  Student stu3=(Student) s.get(Student.class, 46);	
  System.out.println(stu3.getName());
    tx.commit();			
} catch (Exception e) {
  e.printStackTrace();
  if(tx!=null){
    tx.rollback();
  }
}finally{
  
  if(s!=null &amp;amp;&amp;amp; s.isOpen()){
    s.close();
  }
}

//完成一个统计，统计的信息在Sessfactory
//SessionFactory对象.
Statistics statistics= HibernateUtil.getSessionFactory().getStatistics();
System.out.println(statistics);
System.out.println(&amp;quot;放入&amp;quot;+statistics.getSecondLevelCachePutCount());
System.out.println(&amp;quot;命中&amp;quot;+statistics.getSecondLevelCacheHitCount());
System.out.println(&amp;quot;错过&amp;quot;+statistics.getSecondLevelCacheMissCount());
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;在配置了二级缓存后，请大家要注意可以通过 Statistics,查看你的配置命中率高不高.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事务管理&#34;&gt;事务管理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在hibernate设置隔离级别
在hibernate.cfg.xml中设置隔离级别：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 事务隔离级别 --&amp;gt;
&amp;lt;property name=&amp;quot;hibernate.connection.isolation&amp;quot;&amp;gt;4&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;事务控制在哪里进行？&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;service(){
  session.beginTransaction;//开启事务
  try{
  调用dao方法1
  调用dao方法2
  .....
    session.getTransaction().commit();//提交事务
  }catch(Exception ex){
    session.getTransaction().rollback();//回滚事务
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;session如何管理&#34;&gt;session如何管理&lt;/h3&gt;
&lt;p&gt;　　在service接口中，每个dao请求中使用同一个session即使用同一个数据库连接，保证多个dao调用在一个事务中. 在service执行开始处开启一个新session，将session和当前线程绑定，在每个dao调用中获取当前线程绑定的session，实现每个dao获取到的session是同一个session.
&lt;img src=&#34;./23.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;主键增长策略&#34;&gt;主键增长策略&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;increment:
自增，每次增长1, 适用于所有数据库. 但是不要使用在多进程,主键类型是数值型 select max(id) from Student&lt;/li&gt;
&lt;li&gt;identity :
自增，每次增长1, 适用于支持identity的数据(mysql,sql server), 主键类型是数值&lt;/li&gt;
&lt;li&gt;sequence&lt;/li&gt;
&lt;li&gt;native:会根据数据类型来选择，使用identity,sequence ,hilo select hibernate_sequence.nextval from dual.主键类型是数值long , short ,int&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;id name=&amp;quot;id&amp;quot; type=&amp;quot;java.lang.Integer&amp;quot;&amp;gt; 
&amp;lt;generator class=&amp;quot;native&amp;quot;/&amp;gt;
&amp;lt;/id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;hilo:hilo标识符生成器由Hibernate按照一种high/low算法生成标识符.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;用法:&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;id name=”id” type=”java.lang.Integer” column=”ID”&amp;gt;
&amp;lt;generator class=”hilo”&amp;gt;
  &amp;lt;param name=”table”&amp;gt;my_hi_value&amp;lt;/param&amp;gt;
  &amp;lt;param name=”column”&amp;gt;next_value&amp;lt;/param&amp;gt;
&amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;uuid:
会根据uuid算法，生成128-bit的字串
主键属性类型不能是数值型，而是字串型&lt;/li&gt;
&lt;li&gt;assigned:
用户自己设置主键值，所以主键属性类型可以是数值，字串&lt;/li&gt;
&lt;li&gt;映射复合主键&lt;/li&gt;
&lt;li&gt;foreign:
在one-to-one的关系中，有另一张表的主键(Person) 来决定 自己主键/外键( IdCard)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;给出一个简单原则:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对oracle [主键是int/long/short 建议使用 sequence] 主键是String 使用uuid或者assinged&lt;/li&gt;
&lt;li&gt;针对 mysql [主键是 int/long/short 建议使用increment/assigend ,如果是字串 UUId/assigned]&lt;/li&gt;
&lt;li&gt;针对 sql server [主键是 int/long/short 建议使用identity/native/assinged ,如果主键是字串，使用uuid/assigned ]&lt;/li&gt;
&lt;li&gt;one-to-one 又是基于主键的则使用foreign&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hibernate不适合的场景&#34;&gt;Hibernate不适合的场景&lt;/h2&gt;
&lt;p&gt;　　不适合OLAP（On-Line-Analytical Processing联机分析处理），已查询分析数据为主流的系统，适合OLTP（On-line transaction Processing联机事务处理）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;OLTP&lt;/th&gt;
&lt;th&gt;OLAP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用户&lt;/td&gt;
&lt;td&gt;操作人员，底层管理人员&lt;/td&gt;
&lt;td&gt;决策人员，高级管理人员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能&lt;/td&gt;
&lt;td&gt;日常操作管理&lt;/td&gt;
&lt;td&gt;分析决策&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DB设计&lt;/td&gt;
&lt;td&gt;面向应用&lt;/td&gt;
&lt;td&gt;面向主题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;当前的，最新的，细节的，二维的分立的&lt;/td&gt;
&lt;td&gt;历史的、聚集的、多维的集成的，统一的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存取&lt;/td&gt;
&lt;td&gt;读/写数十条记录&lt;/td&gt;
&lt;td&gt;读/写上百万 条记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;工作单位&lt;/td&gt;
&lt;td&gt;简单事务&lt;/td&gt;
&lt;td&gt;复杂查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户&lt;/td&gt;
&lt;td&gt;上千个&lt;/td&gt;
&lt;td&gt;上百个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DB大小&lt;/td&gt;
&lt;td&gt;100M-GB&lt;/td&gt;
&lt;td&gt;100GB-TB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Struts2学习笔记</title>
      <link>https://CoMath21.github.io/post/1-struts2/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/1-struts2/</guid>
      <description>&lt;h2 id=&#34;1什么是struts2&#34;&gt;1、什么是Struts2:&lt;/h2&gt;
&lt;p&gt;　　Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互. Struts2是WebWork2基础发展而来的.&lt;/p&gt;
&lt;h2 id=&#34;2struts2优点&#34;&gt;2、Struts2优点：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Struts2的应用可以不依赖于Servlet API（request,response）和struts API；这种设计属于无侵入式设计.&lt;/li&gt;
&lt;li&gt;Struts2提供了拦截器,利用拦截器可以进行AOP编程,实现如权限拦截等功能.&lt;/li&gt;
&lt;li&gt;Struts2提供类型转换器,可以把特殊类型参数转换程序要的类型.&lt;/li&gt;
&lt;li&gt;Struts2提供支持多种表现层技术,如JSP,freeMarker,Velocity等.&lt;/li&gt;
&lt;li&gt;Struts2的输入校验可以对指定的方法进行校验.&lt;/li&gt;
&lt;li&gt;Struts2提供了全局范围、包范围、和Action范围的国际换资源文件管理实现.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3搭建struts2开发环境&#34;&gt;3、搭建Struts2开发环境&lt;/h2&gt;
&lt;h3 id=&#34;31开发struts2应用依赖的jar文件&#34;&gt;3.1、开发Struts2应用依赖的jar文件&lt;/h3&gt;
&lt;p&gt;开发Struts2应用需要依赖的jar文件在解压目录的lib文件夹下,不同的应用需要的JAR包是不同的. 开发Struts2程序最少需要的JAR.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;struts2-core-2.x.x.jar ：Struts2框架的核心类库.&lt;/li&gt;
&lt;li&gt;xwork-2.x.x jar ：XWork类库,Struts2在其上构建.&lt;/li&gt;
&lt;li&gt;ognl-2.6.x.jar ：对象图导航语言(Object Graph Navigation Language),struts2框架通过其读写对象的属性.&lt;/li&gt;
&lt;li&gt;freemarker-2.3.x.jar ：Struts 2的UI标签的模板使用FreeMarker编写.&lt;/li&gt;
&lt;li&gt;commons-logging-1.1.x jar ：ASF出品的日志包,Struts2框架使用这个日志包来支持Log4J和JDK1.4+的日志记录.&lt;/li&gt;
&lt;li&gt;commons-fileupload-12 .1.jar ：文件上传组件,2 .1.6版本后必须加入此文件.
&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32搭建struts2开发环境&#34;&gt;3.2、搭建Struts2开发环境&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;找到Struts2需要的几个jar包；&lt;/li&gt;
&lt;li&gt;编写配置struts2的配置文件：src下创建struts.xml文件；&lt;/li&gt;
&lt;li&gt;在web.xml中加入struts2 MVC框架启动配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;filter&amp;gt;
  &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
  &amp;lt;filter-class&amp;gt;org.apache.struts2.dispatcher.ng.filter.
StrutsPrepareAndExecuteFilter&amp;lt;/filter-class&amp;gt;
  &amp;lt;/filter&amp;gt;

  &amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/filter-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4strutsxml配置中的包介绍&#34;&gt;4、Struts.xml配置中的包介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配置包时必须指定name属性：
该属性名字可以任意,但是必须唯一,主要作用在于：如果其他包要继承该包就必须通过该属性(name属性)进行引用.&lt;/li&gt;
&lt;li&gt;包的namespace属性：
用于定义该包的命名空间,命名空间作为访问该包下Action路径的一部分. 如果不配置,默认为””(空字符串).&lt;/li&gt;
&lt;li&gt;继承方法extends：
通常每个包都应该继承struts-default包,因为Struts2很多核心的功能都是拦截器来实现的. struts-default定义了这些拦截器和Result类型；struts-default包是在struts2-core-2.jar文件中的struts-default.xml中定义的,struts-default.xml也是Struts2默认配置文件. Struts2每次都会自动加载struts-default.xml文件.&lt;br&gt;
&lt;img src=&#34;./3.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./4.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./5.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41action配置中的各种默认值&#34;&gt;4.1、Action配置中的各种默认值&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果没有为action指定class,默认是ActionSupport.&lt;/li&gt;
&lt;li&gt;如果没有为action指定method,默认执行action中的execute()方法.&lt;/li&gt;
&lt;li&gt;如果没有指定action的name属性,默认值为success.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;action中的result的各种转发类型&#34;&gt;Action中的result的各种转发类型&lt;/h4&gt;
&lt;p&gt;　　Struts2常用的结果类型有：dispathcher(默认值)、redirect(重定向)、redirectAction、plainText
在result中可以使用${属性名}表达式访问action中的属性,表达式里的属性名对应action中的属性.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dispathcher(默认值)：内部请求转发&lt;/li&gt;
&lt;li&gt;redirect(重定向)：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// 格式：
&amp;lt;result type=&amp;quot;redirect&amp;quot;&amp;gt;/hello.jsp&amp;lt;/result&amp;gt;
// 如果重定向需要带参数,则用：
&amp;lt;result type=&amp;quot;redirect&amp;quot;&amp;gt;/hello.jsp?id=${id}&amp;lt;/result&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时,需要在对应的Action下有对应的变量,并且提供get属性.
注意：重定向不能访问WEB-INF下的文件.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redirectAction(在其他*Action下)：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// 格式：
&amp;lt;action name=&amp;quot; redirectActionName&amp;quot;&amp;gt;
&amp;lt;result type=&amp;quot; redirectAction&amp;quot;&amp;gt;重定向的name&amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
// 如果不不在同一个包下需配置项
&amp;lt;result type=&amp;quot; redirectAction&amp;quot;&amp;gt;
	&amp;lt;param name=&amp;quot; actionName&amp;quot;&amp;gt;xxx&amp;lt;/param&amp;gt;
&amp;lt;param name=&amp;quot; namespace&amp;quot;&amp;gt;/…/…&amp;lt;/param&amp;gt;
&amp;lt;/result&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;补充&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;中文字符编码、解码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编码&lt;code&gt;(java.net.URLEncoder)：URLEncoder.encode(&amp;quot;字符串&amp;quot;,&amp;quot;UTF-8&amp;quot;)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;解码&lt;code&gt;(java.net.URLDecoder)：URLDecoder.encode(new String (request.getParameter(&amp;quot;属性名&amp;quot;).getBytes(&amp;quot;ISO8859-1&amp;quot;),&amp;quot;UTF-8&amp;quot;),&amp;quot;UTF-8&amp;quot;)&lt;/code&gt;;
JSP文件中可以用&lt;code&gt;$(param.属性名)&lt;/code&gt;访问Action中的属性(会乱码)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　plaintext(显示原始文件内容的重定向)：例如某功能需要查看源代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;action name=&amp;quot; plainText&amp;quot;&amp;gt;
	&amp;lt;result type=&amp;quot; plainText&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;注意：当该JSP文件存在中文的时候,会乱码！
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要加入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;param name=&amp;quot; location&amp;quot;&amp;gt;/xxx.jsp&amp;lt;/param&amp;gt;&amp;lt;!—定向的路径--&amp;gt;
&amp;lt;param name=&amp;quot; charSet&amp;quot;&amp;gt;UTF-8&amp;lt;/param&amp;gt;&amp;lt;!--指定读取文件的编码--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附：Struts2的全视图
单个包下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;package name=&amp;quot; xxx&amp;quot; namespace=&amp;quot; /…/…&amp;quot; extends=&amp;quot; struts-default&amp;quot;&amp;gt;
&amp;lt;global-results&amp;gt;	
&amp;lt;result type=&amp;quot; mess…&amp;quot;&amp;gt;/…/…&amp;lt;/result&amp;gt;
&amp;lt;/global-results&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全局：(在一个包中写,然后其他包继承该包)&lt;/p&gt;
&lt;h3 id=&#34;42为action属性注入值&#34;&gt;4.2、为Action属性注入值&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;package name=&amp;quot; xxx&amp;quot; namespace=&amp;quot; /…/…&amp;quot; extends=&amp;quot; struts-default&amp;quot;&amp;gt;
&amp;lt;action name=&amp;quot; list&amp;quot; class=&amp;quot;com.haibao.HelloWorldAction&amp;quot; method=&amp;quot;execute&amp;quot;&amp;gt;
  &amp;lt;param name=&amp;quot;path &amp;quot;&amp;gt;/image&amp;lt;/param&amp;gt;
  &amp;lt;result name=&amp;quot;success &amp;quot;&amp;gt;/xxx.jsp &amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&amp;lt;/package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附：在HelloWorldAction下必须存在“path”属性的get方法 ,访问xxx.jsp得到的是“/image”&lt;/p&gt;
&lt;h2 id=&#34;5指定struts2处理的请求后缀&#34;&gt;5、指定struts2处理的请求后缀&lt;/h2&gt;
&lt;h3 id=&#34;51默认后缀及修改&#34;&gt;5.1、默认后缀及修改&lt;/h3&gt;
&lt;p&gt;默认后缀：.action
默认后缀可以通过常量&amp;quot;struts.action.extension&amp;quot;进行修改&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;constant name=&amp;quot; struts.action.extension&amp;quot; value=&amp;quot;do&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果用户指定多个请求后缀,则多个后缀之间以英文逗号( , )隔开&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;constant name=&amp;quot; struts.action.extension&amp;quot; value=&amp;quot;do,action&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;52常用的常量&#34;&gt;5.2、常用的常量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--指定默认编码集,作用于HTTPServletRequest的setCharacterEncoding方法和freemarker、velocity的输出--&amp;gt;
&amp;lt;constant name=&amp;quot; struts.i18n.encoding&amp;quot; value=&amp;quot;UTF-8&amp;quot;/&amp;gt;
&amp;lt;!-- 该属性指定需要的struts2处理的后缀请求如果用户指定多个请求后缀,则多个后缀之间以英文逗号(,)隔开--&amp;gt;
&amp;lt;constant name=&amp;quot; struts.action.extension&amp;quot; value=&amp;quot;do,action&amp;quot;/&amp;gt;
&amp;lt;!-- 设置浏览器是否缓存静态内容. 默认值为true(生产环境下使用)--&amp;gt;
&amp;lt;constant name=&amp;quot;struts.serve.static.browserCache&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;
&amp;lt;!-- 当struts的配置文件修改后,系统是否自动重新加载该文件,默认false(生产环境下使用) --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.configuration.xml.reload&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;!-- 开发模式下使用,这样可以打印出更详细的错误信息 --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.devMode&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; 
&amp;lt;!-- 默认的视图主题 --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.ui.theme&amp;quot; value=&amp;quot;smple&amp;quot;/&amp;gt; 
&amp;lt;!-- 与Spring集成时,指定有Spring负责action对象的创建 --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.objectFactory&amp;quot; value=&amp;quot;spring&amp;quot;/&amp;gt;
&amp;lt;!-- 该属性设置Struts2是否支持动态方法调用,默认为true --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.enable.DynamicMethodlnvocation&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;!-- 上传文件的大小限制 --&amp;gt;
&amp;lt;constant name=&amp;quot; struts.multipart.maxSize&amp;quot; value=&amp;quot;10701096&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;53常量的定义&#34;&gt;5.3、常量的定义&lt;/h3&gt;
&lt;p&gt;常量可以在struts.xml或struts.propreties中配置,建议在struts.xml中配置
在struts.xml文件中配置常量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;struts&amp;gt;
  &amp;lt;constant name=&amp;quot;struts.action.extension&amp;quot; value=&amp;quot;do&amp;quot;&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在struts.propreties中配置常量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struts.action.extension=do
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;常量可以在下面多个配置文件中定义,加载常量的搜索顺序为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struts-default.xml&lt;/li&gt;
&lt;li&gt;struts-plugin.xml&lt;/li&gt;
&lt;li&gt;struts.xml&lt;/li&gt;
&lt;li&gt;struts.propreties&lt;/li&gt;
&lt;li&gt;web.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个文件中配置了同一个常量,则后一个文件中配置的常量值会覆盖前面文件中配置的常量值.&lt;/p&gt;
&lt;h2 id=&#34;6struts2的处理流程&#34;&gt;6、Struts2的处理流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./7.png&#34; alt=&#34;png&#34;&gt;
　　StrutsPrepareAndExecuteFilter是Struts的核心控制器,他负责拦截由&lt;url-pattern&gt;/*&lt;/url-patternt&gt;指定的所有用户请求,当用户请求到达时,给Filter会过滤用户的请求. 默认情况下,如果用户请求路径不带后缀或者以.action结尾,这时请求被转入Struts2框架处理,否则Struts2框架将略过该请求的处理. 当请求转入Struts2框架处理时会经过一系列的拦截器,然后到Action. 与Struts1不同,Struts2对用户的每一次请求都会创建一个Action,所以Struts2中的Action是线程安全的.&lt;/p&gt;
&lt;p&gt;为应用指定多个Struts配置文件&lt;/p&gt;
&lt;p&gt;　　在大部分应用里,随着应用规模的增加,系统中Action的数量也会大大增加,导致struts.xml配置文件变得臃肿,为了避免struts.xml文件过于庞大,提高struts.xml文件的可读性,可以将一个struts.xml配置文件分解成多个配置文件,然后在struts.xml文件中包含其他配置文件(通过&lt;include&gt;元素指定多个配置文件)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;struts&amp;gt;
  &amp;lt;include file=&amp;quot;struts-user.xml&amp;quot;/&amp;gt;
  &amp;lt;include file=&amp;quot;struts-order.xml&amp;quot;/&amp;gt;
&amp;lt;/struts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7动态方法调用&#34;&gt;7、动态方法调用：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;动态方法调用DMI（动态指定）,可以在url地址中动态指定action执行哪个方法,可以通过action+!+方法名. (注：只要Action对象中有这个方法,并且返回类型为String就可以调用,这样struts.xml文件配置文件就可以不需要配置method属性)：&lt;/li&gt;
&lt;li&gt;设置Struts2是否支持动态方法调用,如果没有这一行要加上去,要不然会报错误,如果你加上这一行,但是你把value值改成false,也会报错！
&lt;img src=&#34;./8.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8使用通配符定义action&#34;&gt;8、使用通配符定义action&lt;/h2&gt;
&lt;p&gt;　　其中*匹配所有,在method=&amp;quot;{数字}&amp;ldquo;中用{数字}表示匹配第几个*,其中跳转页面的命名也是根据第一个*的值进行的.
&lt;img src=&#34;./9.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;9请求参数的接收&#34;&gt;9、请求参数的接收&lt;/h2&gt;
&lt;p&gt;　　在Action中必须存在该属性并且存在该属性的set方法,这样在url中赋值才能接收到get方法直接在url后面加入&lt;code&gt;“?属性名=属性值&amp;amp;属性名=属性值”&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;91基本类型&#34;&gt;9.1、基本类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;92复合类型&#34;&gt;9.2、复合类型&lt;/h3&gt;
&lt;p&gt;（为了减少复杂度,尽量用复合类型）
&lt;img src=&#34;./11.png&#34; alt=&#34;png&#34;&gt;
原理：Struts2首先通过反射技术调用Person的默认构造器创建product对象,然后再通过反射技术调用product中与请求参数同名的属性的setter方法来获取请求参数的值.&lt;/p&gt;
&lt;h2 id=&#34;10关于struts216接收中文请求参数乱码问题&#34;&gt;10、关于Struts2.1.6接收中文请求参数乱码问题&lt;/h2&gt;
&lt;p&gt;　　Struts2.1.6版本中存在一个Bug,即接收到的中文请求参数为乱码（以post方法提交）,原因是struts2.1.6在获取并使用了请求参数后才调用HttpServletRequest的setCharacterEncoding()方法进行编码设置,导致应用使用的就是乱码请求参数.&lt;/p&gt;
&lt;p&gt;解决方法：新建一个Filter,把这个Filter放置在Struts2的Filter之前,然后在doFilter()方法里添加一下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void doFilter(…){
  HttpServletRequest req = (HttpServletRequest)request;
  req.setCharacterEncoding(&amp;quot;UTF-8&amp;quot;);
  filterchain.doFilter(request,response);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11自定义类型转换器&#34;&gt;11、自定义类型转换器&lt;/h2&gt;
&lt;h3 id=&#34;111局部类型转换器&#34;&gt;11.1、局部类型转换器：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先需要定义类并继承DefaultTypeConverter类;&lt;/li&gt;
&lt;li&gt;在Action类所在的包下放置ActionClassName-conversion.properties文件；其中ActionClassName是Action的类名,后面的-conversion.properties是固定写法;&lt;/li&gt;
&lt;li&gt;在.properties文件中内容为：属性名称=类型转换器的全类名.
以出生年月为例：
&lt;img src=&#34;./12.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;112全局类型转换器&#34;&gt;11.2、全局类型转换器：&lt;/h3&gt;
&lt;p&gt;在src(根目录)下放置xwork-conversion.properties.
文件中的内容为：
带转换的类型=类型转换器的全类名
例如：java.util.Date=com.haibao.…
11.3、访问或添加属性
仅仅是为了访问添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public String scope() throws Exception{//方法
  ActionContext ctx = ActionContext.getContext();
  ctx.getApplication().put(&amp;quot;app&amp;quot;,&amp;quot;应用范围&amp;quot;);//往ServletContext里放入app
  ctx.getSession().put(&amp;quot;ses&amp;quot;,&amp;quot;session范围&amp;quot;)；//往ServletContext里放入ses
  ctx.put(&amp;quot;req&amp;quot;,&amp;quot;request范围&amp;quot;)；//往ServletContext里放入req
  return &amp;quot;scope&amp;quot;;//
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JSP中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  ${applicationScope.app}&amp;lt;br&amp;gt;
  ${sessionScope.ses}&amp;lt;br&amp;gt;
  ${requestScope.ses}&amp;lt;br&amp;gt;
&amp;lt;body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要是想得到对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 方法一：通过ServletActionContext类直接实现
public String rsa() throws Exception{//方法
  HttpServletRequest request = ServletActionContext.getRequest();
  ServletContext servletContext = ServletActionContext.getServletContest();
  request.setAttribute(&amp;quot;req&amp;quot;,&amp;quot;应用范围&amp;quot;);
  request.getSession().setAttribute(&amp;quot;ses&amp;quot;,&amp;quot;session范围&amp;quot;)；
  servletContext.setAttribute(&amp;quot;app&amp;quot;,&amp;quot;应用范围&amp;quot;);
  return &amp;quot;scope&amp;quot;;//
}
// 方法二：通过指定接口,有Struts框架运行时注入
public class HelloWorldAction implements ServletRequestAware,
ServletResponseAware,ServletContextAware{
  private HttpServletRequest requesr;
  private ServletContextResponse Context;
  private HttpServletResponse response;

public void setServletRequest(HttoServletRequest req){
  this.request = req;
}
public void setServletResponse(){

}
public void setServletContext(){

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;12文件上传&#34;&gt;12、文件上传&lt;/h2&gt;
&lt;h3 id=&#34;121单文件上传&#34;&gt;12.1、单文件上传&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;步骤&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一步：在WEB-INF/lib下加入commons-fileupload-1.2.1.jar（2.1版本之后必须添加）、commons-io.jar（需要用到里面的工具类）&lt;/li&gt;
&lt;li&gt;第二步：把form表的enctype设置为：“multipart/form-data”&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;${pageContext.request.contextPath}/uploadAction_execute.action&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    文件：&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;image&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;上传&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;第三步：在Action类中添加以下属性&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;public class UploadAction {
  private File image;// 文件名称
  // 如果想得到上传文件的名称,则定义文件名. 格式：文件名称+FileName
  private String imageFileName;// 得到上传文件名称
  // 如果想得到文件的类型,则定义文件名. 格式：文件名称+ContextType
  private String imageContextType;
  public String getImageFileName() {
    return imageFileName;
  }
  public void setImageFileName(String imageFileName) {
    this.imageFileName = imageFileName;
  }
  // 提供与字段名称相符的get、set属性,以便得到上传的文件
  public File getImage() {
    return image;
  }
  public void setImage(File image) {
    this.image = image;
  }
  public String execute() throws Exception {
    // 在该方法下进行保存
    String realPath = ServletActionContext.getServletContext().getRealPath(
        &amp;quot;/images&amp;quot;);// 得到根目录
    System.out.println(&amp;quot;*****&amp;quot; + realPath + &amp;quot;****&amp;quot;);
    if (image != null) {
      File savefile = new File(new File(realPath), imageFileName);// 保存到...
      if (!savefile.getParentFile().exists())
        savefile.getParentFile().mkdirs();
      FileUtils.copyFile(image, savefile);// 调用commons-io.jar下的工具类Copy文件到指定位置
      ActionContext.getContext().put(&amp;quot;message&amp;quot;, &amp;quot;上传成功&amp;quot;);// 返回信息
    }
    return &amp;quot;success&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./13.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./14.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;122多文件上传&#34;&gt;12.2、多文件上传&lt;/h3&gt;
&lt;p&gt;　　只需要将单文件上传的第三步：在Action类中添加以下属性中把单个文件变成数组.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class moreUploadAction {
  private File[] image;// 文件名称
  // 如果想得到上传文件的名称,则定义文件名. 格式：文件名称+FileName
  private String[] imageFileName;// 得到上传文件名称
  // 如果想得到文件的类型,则定义文件名. 格式：文件名称+ContextType
  private String[] imageContextType;
  public File[] getImage() {
    return image;
  }
  public void setImage(File[] image) {
    this.image = image;
  }
  public String[] getImageFileName() {
    return imageFileName;
  }
  public void setImageFileName(String[] imageFileName) {
    this.imageFileName = imageFileName;
  }
  public String[] getImageContextType() {
    return imageContextType;
  }
  public void setImageContextType(String[] imageContextType) {
    this.imageContextType = imageContextType;
  }
  public String execute() throws Exception {
    // 在该方法下进行保存
    String realPath = ServletActionContext.getServletContext().getRealPath(
        &amp;quot;/images&amp;quot;);// 得到根目录
    System.out.println(&amp;quot;*****&amp;quot; + realPath + &amp;quot;****&amp;quot;);
    if (image != null) {
      File savedir = new File(realPath);
      if (!savedir.exists())
        savedir.mkdirs();
      for (int i = 0; i &amp;lt; image.length; i++) {
        File savefile = new File(savedir, imageFileName[i]);// 保存到...
        FileUtils.copyFile(image[i], savefile);// 调用commons-io.jar下的工具类Copy文件到指定位置
      }
  ActionContext.getContext().put(&amp;quot;message&amp;quot;, &amp;quot;上传成功&amp;quot;);// 返回信息
    }
    return &amp;quot;success&amp;quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13自定义拦截器&#34;&gt;13、自定义拦截器&lt;/h2&gt;
&lt;p&gt;需求：对于登陆的用户可以访问Action中的所有方法,而没有登录的用户则不可以访问任何方法.&lt;/p&gt;
&lt;p&gt;方法：添加自定义拦截器. 实现&lt;code&gt;com.opensymphony.xwork2.interceptor.interceptor&lt;/code&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public String intercept(ActionInvocation arg0) throws Exception {
  // 当拦截到Action时执行该方法
  // 得到session中存在的对象
  Object user = ActionContext.getContext()
.getSession().get(&amp;quot;user&amp;quot;);
  // 如果希望被拦截的的方法执行,调用arg0.invoke();
  if (user != null)
    return arg0.invoke();//如果User不为null,代表合法用户,允许访问方法
  // 返回的是Action中对应方法的返回值String
  ActionContext.getContext().put(&amp;quot;message&amp;quot;, &amp;quot;请先登录&amp;quot;);
  return &amp;quot;success&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在struts.xml中定义拦截器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- 定义拦截器 --&amp;gt;
&amp;lt;interceptors&amp;gt;
  &amp;lt;!-- 自定义拦截器 --&amp;gt;
  &amp;lt;interceptor name=&amp;quot;permission&amp;quot; class=&amp;quot;com.haibao.interceptor.PermissionInterceptor&amp;quot; /&amp;gt;
  &amp;lt;!-- 定义拦截器栈  目的：使得Struts2自带的拦截器有效 --&amp;gt;
  &amp;lt;interceptor-stack name=&amp;quot;permissionStack&amp;quot;&amp;gt;
    &amp;lt;interceptor-ref name=&amp;quot;defaultStack&amp;quot;/&amp;gt;
    &amp;lt;interceptor-ref name=&amp;quot;permission&amp;quot;/&amp;gt;
  &amp;lt;/interceptor-stack&amp;gt;
&amp;lt;/interceptors&amp;gt;
&amp;lt;action name=&amp;quot;loginAction_*&amp;quot; class=&amp;quot;com.haibao.action.LoginAction&amp;quot;	method=&amp;quot;{1}&amp;quot;&amp;gt;
&amp;lt;result name=&amp;quot;success&amp;quot;&amp;gt;/WEB-INF/page/LoginPage.jsp&amp;lt;/result&amp;gt;
&amp;lt;interceptor-ref name=&amp;quot;permissionStack&amp;quot;/&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：
如果直接在action中定义使用拦截器,则不会在使用Struts自带拦截器！这样Struts2的优势就没有了，所以引入拦截器栈的概念，在拦截器栈中要把Struts的拦截器写在前面，以保证web项目会首先执行Struts再带的拦截器.
如果想所有的程序都是用自定义的拦截器，可以使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;default-interceptor-ref name=&amp;quot;permissionStack&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;效果演示：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;直接访问会被拦截：
&lt;img src=&#34;./15.png&#34; alt=&#34;png&#34;&gt;
登录后访问
&lt;img src=&#34;./16.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;14输入校验&#34;&gt;14、输入校验&lt;/h2&gt;
&lt;p&gt;　　Struts2中可以实现对action的所有方法进行校验或者对action的指定方法进项校验，实现方法有两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用手工编写代码实现&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对所有方法进行校验
　　重写validate()方法实现，validate()方法会校验action中所有的与execute方法签名相同的方法. 当某个数据校验失败时，调用addFieldError()方法往系统的fieldErrors添加校验失败信息，（为了使用addFieldError()方法，action可以继承ActionSupport），如果系统的fieldError包含失败信息，struts2会将请求转发到名为input的result. 在input视图中可以通过&amp;lt;s:fielderror/&amp;gt;显示失败信息. 需要引入标签&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ taglab url=&amp;quot;/struts-tags&amp;quot; prefix=&amp;quot;s&amp;quot;%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;public void validate(){
  if(this.mobile==null||&amp;quot;&amp;quot;.equals(this.mobile.trim())){
    this.addFieldError(&amp;quot;username&amp;quot;,&amp;quot;用户名不能为空&amp;quot;);
  }
  if(this.mobile==null||&amp;quot;&amp;quot;.equals(this.mobile.trim())){
    this.addFieldError(&amp;quot;mobile&amp;quot;,&amp;quot;手机号不能为空&amp;quot;);
  }else{
      if(!Pattern.compile(&amp;quot;^1[358]\\d{9}&amp;quot;).matcher(this.mobile.trim()).matches()){
      this.addFieldError(&amp;quot;mobile&amp;quot;,&amp;quot;手机号格式不正确&amp;quot;);
    }
  }		
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;对指定方法进行校验&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　重写validateXxx()方法实现，validate()方法会校验action中所有的与execute方法签名相同的方法. 当某个数据校验失败时，调用addFieldError()方法往系统的fieldErrors添加校验失败信息，（为了使用addFieldError()方法，action可以继承ActionSupport），如果系统的fieldError包含失败信息，struts2会将请求转发到名为input的result. 在input视图中可以通过&amp;lt;s:fielderror/&amp;gt;显示失败信息. 需要引入标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%@ taglab url=&amp;quot;/struts-tags&amp;quot; prefix=&amp;quot;s&amp;quot;%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;public void validateUpdata(){
  if(this.mobile==null||&amp;quot;&amp;quot;.equals(this.mobile.trim())){
    this.addFieldError(&amp;quot;username&amp;quot;,&amp;quot;用户名不能为空&amp;quot;);
  }
  if(this.mobile==null||&amp;quot;&amp;quot;.equals(this.mobile.trim())){
    this.addFieldError(&amp;quot;mobile&amp;quot;,&amp;quot;手机号不能为空&amp;quot;);
  }else{
      if(!Patten.compile(&amp;quot;^1[358]\\d{9}&amp;quot;).matcher(this.mobile.trim()).matches()){
      this.addFieldError(&amp;quot;mobile&amp;quot;,&amp;quot;手机号格式不正确&amp;quot;);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;输入校验的流程
&lt;ul&gt;
&lt;li&gt;类型转换器队请求参数执行类型转换，并把转换后的赋值给action中的属性.&lt;/li&gt;
&lt;li&gt;如果在执行类型转换的过程中出现异常，系统会将异常信息保存到ActionContext，conversionError拦截器将异常信息封装到fieldErrors里. 不管类型转换是否出现异常，都会进入第3步.&lt;/li&gt;
&lt;li&gt;系统通过反射技术先调用action中的validateXxx()方法，Xxx为方法名.&lt;/li&gt;
&lt;li&gt;在调用action中的validate()方法.&lt;/li&gt;
&lt;li&gt;经过上面4步，如果系统中的fieldErrors存在错误信息（即存放错误信息的集合的size&amp;gt;0），系统自动将请求转发至名称为input视图. 如果系统中的fieldErrors没有任何错误信息，系统将执行action中的处理方法.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;基于XML配置方式实现&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　&lt;b&gt;a) 对所有方法进行校验&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　在Action相同包下创建ActionClassName-validation.xml文件.
&lt;img src=&#34;./17.png&#34; alt=&#34;png&#34;&gt;
Struts2 的验证规则大概有以下数种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;required:必填校验器，要求field的值不能为null&lt;/li&gt;
&lt;li&gt;requiredstring:必填字符串校验器，要求field的值不能为null,并且长度大于0，默  认情况下会对字符串去掉前后空格&lt;/li&gt;
&lt;li&gt;int:整数校验器，要求field的值必须在整数范围内，min指定最小值，max指定最大值&lt;/li&gt;
&lt;li&gt;double:双精度浮点数校验器&lt;/li&gt;
&lt;li&gt;date:日期校验器&lt;/li&gt;
&lt;li&gt;expression:表达式校验器&lt;/li&gt;
&lt;li&gt;fieldexpression:字段表达式校验器&lt;/li&gt;
&lt;li&gt;email:电子邮件校验器，要求如果field的值非空，则必须是合法的邮件地址&lt;/li&gt;
&lt;li&gt;url:网址校验器，要求如果field的值非空，则必须是合法的url地址&lt;/li&gt;
&lt;li&gt;visitor:Visitor校验器，用于校验action的复合属性，它指定一个校验文件用于校验复合属性中的属性&lt;/li&gt;
&lt;li&gt;conversion:转换校验器&lt;/li&gt;
&lt;li&gt;stringlength:字符串长度校验器&lt;/li&gt;
&lt;li&gt;regex:正则表达式校验器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常用的验证规则&#34;&gt;常用的验证规则：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;必填检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;username&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;required&amp;quot;&amp;gt;
&amp;lt;message&amp;gt;指定检验失败的提示信息&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;必填字符串检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;username&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;requiredstring&amp;quot;&amp;gt;
&amp;lt;param name=&amp;quot;trim&amp;quot;&amp;gt;true&amp;lt;/param&amp;gt;
&amp;lt;message&amp;gt;指定检验失败的提示信息&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;整数检验器/浮点检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;age&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;int&amp;quot;&amp;gt;
&amp;lt;param name=&amp;quot;min&amp;quot;&amp;gt;1&amp;lt;/param&amp;gt;
&amp;lt;param name=&amp;quot;max&amp;quot;&amp;gt;150&amp;lt;/param&amp;gt;
&amp;lt;message&amp;gt;年纪必须在1到150之间&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;日期检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;birth&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;date&amp;quot;&amp;gt;
&amp;lt;param name=&amp;quot;min&amp;quot;&amp;gt;1900-01-01&amp;lt;/param&amp;gt;
&amp;lt;param name=&amp;quot;max&amp;quot;&amp;gt;2050-02-21&amp;lt;/param&amp;gt;
&amp;lt;message key=&amp;quot;birth.range&amp;quot;/&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;字段表达式检验器(要求指定字段满足一个逻辑表达式)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;re_pass&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;fieldexpression&amp;quot;&amp;gt;
&amp;lt;!--指定逻辑表达式 --&amp;gt;
&amp;lt;param name=&amp;quot;expression&amp;quot;&amp;gt; (pass eq re_pass)&amp;lt;/param&amp;gt;
&amp;lt;message&amp;gt;密码必须和确认密码相等&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;邮件地址校验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;email&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;email&amp;quot;&amp;gt;
&amp;lt;message&amp;gt;你的电子邮件地址必须是一个有效的电邮地址&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;网址检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;url&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;url&amp;quot;&amp;gt;
&amp;lt;message&amp;gt;你的主页地址必须是一个有效的网址&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;字符串长度检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;user&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;stringlength&amp;quot;&amp;gt;
&amp;lt;param name=&amp;quot;minlength&amp;quot;&amp;gt;4&amp;lt;/param&amp;gt;
&amp;lt;param name=&amp;quot;maxlength&amp;quot;&amp;gt;20&amp;lt;/param&amp;gt;
&amp;lt;message&amp;gt;你的用户名长度必须在4到20之间&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;正则表达式检验&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;validators&amp;gt;
&amp;lt;field name=&amp;quot;user&amp;quot;&amp;gt;
&amp;lt;field-validator type=&amp;quot;regex&amp;quot;&amp;gt;
&amp;lt;param name=&amp;quot;regex&amp;quot;&amp;gt;&amp;lt;![CDATA[(\w{4,25})]]&amp;gt;&amp;lt;/param&amp;gt;
&amp;lt;message&amp;gt;您输入的用户名只能是字母和数组，且长度必须在4到25之间&amp;lt;/message&amp;gt;
&amp;lt;/field-validator&amp;gt;
&amp;lt;/field&amp;gt;
&amp;lt;/validators
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　&lt;b&gt;b) 对指定方法进行校验&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;　　取名更改为ActionClassName-ActionName-validation.xml&lt;/p&gt;
&lt;p&gt;&lt;b&gt;注意&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当action同时提供了两个校验方法，则按照“所有方法”，“指定方法”的顺序汇总后执行；如果后面的文件包含前面文件的方法发生冲突，则只是用后面文件中的校验规则.&lt;/li&gt;
&lt;li&gt;当action继承了另外一个action，父类action的校验文件会先被搜索到.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;15国际化&#34;&gt;15、国际化&lt;/h2&gt;
&lt;p&gt;准备资源文件，资源文件的命名格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;baseName_language_country.propeties
baseName_language.propeties
baseName.propeties
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中baseName是资源文件的基本名，可以自定义，但language和country必须是java支持的语言和国家.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国：baseName_zh_CN.properties&lt;/li&gt;
&lt;li&gt;美国：baseName_en_US.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有使用开发工具，对于中文的属性文件，应该使用JDK提供的native2ascii命令把文件转换为Unicode编码的文件. 命令使用如下：
native2ascii 源文件.properties 目标文件.properties&lt;/p&gt;
&lt;h3 id=&#34;151配置全局资源与输出国际化信息&#34;&gt;15.1、配置全局资源与输出国际化信息&lt;/h3&gt;
&lt;p&gt;当准备好资源文件之后，可以在struts.xml中通过struts.custom.i18n.resources常量把资源文件定义为全局变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;constant name=&amp;quot;struts.custom.i18n.resources&amp;quot; value=&amp;quot;baseName&amp;quot;/ &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中baseName为资源的基本名.
之后就可以在页面或者action中访问国际化信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在JSP页面中使用&lt;code&gt;&amp;lt;s:text name=&amp;quot;&amp;quot;/&amp;gt;&lt;/code&gt;标签输出国际化信息；&lt;code&gt;&amp;lt;s:text name=&amp;quot;user&amp;quot;/&amp;gt;&lt;/code&gt;,name为资源文件中的Key.&lt;/li&gt;
&lt;li&gt;在Action类中，可以继承ActionSupport，使用getText()方法得到国际化信息，该方法的第一个参数用于指定资源文件中的Key.&lt;/li&gt;
&lt;li&gt;在表单标签中，通过Key属性指定资源文件中的Key，如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:textfield name=&amp;quot;realname&amp;quot; key=&amp;quot;use&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;输出带占位符的国际化信息&#34;&gt;输出带占位符的国际化信息&lt;/h4&gt;
&lt;p&gt;资源文件中的内容如下：
welcome={0},你好{1}&lt;/p&gt;
&lt;h3 id=&#34;152jsp页面中输出占位符的国际化信息&#34;&gt;15.2、JSP页面中输出占位符的国际化信息&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:text name=&amp;quot;welcome&amp;quot;&amp;gt;
  &amp;lt;s:param&amp;gt;熊大&amp;lt;/s:param&amp;gt;
  &amp;lt;s:param&amp;gt;学习&amp;lt;/s:param&amp;gt;
&amp;lt;s:text/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　　在Action类中获取带占位符的国际化信息，可以使用getText(String Key，String[] args)或者getText(String Key，List args)方法&lt;/p&gt;
&lt;h3 id=&#34;153包范围资源文件&#34;&gt;15.3、包范围资源文件&lt;/h3&gt;
&lt;p&gt;　　在一个大型应用中，整个应用有大量的内容需要实现国际化，如果把国际化的内容放置在全局资源属性文件中，显然会导致资源文件变的庞大、臃肿、不便于维护，支个时候可以针对不同末班，使用包范围来组织国际化文件.&lt;/p&gt;
&lt;p&gt;方法：在java的包下放置package_language_country.properties资源文件，package为固定写法，处于该包及子包下的action都可以访问该资源，当查到指定Key的消息时，系统会先从package资源文件查找，当不存在对应的Key时，才会从常量struts.custom.i18n.resources指定的资源文件中寻找.&lt;/p&gt;
&lt;h3 id=&#34;154action范围资源文件&#34;&gt;15.4、Action范围资源文件&lt;/h3&gt;
&lt;p&gt;　　在Action类所在的路径，放置ActionClassName_languaage_country.properties资源文件，ActionClassName为action类的简单名称；当指定key的消息时，系统会先从ActionClassName_languaage_country.properties资源文件中查找.&lt;/p&gt;
&lt;h3 id=&#34;155jsp中直接访问某个资源文件&#34;&gt;15.5、JSP中直接访问某个资源文件&lt;/h3&gt;
&lt;p&gt;struts2提供了&amp;lt;s:i18n&amp;gt;标签，使用&amp;lt;s:i18n&amp;gt;标签可以在类路径下直接从某个资源文件中获取国际化数据，无需任何配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:i18n name=&amp;quot;realname&amp;quot;&amp;gt;
  &amp;lt;s:text name=&amp;quot;realname&amp;quot;/&amp;gt;
&amp;lt;s:i18n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;realname为要访问的资源文件的基本名&lt;/p&gt;
&lt;p&gt;如果要访问的资源文件在类路径的某个包下，可以访问：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:i18n name=&amp;quot;com/haibao/action/package&amp;quot;&amp;gt;
  &amp;lt;s:text name=&amp;quot;realname&amp;quot;&amp;gt;
    &amp;lt;s:param&amp;gt;熊大&amp;lt;/s:param&amp;gt;
  &amp;lt;/s:text/&amp;gt;
&amp;lt;s:i18n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面访问com.haibao.action包下基本名为&lt;font color=red&gt;package&lt;/font&gt;的资源文件.&lt;/p&gt;
&lt;h2 id=&#34;16ognl表达式语言&#34;&gt;16、OGNL表达式语言&lt;/h2&gt;
&lt;p&gt;　　OGNL是Object Graphic Navigation Language（对象图导航语言）的缩写，是一个开源的项目. Struts2框架采用OGNL作为默认的表达式语言.&lt;/p&gt;
&lt;p&gt;相对于EL表达式，OGNL提供了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持对象方法调用：如xxx.sayHello()；&lt;/li&gt;
&lt;li&gt;支持类静态方法调用和值访问，表达式的格式为@[类全名（包括路径）]@[方法名|值名]
例如：&lt;code&gt;@java.lang.String@format(&#39;foo %s&#39;，bar)&lt;/code&gt;
或者 &lt;code&gt;@com.haibao.Constant@APP_NAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;操作集合对象.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　Ognl有一个上下文（Context）概念，它实现了了java.utils.Map接口，Struts2中说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上下文（Context）的实现为ActionContext. 当Struts2接受一个请求时，会迅速创建ActionContext，ValueStack，action. 然后把action存进ValueStack，所以action的实例变量可以被OGNL访问.&lt;/li&gt;
&lt;li&gt;访问上下文（Context）中的对象需要使用#符号标注命名空间. 如&lt;code&gt;#application、#session&lt;/code&gt;. 如：&lt;code&gt;#application[&#39;userName&#39;]==#application.userName//获得application中userName值. &lt;/code&gt;
（#session对象、#request对象、#paramete对象、attr对象—按照page—request—session—application顺序访问其属性）.&lt;/li&gt;
&lt;li&gt;OGNL设定了一个跟对象（root）对象，在Struts2中根对象就是ValueStack（值栈）. 如果访问根对象中的属性，则可以省略#命名空间，直接访问该对象的属性即可. 如：${foo}//获得栈值中某个对象的foo属性.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：Struts2中，OGNL表达式需要配合Struts标签使用. 如：&lt;code&gt;&amp;lt;s:property value=&amp;quot;name&amp;quot;&amp;gt;&lt;/code&gt;；使用EL表达式能够访问valueStack中对象的属性，原因是：Struts2对HTTPServletRequest作了进一步的封装.&lt;/p&gt;
&lt;h2 id=&#34;17采用ognl表达式创建listmap集合对象&#34;&gt;17、采用OGNL表达式创建List/Map集合对象&lt;/h2&gt;
&lt;h3 id=&#34;171试用如下直接生成一个list对象&#34;&gt;17.1、试用如下直接生成一个List对象：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:set name=&amp;quot;list&amp;quot; value=&amp;quot;{&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;}&amp;quot;/&amp;gt;
&amp;lt;s:iterator value=&amp;quot;#list&amp;quot;&amp;gt;&amp;lt;!-- 迭代器 --&amp;gt;
	&amp;lt;s:property/&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;/s:iterator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./18.png&#34; alt=&#34;png&#34;&gt;
　　Set标签用于将某个值放入指定范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scope：指定变量被放置的范围，该属性可以接受application、session、request、page或action. 如果没有设置该属性，则默认放置在OGNL Context中.&lt;/li&gt;
&lt;li&gt;value：赋给变量的值，如果没有设置该属性，则将ValueStack栈顶的值赋值给变量.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成一个Map对象：(Key&amp;ndash;Value)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:set name=&amp;quot;foobar&amp;quot; value=&amp;quot;#{&#39;k1&#39;: &#39;value1&#39;,&#39;k2&#39;:&#39;value2&#39;}&amp;quot;/&amp;gt;
&amp;lt;s:iterator value=&amp;quot;# foobar &amp;quot;&amp;gt;&amp;lt;!-- 迭代器 --&amp;gt;
  &amp;lt;s:property value=&amp;quot;key&amp;quot;/&amp;gt;=&amp;lt;s:property value=&amp;quot;value&amp;quot;/&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;/s:iterator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;java 迭代方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(Map.Entry&amp;lt;String,Integer&amp;gt;entry:maps.entrySet){
  System.out.println(entry.getKey()+&amp;quot;=&amp;quot;+entry.getValue());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;18采用ognl表达式判断对象是否存在于集合中&#34;&gt;18、采用OGNL表达式判断对象是否存在于集合中&lt;/h2&gt;
&lt;p&gt;使用in和not in
in表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:if test=&amp;quot;foor&amp;quot; in {&#39;foo&#39;, &#39;bar&#39;}&amp;gt;
在
&amp;lt;/s:if&amp;gt;
&amp;lt;s:else&amp;gt;
  不在
&amp;lt;/s:else&amp;gt;
not in 表达式
&amp;lt;s:if test=&amp;quot;foor&amp;quot; not in {&#39;foo&#39;,&#39;bar&#39;}&amp;gt;
  不在
&amp;lt;/s:if&amp;gt;
&amp;lt;s:else&amp;gt;
  在
&amp;lt;/s:else&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附加：
除了in和not in之外OGNL还允许使用某个规则获得集合对象的子集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;?:获得所有符合逻辑的元素.&lt;/li&gt;
&lt;li&gt;^:获得符合逻辑的第一个元素.&lt;/li&gt;
&lt;li&gt;$:获得符合逻辑的最后一个元素.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:iterator value=&amp;quot;books.{?#this.price}35}&amp;quot;	/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;19常用标签&#34;&gt;19、常用标签&lt;/h2&gt;
&lt;h3 id=&#34;191propert标签&#34;&gt;19.1、propert标签：&lt;/h3&gt;
&lt;p&gt;用于输出指定值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:set name=&amp;quot;name&amp;quot; value=&amp;quot;kk&amp;quot;/&amp;gt;
&amp;lt;s:property value=&amp;quot;#name&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;default:可选属性，如果需要输出指定的属性值为null，则显示该属性指定的值.&lt;/li&gt;
&lt;li&gt;value：可选属性，指定需要输出的属性值，如果没有指定该属性，则默认输出ValueStack栈顶的值.&lt;/li&gt;
&lt;li&gt;escape：可选属性，指定是否格式化HTML代码.&lt;/li&gt;
&lt;li&gt;id：可选属性，指定还元素的标识.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;192iterator标签&#34;&gt;19.2、iterator标签&lt;/h3&gt;
&lt;p&gt;iterator标签用于对集合进行迭代，治理的集合包含List、Set和数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:set name=&amp;quot;list&amp;quot; value=&amp;quot;{&#39;foo&#39;,&#39;bar&#39;}&amp;quot;/&amp;gt;
&amp;lt;s:iterator value=&amp;quot;#list&amp;quot; status=&amp;quot;st&amp;quot;&amp;gt;
&amp;lt;s:color=&amp;lt;s:if test=&amp;quot;#st.odd&amp;quot;&amp;gt;red&amp;lt;/s:if&amp;gt;&amp;lt;s:else&amp;gt;blue&amp;lt;/s:else&amp;gt;&amp;gt;
  &amp;lt;s:property/&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;/s:iterator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;value:可选属性，指定被迭代的集合，如果没有设置该属性，则使用ValueStack栈顶的集合&lt;/li&gt;
&lt;li&gt;id:可选属性，指定即合理元素的id. （过时）&lt;/li&gt;
&lt;li&gt;status：该属性指定迭代时的IteratorStatus实例. 该实例包含以下几个方法：
&lt;ul&gt;
&lt;li&gt;int getCount()，返回当前迭代了几个元素&lt;/li&gt;
&lt;li&gt;int getIndex()，返回当前迭代元素的索引&lt;/li&gt;
&lt;li&gt;boolean isEven()，返回当前被迭代元素的索引是否为偶数&lt;/li&gt;
&lt;li&gt;boolean isOdd()，返回当前被迭代元素的索引是否为奇数&lt;/li&gt;
&lt;li&gt;boolean isFirst()，返回当前被迭代元素的索引是否是第一个元素&lt;/li&gt;
&lt;li&gt;boolean isLast()，返回当前被迭代元素的索引是否最后一个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;193url标签&#34;&gt;19.3、url标签&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:url value=&amp;quot;hellowoeld_add&amp;quot; namespace=&amp;quot;/test&amp;quot;&amp;gt;&amp;lt;s:param name=&amp;quot;person&amp;quot; value=&amp;quot;23&amp;quot;/&amp;gt;&amp;lt;/s:url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成类似如下路径：
/&lt;font color=red&gt;struts&lt;/font&gt;/test/helloworld_add&lt;font color=red&gt;.adtion&lt;/font&gt;?persom=23
红色部分为内容路径&lt;/p&gt;
&lt;p&gt;当标签的属性作为字符串类型处理时，“%”符号的用途试计算OGNL表达式的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:set value=&amp;quot;myurl&amp;quot; value=&#39;&amp;quot;http://www.sohu.com&amp;quot;&#39;/&amp;gt;
&amp;lt;s:url value=&amp;quot;myurl&amp;quot;/&amp;gt;&amp;lt;/br&amp;gt;
&amp;lt;s:url value=&amp;quot;%{#myurl}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# myurl
http://www.sohu.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;194表单标签checkboxlist复选框&#34;&gt;19.4、表单标签：checkboxlist复选框&lt;/h3&gt;
&lt;p&gt;如果集合为list&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:checkboxlist name=&amp;quot;list&amp;quot; list=&amp;quot;{&#39;Java&#39;,&#39;.Net&#39;,&#39;Ror&#39;,&#39;PHP&#39;}&amp;quot; value=&amp;quot;{&#39;Java&#39;,&#39;.Net&#39;}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;Java&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Java&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;.Net&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;.Net&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot; Ror&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Ror&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot; PHP&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;PHP&amp;lt;/lable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果集合为Map&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:checkboxlist name=&amp;quot;map&amp;quot; list=&amp;quot;#{1:&#39;Java&#39;,2:&#39;.Net&#39;,3:&#39;Ror&#39;,4:&#39;PHP&#39;}&amp;quot; listKey=&amp;quot;key&amp;quot; listValue=&amp;quot;value&amp;quot; value=&amp;quot;{1,2,3}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;1&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Java&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;2&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;.Net&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;3&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Ror&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;4&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;PHP&amp;lt;/lable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果集合里存放的是javabean&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%
  Person p1 = new Person(1,&amp;quot;第一个&amp;quot;);
  Person p1 = new Person(2,&amp;quot;第一个&amp;quot;);
  List&amp;lt;Person&amp;gt; list = new ArrayList&amp;lt;Person&amp;gt;();
  list.add(p1);
  list.add(p2);
  request.setAttribute(&amp;quot;person&amp;quot;, list);
%&amp;gt;
&amp;lt;s:checkboxlist list=&amp;quot;#request.persons&amp;quot; listKey=&amp;quot;personid&amp;quot; listValue=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/s:checkboxlist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;personid和name为Person的属性
生成如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;beans&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;第一个&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;beans&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;第二个&amp;lt;/lable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;195表单标签radio单选框&#34;&gt;19.5、表单标签：radio单选框&lt;/h3&gt;
&lt;p&gt;如果集合为list&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:radio name=&amp;quot;list&amp;quot; list=&amp;quot;{&#39;Java&#39;,&#39;.Net&#39;,&#39;Ror&#39;,&#39;PHP&#39;}&amp;quot; value=&amp;quot;&#39;Java&#39;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;Java&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Java&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;.Net&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;Ror&amp;quot;/&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;list&amp;quot; value=&amp;quot;PHP&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果集合为Map&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:radio name=&amp;quot;map&amp;quot; list=&amp;quot;#{1:&#39;Java&#39;,2:&#39;.Net&#39;3:,&#39;Ror&#39;,4:&#39;PHP&#39;}&amp;quot; 
listKey=&amp;quot;key&amp;quot; listValue=&amp;quot;value&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;1&amp;quot; checked=&amp;quot;checked&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Java&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;.Net&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;3&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;Ror&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;map&amp;quot; value=&amp;quot;4&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;PHP&amp;lt;/lable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果集合里存放的是javabean&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%
  Person p1 = new Person(1,&amp;quot;第一个&amp;quot;);
  Person p1 = new Person(2,&amp;quot;第一个&amp;quot;);
  List&amp;lt;Person&amp;gt; list = new ArrayList&amp;lt;Person&amp;gt;();
  list.add(p1);
  list.add(p2);
  request.setAttribute(&amp;quot;person&amp;quot;, list);
%&amp;gt;
&amp;lt;s:radio name=&amp;quot;beans&amp;quot; list=&amp;quot;#request.persons&amp;quot; listKey=&amp;quot;personid&amp;quot; listValue=&amp;quot;name&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;personid和name为Person的属性
生成如下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;beans&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;第一个&amp;lt;/lable&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;beans&amp;quot; value=&amp;quot;2&amp;quot;/&amp;gt;&amp;lt;lable&amp;gt;第二个&amp;lt;/lable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;196表单标签select下拉选择框&#34;&gt;19.6、表单标签select下拉选择框&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:select name=&amp;quot;list&amp;quot; list=&amp;quot;{&#39;Java&#39;,&#39;.Net&#39;}&amp;quot; value=&amp;quot;&#39;Java&#39;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:select name=&amp;quot;list&amp;quot; id=&amp;quot;list&amp;quot;&amp;gt;
&amp;lt;option value=&amp;quot;Java&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;Java&amp;lt;option/&amp;gt;
&amp;lt;option value=&amp;quot;.Net&amp;quot;&amp;gt;.Net &amp;lt;option/&amp;gt;
&amp;lt;/select&amp;gt;
&amp;lt;s:select name=&amp;quot;map&amp;quot; list=&amp;quot;#{1:&#39;Java&#39;,2:&#39;.Net&#39;3:,&#39;Ror&#39;,4:&#39;PHP&#39;}&amp;quot; 
listKey=&amp;quot;key&amp;quot; listValue=&amp;quot;value&amp;quot; value=&amp;quot;1&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成如下html代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:select name=&amp;quot;list&amp;quot; id=&amp;quot;list&amp;quot;&amp;gt;
&amp;lt;option value=&amp;quot;1&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;Java&amp;lt;option/&amp;gt;
&amp;lt;option value=&amp;quot;2&amp;quot;&amp;gt;.Net&amp;lt;option/&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;20stoken标签放置重复提交&#34;&gt;20、&amp;lt;s:token/&amp;gt;标签放置重复提交&lt;/h2&gt;
&lt;p&gt;&amp;lt;s:token/&amp;gt;标签放置重复提交用法如下：
第一步：在表单中加入&amp;lt;s:token/&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;s:form action=&amp;quot;Action_execute()&amp;quot; method=&amp;quot;post&amp;quot; &amp;gt;
  姓名&amp;lt;s:textfield name=&amp;quot;name&amp;quot;/&amp;gt;&amp;lt;s:token/&amp;gt;
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;发送&amp;quot;/&amp;gt;
&amp;lt;/s:form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二步：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;action name=&amp;quot;Action_*&amp;quot; class=&amp;quot;com.haibao.action.XMLvalidate&amp;quot;
      method=&amp;quot;{1}&amp;quot;&amp;gt;
  &amp;lt;interceptor-ref name=&amp;quot;defaultStack&amp;quot;/&amp;gt;
  &amp;lt;interceptor-ref name=&amp;quot;token&amp;quot;/&amp;gt;
  &amp;lt;result name=&amp;quot;ivalid.token&amp;quot;&amp;gt;/message.jsp&amp;lt;/result&amp;gt;
  &amp;lt;result name=&amp;quot;success&amp;quot;&amp;gt;/WEB-INF/page/message.jsp&amp;lt;/result&amp;gt;
&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上配置加入了“token”拦截器和“ivalid.token”结果，因为“token”拦截器在会话的token与请求的token不一致时，将会直接返回“ivalid.token”结果.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python数据分析（四）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%904/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%904/</guid>
      <description>&lt;p&gt;　　对于这一组电影数据，如果我们想runtime的分布情况.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# coding=utf-8
import pandas as pd
from matplotlib import pyplot as plt
file_path = &amp;quot;./IMDB-Movie-Data.csv&amp;quot;
df = pd.read_csv(file_path)
# print(temp_list.tolist())
# nums = set([i for j in temp_list for i in j])
# print(len(nums))
time_list = df[&amp;quot;Runtime (Minutes)&amp;quot;].values

max_time = time_list.max()
min_time = time_list.min()

dis = (max_time - min_time)//5
plt.figure(figsize=(20,8),dpi=80)
plt.hist(time_list,dis)
plt.xticks(range(min_time,max_time,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./1.png&#34; alt=&#34;png&#34;&gt;
　　对于这一组电影数据，如果我们希望统计电影分类(genre)的情况，应该如何处理数据？&lt;/p&gt;
&lt;p&gt;&lt;b&gt;思路&lt;/b&gt;：重新构造一个全为0的数组，列名为分类，如果某一条数据中分类出现过，就让0变为1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# coding=utf-8
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
file_path = &amp;quot;./IMDB-Movie-Data.csv&amp;quot;
# 读取CSV文件
df = pd.read_csv(file_path)
print(df[&amp;quot;Genre&amp;quot;].head(3))
# 统计分类的列表
temp_list = df[&amp;quot;Genre&amp;quot;].str.split(&amp;quot;,&amp;quot;).tolist()  #[[],[],[]]
genre_list = list(set([i for j in temp_list for i in j]))
# 等价于 genre_list = []
# for i in temp_genre_list:
#    genre_list.extend(i)
# genre_list = list(set(genre_list))

# 构造全为0的数组
zeros_df = pd.DataFrame(np.zeros((df.shape[0],len(genre_list))),columns=genre_list)
# 给每个电影出现分类的位置赋值1
for i in range(df.shape[0]):
    #zeros_df.loc[0,[&amp;quot;Sci-fi&amp;quot;,&amp;quot;Mucical&amp;quot;]] = 1
    zeros_df.loc[i,temp_list[i]] = 1
# 统计每个分类的电影的数量和
genre_count = zeros_df.sum(axis=0)
# 排序
genre_count = genre_count.sort_values()
_x = genre_count.index
_y = genre_count.values
#画图
plt.figure(figsize=(20,8),dpi=80)
plt.bar(range(len(_x)),_y,width=0.4,color=&amp;quot;orange&amp;quot;)
plt.xticks(range(len(_x)),_x)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据合并之join&#34;&gt;数据合并之join&lt;/h2&gt;
&lt;p&gt;　　join:默认情况下他是把行索引相同的数据合并到一起.
&lt;img src=&#34;./3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据合并之merge&#34;&gt;数据合并之merge&lt;/h2&gt;
&lt;p&gt;　　merge:按照指定的列把数据按照一定的方式合并到一起&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;merge(left, right, how=&#39;inner&#39;, on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=(&#39;_x&#39;, &#39;_y&#39;), copy=True, indicator=False, validate=None)
import pandas as pd
df1=pd.DataFrame({&#39;key&#39;:[&#39;a&#39;,&#39;b&#39;,&#39;a&#39;,&#39;b&#39;,&#39;b&#39;],&#39;value1&#39;:range(5)})
df2=pd.DataFrame({&#39;key&#39;:[&#39;a&#39;,&#39;c&#39;,&#39;c&#39;,&#39;c&#39;,&#39;c&#39;],&#39;value2&#39;:range(5)})
display(df1,df2,pd.merge(df1,df2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认的合并方式inner，交集;&lt;/li&gt;
&lt;li&gt;merge outer，并集，NaN补全;&lt;/li&gt;
&lt;li&gt;merge left，左边为准，NaN补全;&lt;/li&gt;
&lt;li&gt;merge right，右边为准，NaN补全.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分组和聚合&#34;&gt;分组和聚合&lt;/h2&gt;
&lt;p&gt;　　在pandas中类似的分组的操作有很简单的方式来完成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grouped = df.groupby(by=&amp;quot;columns_name&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;grouped是一个DataFrameGroupBy对象，是可迭代的;grouped中的每一个元素是一个元组，元组里面是（索引(分组的值)，分组之后的DataFrame）.&lt;/p&gt;
&lt;p&gt;那么，&lt;em&gt;分组之后的每个DataFrame的长度？&lt;/em&gt;
长度是一个思路，但更多的方法(聚合方法)来解决这个问题.
DataFrameGroupBy对象有很多经过优化的方法.
&lt;img src=&#34;./5.png&#34; alt=&#34;png&#34;&gt;
　　如果需要对国家和省份进行分组统计&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grouped = df.groupby(by=[df[&amp;quot;Country&amp;quot;],df[&amp;quot;State/Province&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很多时候我们只希望对获取分组之后的某一部分数据，或者说我们只希望对某几列数据进行分组，这个时候我们应该怎么办呢？
获取分组之后的某一部分数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df.groupby(by=[&amp;quot;Country&amp;quot;,&amp;quot;State/Province&amp;quot;])[&amp;quot;Country&amp;quot;].count()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对某几列数据进行分组：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df[&amp;quot;Country&amp;quot;].groupby(by=[df[&amp;quot;Country&amp;quot;],df[&amp;quot;State/Province&amp;quot;]]).count()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;观察结果，由于只选择了一列数据，所以结果是一个Series类型.&lt;/p&gt;
&lt;p&gt;如果我想返回一个DataFrame类型呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t1 = df[[&amp;quot;Country&amp;quot;]].groupby(by=[df[&amp;quot;Country&amp;quot;],df[&amp;quot;State/Province&amp;quot;]]).count()
t2 = df.groupby(by=[&amp;quot;Country&amp;quot;,&amp;quot;State/Province&amp;quot;])[[&amp;quot;Country&amp;quot;]].count()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上的两条命令结果一样，和之前的结果的区别在于当前返回的是一个DataFrame类型.&lt;/p&gt;
&lt;h2 id=&#34;索引和复合索引&#34;&gt;索引和复合索引&lt;/h2&gt;
&lt;h3 id=&#34;简单的索引操作&#34;&gt;简单的索引操作：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;获取index：&lt;code&gt;df.index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定index ：&lt;code&gt;df.index = [&#39;x&#39;,&#39;y&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新设置index : &lt;code&gt;df.reindex(list(&amp;quot;abcedf&amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定某一列作为index ：&lt;code&gt;df.set_index(&amp;quot;Country&amp;quot;,drop=False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回index的唯一值：&lt;code&gt;df.set_index(&amp;quot;Country&amp;quot;).index.unique()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　假设a为一个DataFrame,那么当&lt;code&gt;a.set_index([&amp;quot;c&amp;quot;,&amp;quot;d&amp;quot;])&lt;/code&gt;即设置两个索引的时候是什么样子的结果呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = pd.DataFrame({&#39;a&#39;: range(7),&#39;b&#39;: range(7, 0, -1),&#39;c&#39;: [&#39;one&#39;,&#39;one&#39;,&#39;one&#39;,&#39;two&#39;,&#39;two&#39;,&#39;two&#39;, &#39;two&#39;],&#39;d&#39;: list(&amp;quot;hjklmno&amp;quot;)})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;series复合索引&#34;&gt;Series复合索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./6.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;dataframe复合索引&#34;&gt;DataFrame复合索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.现在有2015到2017年25万条911的紧急电话的数据，请统计出出这些数据中不同类型的紧急情况的次数.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
import numpy as np
from matplotlib import pyplot as plt

df = pd.read_csv(&amp;quot;./911.csv&amp;quot;)

# print(df.info())
temp_list = df[&amp;quot;title&amp;quot;].str.split(&amp;quot;:&amp;quot;).tolist()
cate_list = [i[0] for i in temp_list]
cate_set_list = list(set(cate_list))
df[&amp;quot;type&amp;quot;] = pd.DataFrame(np.array(cate_list).reshape((df.shape[0],1)))
# print(df.head())
cate_zeros = pd.DataFrame(np.zeros((df.shape[0],len(cate_set_list))),columns=cate_set_list)
for cate in cate_set_list:
    cate_zeros[cate][df[&amp;quot;type&amp;quot;].str.contains(cate)] = 1
zeros_sum = cate_zeros.sum(axis=0)
sum_values = zeros_sum.values
plt.figure(figsize=(8, 6),dpi=80)
plt.bar(cate_set_list,sum_values,color=&amp;quot;orange&amp;quot;,width=0.4)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./9.png&#34; alt=&#34;png&#34;&gt;
　　统计出不同月份不同类型紧急电话的次数的变化情况，应该怎么做可以按照上面的方法将时间戳按照右边“-”进行切割，然后将前面的字符串定义为原数组的最后一列，在进行其他操作. 也可以使用pandas的时间序列.&lt;/p&gt;
&lt;h2 id=&#34;pandas中的时间序列&#34;&gt;pandas中的时间序列&lt;/h2&gt;
&lt;p&gt;　　不管在什么行业，时间序列都是一种非常重要的数据形式，很多统计数据以及数据的规律也都和时间序列有着非常重要的联系,而且在pandas中处理时间序列是非常简单的生成一段时间范围.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pd.date_range(start=None, end=None, periods=None, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start和end以及freq配合能够生成start和end范围内以频率freq的一组时间索引.
start和periods以及freq配合能够生成从start开始的频率为freq的periods个时间索引.
&lt;img src=&#34;./10.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./11.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;在dataframe中使用时间序列&#34;&gt;在DataFrame中使用时间序列&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;index=pd.date_range(&amp;quot;20170101&amp;quot;,periods=10)
df = pd.DataFrame(np.random.rand(10),index=index)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;回到最开始的911数据的案例中，我们可以使用pandas提供的方法把时间字符串转化为时间序列.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df[&amp;quot;timeStamp&amp;quot;] = pd.to_datetime(df[&amp;quot;timeStamp&amp;quot;],format=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;format参数大部分情况下可以不用写，但是对于pandas无法格式化的时间字符串，我们可以使用该参数，比如包含中文.&lt;/p&gt;
&lt;h2 id=&#34;pandas重采样&#34;&gt;pandas重采样&lt;/h2&gt;
&lt;p&gt;　　重采样：指的是将时间序列从一个频率转化为另一个频率进行处理的过程，将高频率数据转化为低频率数据为降采样，低频率转化为高频率为升采样.pandas提供了一个resample的方法来帮助我们实现频率转化.
&lt;img src=&#34;./12.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;periodindex&#34;&gt;PeriodIndex&lt;/h2&gt;
&lt;p&gt;　　之前所学习的DatetimeIndex可以理解为时间戳，那么现在我们要学习的PeriodIndex可以理解为时间段．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;periods = pd.PeriodIndex(year=data[&amp;quot;year&amp;quot;],month=data[&amp;quot;month&amp;quot;],day=data[&amp;quot;day&amp;quot;],hour=data[&amp;quot;hour&amp;quot;],freq=&amp;quot;H&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么如果给这个时间段降采样呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = df.set_index(periods).resample(&amp;quot;10D&amp;quot;).mean()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python数据分析（三）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/</guid>
      <description>&lt;p&gt;　　Numpy能够帮助我们处理数值，pandas除了处理数值之外(基于numpy)，还能够帮助我们处理其他类型的数据.&lt;/p&gt;
&lt;h2 id=&#34;pandas的常用数据类型&#34;&gt;pandas的常用数据类型&lt;/h2&gt;
&lt;h3 id=&#34;series-一维带标签数组&#34;&gt;Series 一维，带标签数组&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;t = pd.Series(np.arange(10),index=list(string.ascoo_uppercase[:10]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f1.png&#34; alt=&#34;png&#34;&gt;
Series切片和索引
&lt;img src=&#34;./f2.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./f3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;series的索引和值&#34;&gt;Series的索引和值&lt;/h4&gt;
&lt;p&gt;对于一个陌生的series类型，可以通过t.index获取其索引值
&lt;img src=&#34;./f4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;pandas读取外部数据&#34;&gt;pandas读取外部数据：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接使用&lt;code&gt;pd. read_csv()&lt;/code&gt;即可.&lt;/li&gt;
&lt;li&gt;如果待数据的数据没有列名，则需要补充，即在读取文件时给定参数names的值.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;pd.read_csv(“’’,names=column_names)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;column_names：指定类别名字,[&amp;lsquo;Sample code number&amp;rsquo;,&amp;lsquo;Clump Thickness&amp;rsquo;, &amp;lsquo;Uniformity of Cell Size&amp;rsquo;,&amp;lsquo;Uniformity of Cell Shape&amp;rsquo;,&amp;lsquo;Marginal Adhesion&amp;rsquo;, &amp;lsquo;Single Epithelial Cell Size&amp;rsquo;,&amp;lsquo;Bare Nuclei&amp;rsquo;,&amp;lsquo;Bland Chromatin&amp;rsquo;,&amp;lsquo;Normal Nucleoli&amp;rsquo;,&amp;lsquo;Mitoses&amp;rsquo;,&amp;lsquo;Class&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;return:数据.&lt;/li&gt;
&lt;li&gt;replace(to_replace=’’,value=)：返回数据.&lt;/li&gt;
&lt;li&gt;dropna():返回数据.
注：读取文件只要是.CSV文件就可以使用load_csv()方法，即使文件地址是网站.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dataframe-二维series容器&#34;&gt;DataFrame 二维，Series容器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;dataframe对象既有行索引又有列索引&#34;&gt;DataFrame对象既有行索引，又有列索引&lt;/h4&gt;
&lt;p&gt;行索引，表明不同行，横向索引，叫index，0轴，axis=0；
列索引，表名不同列，纵向索引，叫columns，1轴，axis=1．
和一个ndarray一样，通过ndim，shape，dtype了解这个ndarray的基本信息．
&lt;img src=&#34;./f6.png&#34; alt=&#34;png&#34;&gt;
　　获得使用次数最高的前几个名字是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
df = pd.read_csv(&amp;quot;./dogNames.csv&amp;quot;)
# print(df.head())
# print(df.info())
# dataFrame 中排序的方法
df = df.sort_values(&amp;quot;Count_AnimalName&amp;quot;,ascending=False)
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=&#39;quicksort&#39;, 
		na_position=&#39;last&#39;)
# ascending：升序：True		
#            降序：False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题：数据有10列，我想按照其中的第1，第3，第8列排序？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pandas取行或者列的注意点
# - 方括号写数组,表示取行,对行进行操作
# - 写字符串,表示的去列索引,对列进行操作
print(df[:20])
print(df[&amp;quot;Row_Labels&amp;quot;])
print(type(df[&amp;quot;Row_Labels&amp;quot;]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有更多的经过pandas优化过的选择方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;df.loc&lt;/code&gt; 通过标签索引行数据（行列的名字）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;df.loc[“a”,”w”]  # a行w列
df.loc[“a”,:]  # a行
df.loc[:,”w”]  # w列
df.loc[[“a”,”c”],:]  # a，c行
df.loc[:,[“w”,”z”]]  # w，z列
df.loc[[“a”,”c” ,[“w”,”z”]]  # a,c行，w,z列
df.loc[[“a”:”c” ,[“w”,”z”]]  # a到c行，w,z列
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;df.iloc &lt;/code&gt;通过位置获取行数据（行列号-1）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;df.iloc[1,:]    # 第二行
df.iloc[:,2]    # 第三列
df.iloc[:,[2,1]]    # 第三列第二列
df.iloc[[0,2], [2,1]]	# 第1,3行, 第3,2列
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f9.png&#34; alt=&#34;png&#34;&gt;
赋值更改数据的过程：
&lt;img src=&#34;./f10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;布尔索引&#34;&gt;布尔索引&lt;/h4&gt;
&lt;p&gt;　　找到所有的使用次数超过800的狗的名字.
&lt;img src=&#34;./f11.png&#34; alt=&#34;png&#34;&gt;
找到所有的使用次数超过700并且名字的字符串的长度大于4的狗的名字
&lt;img src=&#34;./f12.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串方法&#34;&gt;字符串方法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./f13.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pandas缺失数据的处理&#34;&gt;Pandas缺失数据的处理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./f14.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据缺失通常有两种情况&#34;&gt;数据缺失通常有两种情况：&lt;/h3&gt;
&lt;p&gt;　　一种就是空，None等，在pandas是NaN(和np.nan一样);另一种是我们让其为0，蓝色框中对于NaN的数据，在numpy中我们是如何处理的？&lt;/p&gt;
&lt;p&gt;　　在pandas中我们处理起来非常容易.&lt;/p&gt;
&lt;p&gt;判断数据是否为NaN：&lt;code&gt;pd.isnull(df),pd.notnull(df)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理方式1：删除NaN所在的行列dropna (axis=0, how=&amp;lsquo;any&amp;rsquo;, inplace=False)# 是否原地修改&lt;/li&gt;
&lt;li&gt;处理方式2：填充数据，t.fillna(t.mean()),t.fiallna(t.median()),t.fillna(0)&lt;/li&gt;
&lt;li&gt;处理为0的数据：&lt;code&gt;t[t==0]=np.nan&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然并不是每次为0的数据都需要处理计算平均值等情况，nan是不参与计算的，但0会.&lt;/p&gt;
&lt;h3 id=&#34;数据变形&#34;&gt;数据变形：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;处理重复数据
&lt;ul&gt;
&lt;li&gt;判断数据是否重复，&lt;code&gt;duplicated()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去除重复数据，&lt;code&gt;drop_dumplicates()&lt;/code&gt;，可指定列及如何保留数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用函数或map转化数据，通常根据字典进行数据转化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data = pd.DataFrame({&#39;food&#39;: [&#39;bacon&#39;, &#39;pulled pork&#39;, &#39;bacon&#39;, &#39;Pastrami&#39;, &#39;corned beef&#39;, 
       &#39;Bacon&#39;, &#39;pastrami&#39;, &#39;honey ham&#39;, &#39;nova lox&#39;], 
       &#39;ounces&#39;: [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f15.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加一列，用于指定食物的来源
meat_to_animal = {
    &#39;bacon&#39;: &#39;pig&#39;,
    &#39;pulled pork&#39;: &#39;pig&#39;,
    &#39;pastrami&#39;: &#39;cow&#39;,
    &#39;corned beef&#39;: &#39;cow&#39;,
    &#39;honey ham&#39;: &#39;pig&#39;,
    &#39;nova lox&#39;: &#39;salmon&#39;
}
# 使用map()
lowercased = data[&#39;food&#39;].str.lower()
data[&#39;animal&#39;] = lowercased.map(meat_to_animal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f16.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换值，&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;离散化和分享操作，&lt;code&gt;pd.cut()&lt;/code&gt;，返回&lt;code&gt;Categorical&lt;/code&gt;对象
&lt;img src=&#34;./f17.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./f18.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;li&gt;哑变量操作，&lt;code&gt;pd.get_dummies()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;向量化字符串操作
&lt;ul&gt;
&lt;li&gt;字符串列越苏中是否包含子字符串，&lt;code&gt;ser_obj.str.contains()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串列切片操作，&lt;code&gt;ser_obj.str[a:b]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python数据分析（二）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/</guid>
      <description>&lt;h2 id=&#34;numpy&#34;&gt;Numpy&lt;/h2&gt;
&lt;p&gt;　　Numpy是一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算.&lt;/p&gt;
&lt;h3 id=&#34;numpy简单创建数组&#34;&gt;Numpy简单创建数组&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
# 创建简单的列表
a = [1, 2, 3, 4]			 此处输出a的话是[1,2,3,4]
# 将列表转换为数组
b = np.array(a)			 此处b输出的话是[1 2 3 4]
np.array(a) = np.array(range(1,4)) = np.arange(1,4)
np,arrange([start, ] stop[, step,], ftype=None)
# 去小数
np.round(x,保留位数)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpy查看数组属性&#34;&gt;Numpy查看数组属性&lt;/h3&gt;
&lt;p&gt;数组元素个数：&lt;code&gt;b.size&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数组形状：&lt;code&gt;b.shape&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一维：列数(8,)；二维：行列(2, 4)；三维：块行列(2, 2, 4)&lt;/p&gt;
&lt;p&gt;重塑&lt;code&gt;reshape&lt;/code&gt;：数组一个新的形状而不改变其数据.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 具有返回值的，不会改变原数组
numpy.reshape(a, newshape, order=&#39;C&#39;)		
order : {‘C’, ‘F’, ‘A’}  
# C:横着读横着写; E:竖着的竖着写; A:竖着度横着写
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = np.array([[1,2,3], [4,5,6]])
print(a)
[[1 2 3]
 [4 5 6]]
print(np.reshape(a, (3,2)))
 [[1 2]
 [3 4]
 [5 6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组维度：&lt;code&gt;b.ndim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数组元素类型：&lt;code&gt;b.dtype&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快速创建N维数组的api函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建10行10列的数值为浮点1的矩阵
array_one = np.ones([10, 10])
#创建10行10列的数值为浮点0的矩阵
array_zero = np.zeros([10, 10])
#降到一维：
b.flatten(order=&#39;C&#39;)  
# 把a降到一维，默认是按横的方向降order:{‘C’, ‘F’,‘A’,‘K’}
b.flatten(&#39;F&#39;) 
# 按竖的方向降
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;轴axis&#34;&gt;轴(axis)&lt;/h3&gt;
&lt;p&gt;　　在numpy中可以理解为方向,使用0,1,2&amp;hellip;数字表示,对于一个一维数组,只有一个0轴,对于2维数组&lt;code&gt;(shape(2,2))&lt;/code&gt;,有0轴和1轴,对于三维数组&lt;code&gt;(shape(2,2, 3))&lt;/code&gt;,有0,1,2轴.
&lt;img src=&#34;./f1.png&#34; alt=&#34;二维数组的轴&#34;&gt;
&lt;img src=&#34;./f2.png&#34; alt=&#34;三维数组的轴&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy读取数据&#34;&gt;Numpy读取数据&lt;/h3&gt;
&lt;p&gt;（以后结合框架之类的读取文件大多数是从CSV文件中读取）&lt;/p&gt;
&lt;p&gt;　　CSV（Comma-Separated Value,逗号分隔值文件）：由于csv便于展示,读取和写入,所以很多地方也是用csv的格式存储和传输中小型的数据,为了方便教学,我们会经常操作csv格式的文件,但是操作数据库中的数据也是很容易的实现的.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;方法&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;np.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;注意&lt;/b&gt; 其中添加的&lt;code&gt;delimiter&lt;/code&gt;和&lt;code&gt;dtype&lt;/code&gt;以及&lt;code&gt;unpack&lt;/code&gt;效果.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;delimiter：指定边界符号是什么，不指定会导致每行数据为一个整体法人字符串而报错&lt;/li&gt;
&lt;li&gt;dtype：默认情况下对于较大的数据将变为科学计数法的方式&lt;/li&gt;
&lt;li&gt;upack：默认值是False(0)，默认情况下，有多少条数据就会有多少行；为True(1)的情况下，每一列的数据会组成一行，袁术数据有多少列，加载出来就会有多少行，相当于转置的效果.&lt;/li&gt;
&lt;li&gt;其他转置方法：t.transpose()	t.T	t.swapaxes(1,0)  # 1轴和1轴互换.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;numpy索引和切片&#34;&gt;Numpy索引和切片&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 取行： T[行]
# 取连续的多行： T [2:]
# 取不连续的多行： T [ [2,8,10] ] = T [[2,10,3],:]
取第2行：T [1,:]
取第三行以后所有行：T [2:,:]
#取列： T [:,0]
#取连续的多列： T [:, 2 :]
#取不连续的多列： T [:,[ 0,2]]
#去行和列，取第3行，第四列的值：
a = T [ 2, 3]
print(type(a))	# int
#取多行和多列，取第3行到第五行，第2列到第4列的结果
#去的是行和列交叉点的位置
b = T [2:5,1:4]
#取多个不相邻的点--选出来的结果是（0，0） （2，1） （2，3）
c = T [[0,2,2],[0,1,3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpy中布尔索引&#34;&gt;Numpy中布尔索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# numpy中三元运算符 
np.where(condition, if True, if False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy中的clip裁剪&#34;&gt;Numpy中的clip(裁剪)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;numpy.clip(a, a_min, a_max, out=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[a_min, a_max] 里面的数被保留下来,外面的被截取为&lt;code&gt;a_min&lt;/code&gt;或者&lt;code&gt;a_max &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;out&lt;/code&gt;：可以把结果放置在此数组中.&lt;/p&gt;
&lt;p&gt;例如，指定间隔为[0，1]，则小于0的值赋值为0，并且大于1的值赋值为1.&lt;/p&gt;
&lt;p&gt;补充：int类型的情况下无法赋值为nan，所以需要将类型改为float.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.astype(float)
t[x,y]=np.nan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数组的拼接&#34;&gt;数组的拼接：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;np.vstack((t1,t2))		# 竖直拼接
np.hstack((t1,t2))		# 水平拼接
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数组的行列交换&#34;&gt;数组的行列交换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy更多好用的方法&#34;&gt;Numpy更多好用的方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;获取最大值最小值的位置&lt;/li&gt;
&lt;li&gt;np.argmax(t,axis=0)&lt;/li&gt;
&lt;li&gt;np.argmin(t,axis=1)&lt;/li&gt;
&lt;li&gt;创建一个全0的数组: np.zeros((3,4))&lt;/li&gt;
&lt;li&gt;创建一个全1的数组:np.ones((3,4))&lt;/li&gt;
&lt;li&gt;创建一个对角线为1的正方形数组(方阵)：np.eye(3)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;numpy生成随机数&#34;&gt;Numpy生成随机数&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f9.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy中的注意点copy和view&#34;&gt;Numpy中的注意点copy和view&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;a=b 完全不复制，a和b相互影响&lt;/li&gt;
&lt;li&gt;a = b[:],视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的，&lt;/li&gt;
&lt;li&gt;a = b.copy(),复制，a和b互不影响&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;numpy中的nan和inf都是float类型&#34;&gt;Numpy中的nan和inf（都是float类型）&lt;/h3&gt;
&lt;p&gt;nan(NAN,Nan):not a number表示不是一个数字.&lt;/p&gt;
&lt;p&gt;什么时候numpy中会出现nan&lt;/p&gt;
　　当我们读取本地的文件为float的时候，如果有缺失，就会出现nan．
&lt;p&gt;　　当做了一个不合适的计算的时候(比如无穷大(inf)减去无穷大)．&lt;/p&gt;
&lt;p&gt;inf(-inf,inf):infinity,inf表示正无穷，-inf表示负无穷&lt;/p&gt;
&lt;p&gt;什么时候回出现inf包括（-inf，+inf）&lt;/p&gt;
　　比如一个数字除以0，（python中直接会报错，numpy中是一个inf或者-inf）
&lt;h3 id=&#34;numpy中的nan的注意点&#34;&gt;Numpy中的nan的注意点&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.sum(axis=None) #求和 
t.mean(a,axis=None)  # 均值 受离群点的影响较大
np.median(t,axis=None)  # 中值：
t.max(axis=None)  # 最大值：
t.min(axis=None)  # 最小值：
np.ptp(t,axis=None) # 极值 即最大值和最小值只差
t.std(axis=None)  # 标准差 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ndarry缺失值填充均值&#34;&gt;ndarry缺失值填充均值&lt;/h3&gt;
&lt;p&gt;t中存在nan值，如何操作把其中的nan填充为每一列的均值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = array([[  0.,   1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,  nan,   9.,  10.,  11.],
       [ 12.,  13.,  14.,  nan,  16.,  17.],
       [ 18.,  19.,  20.,  21.,  22.,  23.]])
def fill_ndarray(t1):
  #遍历每一列
  for i in range(t1.shape[1]):  
      temp_col = t1[:,i]  #当前的一列
      nan_num = np.count_nonzero(temp_col!=temp_col)
      if nan_num != 0: #不为0，说明当前这一列中有nan
          temp_not_nan_col = temp_col[temp_col==temp_col] #当前一列不为nan的array
          # 选中当前为nan的位置，把值赋值为不为nan的均值
          temp_col[np.isnan(temp_col)] = temp_not_nan_col.mean()
  return t1

if __name__ == &#39;__main__&#39;:
    t1 = np.arange(12).reshape((4, 3)).astype(&amp;quot;float&amp;quot;)
    t1[1, 1:] = np.nan
    print(t1)
    t1 = fill_ndarray(t1)
    print(t1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.  1.  2.]							[[ 0.  1.  2.]
 [ 3. nan nan]							[ 3.  6.  7.]
 [ 6.  7.  8.]							[ 6.  7.  8.]
 [ 9. 10. 11.]]							[ 9. 10. 11.]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python数据分析（一）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/</guid>
      <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;h3 id=&#34;环境安装不是必要只是为了能够更好的操作及维护&#34;&gt;环境安装（不是必要，只是为了能够更好的操作及维护）&lt;/h3&gt;
&lt;p&gt;CONDA：
conda类似于npm或maven的包管理工具，只是conda是针对于python的. 可以安装minconda或anaconda进行安装；Conda是一个包管理器；Anaconda是一个发行包.虽然Conda与Anaconda一起包装，但两者是具有不同目标的不同实体.
CONDA安装（以Win64为例）:
可以到&lt;a href=&#34;https://www.anaconda.com/download%e4%b8%8b%e8%bd%bd%e5%af%b9%e5%ba%94%e7%89%88%e6%9c%ac%e7%9a%84Anaconda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官网&lt;/a&gt;；也可以到国内&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;清华镜像源&lt;/a&gt;进行下载镜像文件：
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901.png&#34; alt=&#34;png&#34;&gt;
安装 ： 打开安装包，一路next 即可.  注意，勾选 添加环境变量 和 默认python3.6 作为Anaconda的语言.
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902.png&#34; alt=&#34;png&#34;&gt;
安装成功后打开cmd命令输入&amp;quot;python&amp;quot;查看版本信息.
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903.png&#34; alt=&#34;png&#34;&gt;
查看当前有哪些可以使用的python版本：conda search  &amp;ndash;full -name python
安装python版本（安装的3.6的版本）：conda create &amp;ndash;name tensorflow python=3.6&lt;/p&gt;
&lt;h3 id=&#34;jupyter-notebook&#34;&gt;Jupyter notebook&lt;/h3&gt;
&lt;p&gt;jupyter notebook:一款编程/文档/笔记/展示软件.
启动命令:jupyter notebook  （已经安装Anaconda/在conda环境下）
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%904.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%905.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%906.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jupyter-notebook好处&#34;&gt;Jupyter notebook好处&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;极其适合数据分析&lt;/li&gt;
&lt;li&gt;支持多语言&lt;/li&gt;
&lt;li&gt;分享便捷：支持以网页的形式分享，GitHub 中天然支持 Notebook 展示，也可以通过 nbviewer 分享你的文档. 当然也支持导出成 HTML、PDF、Markdown等多种格式的文档.&lt;/li&gt;
&lt;li&gt;远程运行：在任何地点都可以通过网络链接远程服务器来实现运算.&lt;/li&gt;
&lt;li&gt;交互式展现：不仅可以输出图片、视频、数学公式，甚至可以呈现一些互动的可视化内容，比如可以缩放的地图或者是可以旋转的三维模型. 这就需要交互式插件（Interactive widgets）来支持.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;
&lt;h3 id=&#34;matplotlib&#34;&gt;matplotlib&lt;/h3&gt;
&lt;p&gt;最流行的Python底层绘图库，主要做数据可视化图表,名字取材于MATLAB，模仿MATLAB构建；能将数据进行可视化,更直观的呈现、使数据更加客观、更具说服力
matplotlib使用流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明确问题&lt;/li&gt;
&lt;li&gt;选择图形的呈现方式&lt;/li&gt;
&lt;li&gt;准备数据&lt;/li&gt;
&lt;li&gt;绘图和图形完善&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.
假设一天中每隔两个小时(range(2,26,2))的气温(℃)分别是[15, 13, 14.5, 17, 20, 25, 26, 26, 27, 22, 18, 15].&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%907.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%908.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;设置图片大小&#34;&gt;设置图片大小&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fig = plt.figure(figsize=(10,6),dpi=80)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;figure图形图标的意思，在这里指的是画的图；通过实例化一个figure并传递参数，能够在后台自动使用该figure实例；在图像模糊的时候可以传入dpi参数（每英寸上像素点的个数）&lt;/p&gt;
&lt;h3 id=&#34;保存到本地&#34;&gt;保存到本地&lt;/h3&gt;
&lt;p&gt;　　保存需要在绘制图形之后保存&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.show(&amp;quot;路径/名字.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以保存为SVG这种矢量图的格式&lt;/p&gt;
&lt;h3 id=&#34;描述信息比如x轴和y轴表示什么这个图表示什么&#34;&gt;描述信息,比如x轴和y轴表示什么,这个图表示什么&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;  plt.xlabel(&amp;quot;X轴&amp;quot;)
  plt.ylabel(&amp;quot;Y轴&amp;quot;)
  plt.title(&amp;quot;Title&amp;quot;) # 存在中文乱码问题
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;调整x或者y的刻度的间距&#34;&gt;调整x或者y的刻度的间距&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;设置x轴的刻度（一个参数）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plt.xticks(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要密集点可以设置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_xticks = [i/2 for I in range(4,49)]
plt.xticks(_xticks)
# 显得过于密集
plt.xticks(_xticks[::3])
# 每隔3取一个；只有列表的时候才能使用[ ]取步长
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;设置x轴的刻度（两个参数）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;plt.xticks(x,_xticks_labels)
_x = x   # int类型
_xtick_labels = [&amp;quot;hello,{}&amp;quot;.format(i) for i in _x]
plt.xticks(_x,_xtick_labels)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;format函数&lt;/em&gt;:
格式化字符串的函数 str.format()，它增强了字符串格式化的功能. 基本语法是通过 {} 和 : ，来代替以前的%.&lt;/p&gt;
&lt;p&gt;format 函数可以接受不限个参数，位置可以不按顺序.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;{} {}&amp;quot;.format(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;) # 不设置指定位置，按默认顺序 
&#39;hello world&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;format 函数可以接受不限个参数,位置也可以设置参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;网站名：{name}, 地址 {url}&amp;quot;.format(name=&amp;quot;百度&amp;quot;, url=&amp;quot;www.Baidu.com&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%909.png&#34; alt=&#34;png&#34;&gt;
改进：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_x = list(x)   # int类型
_xtick_labels = [&amp;quot;hello,{}&amp;quot;.format(i) for i in _x]	
# 取步长一样，数字和字符串一一对应，数据长度一样
plt.xticks(_x[::8],_xtick_labels[::8])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9010.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用rotation参数旋转&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.xticks(_x[::8],_xtick_labels[::8],rotation=45)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;中文情况处理&#34;&gt;中文情况处理：&lt;/h3&gt;
&lt;p&gt;　　matplotlib默认不支持中文字符，因为默认的英文字体无法显示汉字&lt;/p&gt;
&lt;p&gt;如何修改matplotlib的默认字体?&lt;/p&gt;
　　通过matplotlib.rc可以修改,具体方法参见源码(windows/linux)
&lt;pre&gt;&lt;code&gt;import matplotlib
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;,&#39;size&#39;: &#39;10&#39;}    # 黑体
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9011.png&#34; alt=&#34;png&#34;&gt;
通过matplotlib 下的font_manager可以解决(windows/linux/mac)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 设置中文字体（指定的字体文件路径，然后在显示中文的地方添加fontproperties）
my_font = font_manager.FontProperties(fname=&amp;quot;/System/Library/Fonts/PingFang.ttc&amp;quot;)
plt.xticks(x[::5],_x_ticks[::5],rotation=90,fontproperties=my_font)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;线条的样式比如颜色透明度等&#34;&gt;线条的样式(比如颜色,透明度等)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;plt.grid()	# 绘制网格
plt.grid(alpha=0.6)	# 绘制网格，并调整透明度
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘制风格及描述&#34;&gt;绘制风格及描述&lt;/h3&gt;
&lt;p&gt;　　描述不同曲线含义：在plot()中添加参数&lt;code&gt;label=&amp;quot;Name&amp;quot;&lt;/code&gt;
再添加语句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.legend(loc=0)/plt.legend(prop=my_font)
# loc位置：0=best/upper left
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9012.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9013.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;常用统计图&#34;&gt;常用统计图&lt;/h2&gt;
&lt;p&gt;　　统计图是数据分析和数学建模最直接、最有效的可视化形式.这里只是简单说明在Python中不同的绘图命令.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;折线图:以折线的上升或下降来表示统计数量的增减变化的统计图.
&lt;ul&gt;
&lt;li&gt;特点:能够显示数据的变化趋势，反映事物的变化情况(变化).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;直方图:由一系列高度不等的纵向条纹或线段表示数据分布的情况. 一般用横轴表示数据范围，纵轴表示分布情况.
&lt;ul&gt;
&lt;li&gt;特点:绘制连续性的数据,展示一组或者多组数据的分布状况(统计).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;条形图:排列在工作表的列或行中的数据可以绘制到条形图中.
&lt;ul&gt;
&lt;li&gt;特点:绘制连离散的数据,能够一眼看出各个数据的大小,比较数据之间的差别(统计).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;散点图:用两组数据构成多个坐标点，考察坐标点的分布,判断两变量之间是否存在某种关联或总结坐标点的分布模式.
&lt;ul&gt;
&lt;li&gt;特点:判断变量之间是否存在数量关联趋势,展示离群点(分布规律).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘制折线图pltplotxy&#34;&gt;绘制折线图：plt.plot(x,y)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np

linear_data = np.arange(1, 9)
quadratic_data = linear_data ** 2

plt.figure()
plt.plot(linear_data, &#39;-o&#39;, quadratic_data, &#39;-o&#39;)

# 注意，这里只指定了y轴数据，x轴的数据是matplotlib自动生成的
# 添加坐标轴标签及图例
plt.xlabel(&#39;x data&#39;)
plt.ylabel(&#39;y data&#39;)
plt.title(&#39;Line Chart Title&#39;)
plt.legend([&#39;legend1&#39;, &#39;legend2&#39;, &#39;legend3&#39;])
# 填充两个line间的区域plt.gca().fill_between(x,y1,y2,color,透明度)
plt.gca().fill_between(range(len(linear_data)),
                      linear_data, quadratic_data,
                      facecolor=&#39;green&#39;,
                      alpha=0.25)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9014.png&#34; alt=&#34;png&#34;&gt;
注意：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 对于学术制图，可在标题中包含latex语法
ax = plt.gca()
ax.set_title(&#39;Quadratic ($x^2$) vs. Linear ($x$)&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘制散点图pltscatterxy&#34;&gt;绘制散点图：plt.scatter(x,y)&lt;/h3&gt;
&lt;p&gt;假设通过爬虫你获取到了北京2016年3,10月份每天白天的最高气温(分别位于列表a,b),那么此时如何寻找出气温和随时间(天)变化的某种规律?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from matplotlib import pyplot as plt
import matplotlib
# 设置字体样式
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;,
        &#39;size&#39;:&#39;10&#39;}
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
# 数据
y_3 = [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23]
y_10 = [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6]
# 3月，10月范围
x_3 = range(1,32)
x_10 = range(50,81)
# 合并横坐标
plt.figure(figsize=(14,8),dpi=80)
# 绘制散点图
plt.scatter(x_3,y_3,label=&amp;quot;3月份&amp;quot;)
plt.scatter(x_10,y_10,label=&amp;quot;10月份&amp;quot;)
# 设置x轴
_x = list(x_3) + list(x_10)
_xticks_labels = [&amp;quot;3月{}日&amp;quot;.format(i) for i in x_3]
_xticks_labels += [&amp;quot;10月{}日&amp;quot;.format(i) for i in x_10]
plt.xticks(_x[::3],_xticks_labels[::3],rotation=45)
plt.legend(loc=&amp;quot;upper left&amp;quot;)
# 显示设置
plt.xlabel(&amp;quot;月份&amp;quot;)
plt.ylabel(&amp;quot;温度&amp;quot;)
plt.title(&amp;quot;标题&amp;quot;)
# 展示
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9015.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;绘制条形图柱状图&#34;&gt;绘制条形图/柱状图：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;plt.bar(x, y, width=0.2, color=&#39;orange&#39;)
plt.bar(x, y, height=0.2, color=&#39;orange&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from matplotlib import pyplot as plt
import matplotlib
# 设置字体样式
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;,
        &#39;size&#39;:&#39;10&#39;}
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
a = [&amp;quot;战狼2&amp;quot;,&amp;quot;速度与激情8&amp;quot;,&amp;quot;功夫瑜伽&amp;quot;,&amp;quot;西游伏妖篇&amp;quot;,&amp;quot;变形金刚5：最后的骑士&amp;quot;,&amp;quot;摔跤吧！爸爸&amp;quot;,&amp;quot;加勒比海盗5：死无对证&amp;quot;,&amp;quot;金刚：骷髅岛&amp;quot;,&amp;quot;极限特工：终极回归&amp;quot;,&amp;quot;生化危机6：终章&amp;quot;,&amp;quot;乘风破浪&amp;quot;,&amp;quot;神偷奶爸3&amp;quot;,&amp;quot;智取威虎山&amp;quot;,&amp;quot;大闹天竺&amp;quot;,&amp;quot;金刚狼3：殊死一战&amp;quot;,&amp;quot;蜘蛛侠：英雄归来&amp;quot;,&amp;quot;悟空传&amp;quot;,&amp;quot;银河护卫队2&amp;quot;,&amp;quot;情圣&amp;quot;,&amp;quot;新木乃伊&amp;quot;]
b = [56.01,26.94,17.53,16.49,15.45,12.96,11.8,11.61,11.28,11.12,10.49,10.3,8.75,7.55,7.32,6.99,6.88,6.86,6.58,6.23]
plt.figure(figsize=(12,8),dpi=80)
x = range(len(a))
plt.bar(x, b, width=0.2, color=&#39;orange&#39;)
plt.xticks(x, a, rotation=45)

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9016.png&#34; alt=&#34;png&#34;&gt;
　　发现字数长的名字错位,横向的条形图,将&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.bar(x, y, width=0.2, color=&#39;orange&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;改成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.bar(x, y, height=0.2, color=&#39;orange&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再适当调整其他参数.
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9017.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.假设你知道了列表a中电影分别在2017-09-14(b_14), 2017-09-15(b_15), 2017-09-16(b_16)三天的票房,为了展示列表中电影本身的票房以及同其他电影的数据对比情况,应该如何更加直观的呈现该数据?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from matplotlib import pyplot as plt
import matplotlib
# 设置字体样式
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;, &#39;size&#39;:&#39;10&#39;}
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
a = [&amp;quot;猩球崛起3：终极之战&amp;quot;,&amp;quot;敦刻尔克&amp;quot;,&amp;quot;蜘蛛侠：英雄归来&amp;quot;,&amp;quot;战狼2&amp;quot;]
b_16 = [15746,312,4497,319]
b_15 = [12357,156,2045,168]
b_14 = [2358,399,2358,362]
bar_width = 0.2
plt.figure(figsize=(10,8),dpi=80)
x_14 = list(range(len(a)))
x_15 = [i+bar_width for i in x_14]
x_16 = [i+bar_width for i in x_15]
plt.bar(x_14, b_14, width=bar_width,label=&amp;quot;2017-09-14&amp;quot;)
plt.bar(x_15, b_15, width=bar_width,label=&amp;quot;2017-09-15&amp;quot;)
plt.bar(x_16, b_16, width=bar_width,label=&amp;quot;2017-09-16&amp;quot;)
plt.xticks(x_15, a)
plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9018.png&#34; alt=&#34;png&#34;&gt;
堆叠柱状图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# stack bar chart
plt.figure()
x_vals = list(range(len(linear_data)))
plt.bar(x_vals, linear_data, width=0.3)
plt.bar(x_vals, quadratic_data, width=0.3, bottom=linear_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘制直方图&#34;&gt;绘制直方图&lt;/h3&gt;
&lt;h4 id=&#34;频数分布直方图&#34;&gt;频数分布直方图&lt;/h4&gt;
&lt;p&gt;　　假设你获取了250部电影的时长(列表a中),希望统计出这些电影时长的分布状态(比如时长为100分钟到120分钟电影的数量,出现的频率)等信息,你应该如何呈现这些数据?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from matplotlib import pyplot as plt
import matplotlib
# 设置字体样式
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;, &#39;size&#39;:&#39;10&#39;}
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
a=[131, 98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, 121, ...]
# 计算组距
dis = 3
num_bins = (max(a)-min(a))//dis
plt.figure(figsize=(12,8),dpi=80)
plt.hist(a, num_bins)
plt.xticks(range(min(a),max(a)+dis,dis))
plt.grid()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9019.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;频率分布直方图&#34;&gt;频率分布直方图&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;plt.hist(a, num_bins,normed=1/True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9020.png&#34; alt=&#34;png&#34;&gt;
&lt;b&gt;例&lt;/b&gt;. 在美国2004年人口普查发现有124 million的人在离家相对较远的地方工作. 根据他们从家到上班地点所需要的时间,通过抽样统计(最后一列)出了下表的数据,这些数据能够绘制成直方图么?
&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9021.png&#34; alt=&#34;png&#34;&gt;
&lt;em&gt;数据被统计后，组距不同（不能使用hist）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决办法：使用bar（条形图）在进行调整.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from matplotlib import pyplot as plt
import matplotlib
# 设置字体样式
font = {&#39;family&#39;: &amp;quot;simhei&amp;quot;,
        &#39;size&#39;:&#39;10&#39;}
matplotlib.rc(&amp;quot;font&amp;quot;,**font)
interval = [0,5,10,15,20,25,30,35,40,45,60,90]
width = [5,5,5,5,5,5,5,5,5,15,30,60]
quantity = [836,2737,3723,3926,3596,1438,3273,642,824,613,215,47]
plt.figure(figsize=(14,8),dpi=80)
# 默认宽度是0.8，为了是条形图连起来，令width=1
plt.bar(range(12), quantity, width=1)
# 设置X轴的刻度——为了让起点从零开始，所以i-1
_x = [i-0.5 for i in range(13)]
_xticks_labels = interval+[150]
plt.xticks(_x, _xticks_labels)
plt.grid(linestyle=&#39;--&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9022.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;复杂分析图&#34;&gt;复杂分析图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 使用gridspec和直方图绘制一个复杂分析图
import matplotlib.gridspec as gridspec

x = np.random.random(size=10000)
y = np.random.normal(loc=0., scale=1., size=10000)

plt.figure()
gspec = gridspec.GridSpec(3, 3)

top_hist = plt.subplot(gspec[0, 1:])
side_hist = plt.subplot(gspec[1:, 0])
lower_right = plt.subplot(gspec[1:, 1:])

lower_right.scatter(x, y)
top_hist.hist(x, bins=100, normed=True)
side_hist.hist(y, bins=100, orientation=&#39;horizontal&#39;, normed=True)
side_hist.invert_xaxis()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;热图&#34;&gt;热图&lt;/h3&gt;
&lt;p&gt;　　可用于三维数据可视化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plt.imshow(arr)
plt.hist2d()
plt.colorbar() # 添加颜色条
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;matplotlib支持的图形是非常多的，如果有其他的需求，可以查看一下url地址：http://matplotlib.org/gallery/index.html&lt;/li&gt;
&lt;li&gt;echarts中可以看框架实例&lt;/li&gt;
&lt;li&gt;更多绘图工具：
plotly:可视化工具中的github,相比于matplotlib更加简单,图形更加漂亮,同时兼容matplotlib和pandas
使用用法:简单,照着文档写即可&lt;/li&gt;
&lt;li&gt;文档地址: &lt;a href=&#34;https://plot.ly/python/&#34;&gt;https://plot.ly/python/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;备注：如果想使用子图，用subplot函数，如果对比子图则徐亚坐标轴相同，添加sharey=（跟哪张图共享坐标轴）&lt;/p&gt;
&lt;h2 id=&#34;pandas绘图&#34;&gt;Pandas绘图&lt;/h2&gt;
&lt;h3 id=&#34;pandas的dataframe绘图&#34;&gt;Pandas的DataFrame绘图&lt;/h3&gt;
&lt;p&gt;先转换成dataframe格式进行画图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;df.plot(kind=)
pd.plotting.Tools
pd.plotting.scatter_matrix()
pd.plotting.parallel_coordinates()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘制折线图&#34;&gt;绘制折线图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;np.random.seed(100)
df = pd.DataFrame({&#39;A&#39;: np.random.randn(365).cumsum(0),
                  &#39;B&#39;: np.random.randn(365).cumsum(0) + 20,
                  &#39;C&#39;: np.random.randn(365).cumsum(0) - 20},
                 index=pd.date_range(&#39;2017/1/1&#39;, periods=365))
df.plot()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9023.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;绘制散点图&#34;&gt;绘制散点图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;df.plot(&#39;A&#39;, &#39;B&#39;, kind=&#39;scatter&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9024.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 颜色(c)和大小(s)有&#39;B&#39;列的数据决定
ax = df.plot(&#39;A&#39;, &#39;C&#39;, kind=&#39;scatter&#39;,
        c=&#39;B&#39;, s=df[&#39;B&#39;], colormap=&#39;viridis&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%9025.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;盒形图&#34;&gt;盒形图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;df.plot(kind=&#39;box&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;柱状图&#34;&gt;柱状图&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;df.plot(kind=&#39;hist&#39;, alpha=0.7)
df.plot(kind=&#39;kde&#39;) # 拟合分布
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;seaborn绘图&#34;&gt;Seaborn绘图&lt;/h2&gt;
&lt;p&gt;seaborn的安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. conda install seaborn 
2. pip install seaborn
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Typora使用</title>
      <link>https://CoMath21.github.io/post/0-typora%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-typora%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文字特殊标注&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：#一级标题	##二级标题	######六级标题&lt;/p&gt;
&lt;h1 id=&#34;一级标题&#34;&gt;一级标题&lt;/h1&gt;
&lt;h2 id=&#34;二级标题&#34;&gt;二级标题&lt;/h2&gt;
&lt;h6 id=&#34;六级标题&#34;&gt;六级标题&lt;/h6&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;下划线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ctrl+u&lt;/p&gt;
&lt;p&gt;&lt;u&gt;下划线&lt;/u&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强调&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：在强调的内容前后各添加两个*&lt;/p&gt;
&lt;p&gt;ctrl+b&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强调的内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;斜体&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：内容前后各添加一个*&lt;/p&gt;
&lt;p&gt;ctrl+i&lt;/p&gt;
&lt;p&gt;&lt;em&gt;斜体内容&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：内容前后各添加两个~&lt;/p&gt;
&lt;p&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高亮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：内容前后各添加两个=&lt;/p&gt;
&lt;p&gt;==高亮==&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有序列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：数字1+.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无序列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：+/-/*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table&lt;/p&gt;
&lt;p&gt;ctrl+t&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;序号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;姓名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;成绩&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;排名&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;张三&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分割线&lt;/p&gt;
&lt;p&gt;使用方式：输入三个及以上*或-&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;插入本地图片：直接把图片拖入即可；
插入网络图片：! [图片标题] (图片链接)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1371234142,2709252765&amp;amp;fm=58&amp;amp;bpow=374&amp;amp;bpoh=374&#34; alt=&#34;辽宁工程技术大学&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：[链接提示] (链接地址)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;www.baidu.com&#34;&gt;百度&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数学公式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用方式：$$ 回车
$$
x^2+x_1+7=0
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;行内代码：代码两端各加一个`&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;System.out.println();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码块：输入三个~ 回车&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args){
   System.out.println(&amp;quot;hello world&amp;quot;);   
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用信号符和文字间加一个空格或回车，即可产生效果&lt;/li&gt;
&lt;li&gt;强大的导出功能&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>测试-Demo</title>
      <link>https://CoMath21.github.io/talk/demo/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/talk/demo/</guid>
      <description>&lt;p&gt;一个人最好的生活状态，是该看书时看书，该玩时尽情玩，看见优秀的人欣赏，看到落魄的人也不轻视，有自己的小生活和小情趣，不用去想改变世界，努力去活出自己。没人爱时专注自己，有人爱时，有能力拥抱彼此&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
