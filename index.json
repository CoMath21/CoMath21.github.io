[{"authors":null,"categories":null,"content":"","date":1611792000,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1611792000,"objectID":"7e67303e3d29a2216e9a2e04059938a0","permalink":"https://CoMath21.github.io/authors/comath/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/comath/","section":"authors","summary":"","tags":null,"title":"CoMath","type":"authors"},{"authors":null,"categories":null,"content":"关于我 96后，2019级计算数学硕士在读， 一个刚步入计算数学领域的小学生😂；本科专业信息与计算科学，当初作为一个刚刚步入大学生活的小年轻，没有过多的考虑，只想毕业工作挣钱😅. 在荒废了一年的时间后，开始学习计算机编程. C++入门，后自学Java进阶(也快忘的差不多了😖，不过编程的思想还在)，目前能够熟练掌握Matlab和Python(稍差一点). 相比较于编程，对数学的热爱略少一点(数学底子较差)，希望以后能够弥补这一短板. 不会抽烟，跟朋友会小酌一杯，喜欢动电影、动漫；运动细胞比较稀缺，仍不断开发训练中💪.\n为什么写博客 其实在我大三的时候就已经谋生了做个人博客的想法🤔，当时的我还是一心想着毕业之后工作，一直埋头于学程序、敲代码，很多学习笔记也是在那个时候积累的；凭借当初学习的Java、数据库等知识确实做了一个基于SSH框架的个人博客(如果还能重新搭建出原来的环境，我会将这个博客的代码共享出来😎)，想的是可以将学过的编程语言、遇到的各种Bug进行整理留个备份，方便自己随时翻阅；还有一个原因就是想着有这样一个完全由自己搭建的Blog能够得到HR的认可😄.直到后来选择读研就一直放下了，现在再捡起来的目的一是为了不想让当初整理的笔记无处安放，另一个也是为了督促自己能够在学习新知识的同时能把它讲出来，分享出来，这样对自己也是有推动作用的🧐. ","date":1611792000,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1611792000,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://CoMath21.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"关于我 96后，2019级计算数学硕士在读， 一个刚步入计算数学领域的小学生😂；本科专业信息与计算科学，当初作为一个刚刚步入大学生活的小年轻，没有过多的考虑，只想毕业工作挣钱😅. 在荒废了一年的时间后，开始学习计算机编程. C++入门，后自学Java进阶(也快忘的差不多了😖，不过编程的思想还在)，目前能够熟练掌握Matlab和Python(稍差一点). 相比较于编程，对数学的热爱略少一点(数学底子较差)，希望以后能够弥补这一短板. 不会抽烟，跟朋友会小酌一杯，喜欢动电影、动漫；运动细胞比较稀缺，仍不断开发训练中💪.\n为什么写博客 其实在我大三的时候就已经谋生了做个人博客的想法🤔，当时的我还是一心想着毕业之后工作，一直埋头于学程序、敲代码，很多学习笔记也是在那个时候积累的；凭借当初学习的Java、数据库等知识确实做了一个基于SSH框架的个人博客(如果还能重新搭建出原来的环境，我会将这个博客的代码共享出来😎)，想的是可以将学过的编程语言、遇到的各种Bug进行整理留个备份，方便自己随时翻阅；还有一个原因就是想着有这样一个完全由自己搭建的Blog能够得到HR的认可😄.直到后来选择读研就一直放下了，现在再捡起来的目的一是为了不想让当初整理的笔记无处安放，另一个也是为了督促自己能够在学习新知识的同时能把它讲出来，分享出来，这样对自己也是有推动作用的🧐. ","tags":null,"title":"Xin态好先生","type":"authors"},{"authors":["Xin态好先生","CoMath"],"categories":["学习笔记","编程语言"],"content":"Pandas 　","date":1611792000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1611792000,"objectID":"160ed39b47e3b45a7d11a8d243db6c3c","permalink":"https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/","publishdate":"2021-01-28T00:00:00Z","relpermalink":"/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/","section":"post","summary":"Python数据分析之Pandas.","tags":["编程语言","Python","数据分析"],"title":"Python数据分析（三）","type":"post"},{"authors":["Xin态好先生","CoMath"],"categories":["学习笔记","编程语言"],"content":"Numpy 　Numpy是一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算.\nNumpy简单创建数组 import numpy as np # 创建简单的列表 a = [1, 2, 3, 4]\t此处输出a的话是[1,2,3,4] # 将列表转换为数组 b = np.array(a)\t此处b输出的话是[1 2 3 4] np.array(a) = np.array(range(1,4)) = np.arange(1,4) np,arrange([start, ] stop[, step,], ftype=None) # 去小数 np.round(x,保留位数)  Numpy查看数组属性 数组元素个数：b.size\n数组形状：b.shape\n一维：列数(8,)；二维：行列(2, 4)；三维：块行列(2, 2, 4)\n重塑reshape：数组一个新的形状而不改变其数据.\n# 具有返回值的，不会改变原数组 numpy.reshape(a, newshape, order='C')\torder : {‘C’, ‘F’, ‘A’} # C:横着读横着写; E:竖着的竖着写; A:竖着度横着写  例.\na = np.array([[1,2,3], [4,5,6]]) print(a) [[1 2 3] [4 5 6]] print(np.reshape(a, (3,2))) [[1 2] [3 4] [5 6]]  数组维度：b.ndim\n数组元素类型：b.dtype\n快速创建N维数组的api函数\n#创建10行10列的数值为浮点1的矩阵 array_one = np.ones([10, 10]) #创建10行10列的数值为浮点0的矩阵 array_zero = np.zeros([10, 10]) #降到一维： b.flatten(order='C') # 把a降到一维，默认是按横的方向降order:{‘C’, ‘F’,‘A’,‘K’} b.flatten('F') # 按竖的方向降  轴(axis) 　在numpy中可以理解为方向,使用0,1,2\u0026hellip;数字表示,对于一个一维数组,只有一个0轴,对于2维数组(shape(2,2)),有0轴和1轴,对于三维数组(shape(2,2, 3)),有0,1,2轴. Numpy读取数据 （以后结合框架之类的读取文件大多数是从CSV文件中读取）\n　CSV（Comma-Separated Value,逗号分隔值文件）：由于csv便于展示,读取和写入,所以很多地方也是用csv的格式存储和传输中小型的数据,为了方便教学,我们会经常操作csv格式的文件,但是操作数据库中的数据也是很容易的实现的.\n方法\nnp.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)  注意 其中添加的delimiter和dtype以及unpack效果.\n delimiter：指定边界符号是什么，不指定会导致每行数据为一个整体法人字符串而报错 dtype：默认情况下对于较大的数据将变为科学计数法的方式 upack：默认值是False(0)，默认情况下，有多少条数据就会有多少行；为True(1)的情况下，每一列的数据会组成一行，袁术数据有多少列，加载出来就会有多少行，相当于转置的效果. 其他转置方法：t.transpose()\tt.T\tt.swapaxes(1,0) # 1轴和1轴互换.  Numpy索引和切片 # 取行： T[行] # 取连续的多行： T [2:] # 取不连续的多行： T [ [2,8,10] ] = T [[2,10,3],:] 取第2行：T [1,:] 取第三行以后所有行：T [2:,:] #取列： T [:,0] #取连续的多列： T [:, 2 :] #取不连续的多列： T [:,[ 0,2]] #去行和列，取第3行，第四列的值： a = T [ 2, 3] print(type(a))\t# int #取多行和多列，取第3行到第五行，第2列到第4列的结果 #去的是行和列交叉点的位置 b = T [2:5,1:4] #取多个不相邻的点--选出来的结果是（0，0） （2，1） （2，3） c = T [[0,2,2],[0,1,3]]  Numpy中布尔索引 # numpy中三元运算符 np.where(condition, if True, if False)  Numpy中的clip(裁剪) numpy.clip(a, a_min, a_max, out=None)  [a_min, a_max] 里面的数被保留下来,外面的被截取为a_min或者a_max .\nout：可以把结果放置在此数组中.\n例如，指定间隔为[0，1]，则小于0的值赋值为0，并且大于1的值赋值为1.\n补充：int类型的情况下无法赋值为nan，所以需要将类型改为float.\nt.astype(float) t[x,y]=np.nan  数组的拼接： np.vstack((t1,t2))\t# 竖直拼接 np.hstack((t1,t2))\t# 水平拼接  数组的行列交换 Numpy更多好用的方法  获取最大值最小值的位置 np.argmax(t,axis=0) np.argmin(t,axis=1) 创建一个全0的数组: np.zeros((3,4)) 创建一个全1的数组:np.ones((3,4)) 创建一个对角线为1的正方形数组(方阵)：np.eye(3)  Numpy生成随机数 Numpy中的注意点copy和view  a=b 完全不复制，a和b相互影响 a = b[:],视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的， a = b.copy(),复制，a和b互不影响  Numpy中的nan和inf（都是float类型） nan(NAN,Nan):not a number表示不是一个数字.\n什么时候numpy中会出现nan\n当我们读取本地的文件为float的时候，如果有缺失，就会出现nan． 　当做了一个不合适的计算的时候(比如无穷大(inf)减去无穷大)．\ninf(-inf,inf):infinity,inf表示正无穷，-inf表示负无穷\n什么时候回出现inf包括（-inf，+inf）\n比如一个数字除以0，（python中直接会报错，numpy中是一个inf或者-inf） Numpy中的nan的注意点 t.sum(axis=None) #求和 t.mean(a,axis=None) # 均值 受离群点的影响较大 np.median(t,axis=None) # 中值： t.max(axis=None) # 最大值： t.min(axis=None) # 最小值： np.ptp(t,axis=None) # 极值 即最大值和最小值只差 t.std(axis=None) # 标准差  ndarry缺失值填充均值 t中存在nan值，如何操作把其中的nan填充为每一列的均值\nt = array([[ 0., 1., 2., 3., 4., 5.], [ 6., 7., nan, 9., 10., 11.], [ 12., 13., 14., nan, 16., 17.], [ 18., 19., 20., 21., 22., 23.]]) def fill_ndarray(t1): #遍历每一列 for i in range(t1.shape[1]): temp_col = t1[:,i] #当前的一列 nan_num = np.count_nonzero(temp_col!=temp_col) if nan_num != 0: #不为0，说明当前这一列中有nan temp_not_nan_col = temp_col[temp_col==temp_col] #当前一列不为nan的array # 选中当前为nan的位置，把值赋值为不为nan的均值 temp_col[np.isnan(temp_col)] = temp_not_nan_col.mean() return t1 if __name__ == '__main__': t1 = np.arange(12).reshape((4, 3)).astype(\u0026quot;float\u0026quot;) t1[1, 1:] = np.nan print(t1) t1 = fill_ndarray(t1) print(t1)  输出结果\n[[ 0. 1. 2.]\t[[ 0. 1. 2.] [ 3. nan nan]\t[ 3. 6. 7.] [ 6. 7. 8.]\t[ 6. 7. 8.] [ 9. 10. 11.]]\t[ 9. 10. 11.]]  ","date":1611532800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1611532800,"objectID":"366acf95216fb391a3aaa0d6d31f7922","permalink":"https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/","publishdate":"2021-01-25T00:00:00Z","relpermalink":"/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/","section":"post","summary":"Python数据分析之Numpy.","tags":["编程语言","Python","数据分析"],"title":"Python数据分析（二）","type":"post"},{"authors":["Xin态好先生","CoMath"],"categories":["学习笔记","编程语言"],"content":"准备工作 环境安装（不是必要，只是为了能够更好的操作及维护） CONDA： conda类似于npm或maven的包管理工具，只是conda是针对于python的. 可以安装minconda或anaconda进行安装；Conda是一个包管理器；Anaconda是一个发行包.虽然Conda与Anaconda一起包装，但两者是具有不同目标的不同实体. CONDA安装（以Win64为例）: 可以到官网；也可以到国内清华镜像源进行下载镜像文件： 安装 ： 打开安装包，一路next 即可. 注意，勾选 添加环境变量 和 默认python3.6 作为Anaconda的语言. 安装成功后打开cmd命令输入\u0026quot;python\u0026quot;查看版本信息. 查看当前有哪些可以使用的python版本：conda search \u0026ndash;full -name python 安装python版本（安装的3.6的版本）：conda create \u0026ndash;name tensorflow python=3.6\nJupyter notebook jupyter notebook:一款编程/文档/笔记/展示软件. 启动命令:jupyter notebook （已经安装Anaconda/在conda环境下） Jupyter notebook好处  极其适合数据分析 支持多语言 分享便捷：支持以网页的形式分享，GitHub 中天然支持 Notebook 展示，也可以通过 nbviewer 分享你的文档. 当然也支持导出成 HTML、PDF、Markdown等多种格式的文档. 远程运行：在任何地点都可以通过网络链接远程服务器来实现运算. 交互式展现：不仅可以输出图片、视频、数学公式，甚至可以呈现一些互动的可视化内容，比如可以缩放的地图或者是可以旋转的三维模型. 这就需要交互式插件（Interactive widgets）来支持.  基础知识 matplotlib 最流行的Python底层绘图库，主要做数据可视化图表,名字取材于MATLAB，模仿MATLAB构建；能将数据进行可视化,更直观的呈现、使数据更加客观、更具说服力 matplotlib使用流程：\n 明确问题 选择图形的呈现方式 准备数据 绘图和图形完善  例. 假设一天中每隔两个小时(range(2,26,2))的气温(℃)分别是[15, 13, 14.5, 17, 20, 25, 26, 26, 27, 22, 18, 15].\n设置图片大小 fig = plt.figure(figsize=(10,6),dpi=80)  figure图形图标的意思，在这里指的是画的图；通过实例化一个figure并传递参数，能够在后台自动使用该figure实例；在图像模糊的时候可以传入dpi参数（每英寸上像素点的个数）\n保存到本地 　保存需要在绘制图形之后保存\nplt.show(\u0026quot;路径/名字.png\u0026quot;)  也可以保存为SVG这种矢量图的格式\n描述信息,比如x轴和y轴表示什么,这个图表示什么  plt.xlabel(\u0026quot;X轴\u0026quot;) plt.ylabel(\u0026quot;Y轴\u0026quot;) plt.title(\u0026quot;Title\u0026quot;) # 存在中文乱码问题  调整x或者y的刻度的间距  设置x轴的刻度（一个参数）  plt.xticks(x)  想要密集点可以设置：\n_xticks = [i/2 for I in range(4,49)] plt.xticks(_xticks) # 显得过于密集 plt.xticks(_xticks[::3]) # 每隔3取一个；只有列表的时候才能使用[ ]取步长   设置x轴的刻度（两个参数）  plt.xticks(x,_xticks_labels) _x = x # int类型 _xtick_labels = [\u0026quot;hello,{}\u0026quot;.format(i) for i in _x] plt.xticks(_x,_xtick_labels)  format函数: 格式化字符串的函数 str.format()，它增强了字符串格式化的功能. 基本语法是通过 {} 和 : ，来代替以前的%.\nformat 函数可以接受不限个参数，位置可以不按顺序.\n\u0026quot;{} {}\u0026quot;.format(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;) # 不设置指定位置，按默认顺序 'hello world'  format 函数可以接受不限个参数,位置也可以设置参数：\nprint(\u0026quot;网站名：{name}, 地址 {url}\u0026quot;.format(name=\u0026quot;百度\u0026quot;, url=\u0026quot;www.Baidu.com\u0026quot;))  改进：\n_x = list(x) # int类型 _xtick_labels = [\u0026quot;hello,{}\u0026quot;.format(i) for i in _x]\t# 取步长一样，数字和字符串一一对应，数据长度一样 plt.xticks(_x[::8],_xtick_labels[::8])  使用rotation参数旋转\nplt.xticks(_x[::8],_xtick_labels[::8],rotation=45)  中文情况处理： 　matplotlib默认不支持中文字符，因为默认的英文字体无法显示汉字\n如何修改matplotlib的默认字体?\n通过matplotlib.rc可以修改,具体方法参见源码(windows/linux) import matplotlib font = {'family': \u0026quot;simhei\u0026quot;,'size': '10'} # 黑体 matplotlib.rc(\u0026quot;font\u0026quot;,**font)  通过matplotlib 下的font_manager可以解决(windows/linux/mac)\n# 设置中文字体（指定的字体文件路径，然后在显示中文的地方添加fontproperties） my_font = font_manager.FontProperties(fname=\u0026quot;/System/Library/Fonts/PingFang.ttc\u0026quot;) plt.xticks(x[::5],_x_ticks[::5],rotation=90,fontproperties=my_font)  线条的样式(比如颜色,透明度等) plt.grid()\t# 绘制网格 plt.grid(alpha=0.6)\t# 绘制网格，并调整透明度  绘制风格及描述 　描述不同曲线含义：在plot()中添加参数label=\u0026quot;Name\u0026quot; 再添加语句：\nplt.legend(loc=0)/plt.legend(prop=my_font) # loc位置：0=best/upper left  常用统计图 　统计图是数据分析和数学建模最直接、最有效的可视化形式.这里只是简单说明在Python中不同的绘图命令.\n 折线图:以折线的上升或下降来表示统计数量的增减变化的统计图.  特点:能够显示数据的变化趋势，反映事物的变化情况(变化).   直方图:由一系列高度不等的纵向条纹或线段表示数据分布的情况. 一般用横轴表示数据范围，纵轴表示分布情况.  特点:绘制连续性的数据,展示一组或者多组数据的分布状况(统计).   条形图:排列在工作表的列或行中的数据可以绘制到条形图中.  特点:绘制连离散的数据,能够一眼看出各个数据的大小,比较数据之间的差别(统计).   散点图:用两组数据构成多个坐标点，考察坐标点的分布,判断两变量之间是否存在某种关联或总结坐标点的分布模式.  特点:判断变量之间是否存在数量关联趋势,展示离群点(分布规律).    绘制折线图：plt.plot(x,y) import numpy as np linear_data = np.arange(1, 9) quadratic_data = linear_data ** 2 plt.figure() plt.plot(linear_data, '-o', quadratic_data, '-o') # 注意，这里只指定了y轴数据，x轴的数据是matplotlib自动生成的 # 添加坐标轴标签及图例 plt.xlabel('x data') plt.ylabel('y data') plt.title('Line Chart Title') plt.legend(['legend1', 'legend2', 'legend3']) # 填充两个line间的区域plt.gca().fill_between(x,y1,y2,color,透明度) plt.gca().fill_between(range(len(linear_data)), linear_data, quadratic_data, facecolor='green', alpha=0.25)  注意：\n# 对于学术制图，可在标题中包含latex语法 ax = plt.gca() ax.set_title('Quadratic ($x^2$) vs. Linear ($x$)')  绘制散点图：plt.scatter(x,y) 假设通过爬虫你获取到了北京2016年3,10月份每天白天的最高气温(分别位于列表a,b),那么此时如何寻找出气温和随时间(天)变化的某种规律?\nfrom matplotlib import pyplot as plt import matplotlib # 设置字体样式 font = {'family': \u0026quot;simhei\u0026quot;, 'size':'10'} matplotlib.rc(\u0026quot;font\u0026quot;,**font) # 数据 y_3 = [11,17,16,11,12,11,12,6,6,7,8,9,12,15,14,17,18,21,16,17,20,14,15,15,15,19,21,22,22,22,23] y_10 = [26,26,28,19,21,17,16,19,18,20,20,19,22,23,17,20,21,20,22,15,11,15,5,13,17,10,11,13,12,13,6] # 3月，10月范围 x_3 = range(1,32) x_10 = range(50,81) # 合并横坐标 plt.figure(figsize=(14,8),dpi=80) # 绘制散点图 plt.scatter(x_3,y_3,label=\u0026quot;3月份\u0026quot;) plt.scatter(x_10,y_10,label=\u0026quot;10月份\u0026quot;) # 设置x轴 _x = list(x_3) + list(x_10) _xticks_labels = [\u0026quot;3月{}日\u0026quot;.format(i) for i in x_3] _xticks_labels += [\u0026quot;10月{}日\u0026quot;.format(i) for i in x_10] plt.xticks(_x[::3],_xticks_labels[::3],rotation=45) plt.legend(loc=\u0026quot;upper left\u0026quot;) # 显示设置 plt.xlabel(\u0026quot;月份\u0026quot;) plt.ylabel(\u0026quot;温度\u0026quot;) plt.title(\u0026quot;标题\u0026quot;) # 展示 plt.show()  绘制条形图/柱状图： plt.bar(x, y, width=0.2, color='orange') plt.bar(x, y, height=0.2, color='orange')  例.\nfrom matplotlib import pyplot as plt import matplotlib # 设置字体样式 font = {'family': \u0026quot;simhei\u0026quot;, 'size':'10'} matplotlib.rc(\u0026quot;font\u0026quot;,**font) a = [\u0026quot;战狼2\u0026quot;,\u0026quot;速度与激情8\u0026quot;,\u0026quot;功夫瑜伽\u0026quot;,\u0026quot;西游伏妖篇\u0026quot;,\u0026quot;变形金刚5：最后的骑士\u0026quot;,\u0026quot;摔跤吧！爸爸\u0026quot;,\u0026quot;加勒比海盗5：死无对证\u0026quot;,\u0026quot;金刚：骷髅岛\u0026quot;,\u0026quot;极限特工：终极回归\u0026quot;,\u0026quot;生化危机6：终章\u0026quot;,\u0026quot;乘风破浪\u0026quot;,\u0026quot;神偷奶爸3\u0026quot;,\u0026quot;智取威虎山\u0026quot;,\u0026quot;大闹天竺\u0026quot;,\u0026quot;金刚狼3：殊死一战\u0026quot;,\u0026quot;蜘蛛侠：英雄归来\u0026quot;,\u0026quot;悟空传\u0026quot;,\u0026quot;银河护卫队2\u0026quot;,\u0026quot;情圣\u0026quot;,\u0026quot;新木乃伊\u0026quot;] b = [56.01,26.94,17.53,16.49,15.45,12.96,11.8,11.61,11.28,11.12,10.49,10.3,8.75,7.55,7.32,6.99,6.88,6.86,6.58,6.23] plt.figure(figsize=(12,8),dpi=80) x = range(len(a)) plt.bar(x, b, width=0.2, color='orange') plt.xticks(x, a, rotation=45) plt.show()  发现字数长的名字错位,横向的条形图,将\nplt.bar(x, y, width=0.2, color='orange')  改成\nplt.bar(x, y, height=0.2, color='orange')  再适当调整其他参数. 例.假设你知道了列表a中电影分别在2017-09-14(b_14), 2017-09-15(b_15), 2017-09-16(b_16)三天的票房,为了展示列表中电影本身的票房以及同其他电影的数据对比情况,应该如何更加直观的呈现该数据?\nfrom matplotlib import pyplot as plt import matplotlib # 设置字体样式 font = {'family': \u0026quot;simhei\u0026quot;, 'size':'10'} matplotlib.rc(\u0026quot;font\u0026quot;,**font) a = [\u0026quot;猩球崛起3：终极之战\u0026quot;,\u0026quot;敦刻尔克\u0026quot;,\u0026quot;蜘蛛侠：英雄归来\u0026quot;,\u0026quot;战狼2\u0026quot;] b_16 = [15746,312,4497,319] b_15 = [12357,156,2045,168] b_14 = [2358,399,2358,362] bar_width = 0.2 plt.figure(figsize=(10,8),dpi=80) x_14 = list(range(len(a))) x_15 = [i+bar_width for i in x_14] x_16 = [i+bar_width for i in x_15] plt.bar(x_14, b_14, width=bar_width,label=\u0026quot;2017-09-14\u0026quot;) plt.bar(x_15, b_15, width=bar_width,label=\u0026quot;2017-09-15\u0026quot;) plt.bar(x_16, b_16, width=bar_width,label=\u0026quot;2017-09-16\u0026quot;) plt.xticks(x_15, a) plt.legend() plt.show()  堆叠柱状图\n# stack bar chart plt.figure() x_vals = list(range(len(linear_data))) plt.bar(x_vals, linear_data, width=0.3) plt.bar(x_vals, quadratic_data, width=0.3, bottom=linear_data)  绘制直方图 频数分布直方图 　假设你获取了250部电影的时长(列表a中),希望统计出这些电影时长的分布状态(比如时长为100分钟到120分钟电影的数量,出现的频率)等信息,你应该如何呈现这些数据?\nfrom matplotlib import pyplot as plt import matplotlib # 设置字体样式 font = {'family': \u0026quot;simhei\u0026quot;, 'size':'10'} matplotlib.rc(\u0026quot;font\u0026quot;,**font) a=[131, 98, 125, 131, 124, 139, 131, 117, 128, 108, 135, 138, 131, 102, 107, 114, 119, 128, 121, ...] # 计算组距 dis = 3 num_bins = (max(a)-min(a))//dis plt.figure(figsize=(12,8),dpi=80) plt.hist(a, num_bins) plt.xticks(range(min(a),max(a)+dis,dis)) plt.grid() plt.show()  频率分布直方图 plt.hist(a, num_bins,normed=1/True)  例. 在美国2004年人口普查发现有124 million的人在离家相对较远的地方工作. 根据他们从家到上班地点所需要的时间,通过抽样统计(最后一列)出了下表的数据,这些数据能够绘制成直方图么? 数据被统计后，组距不同（不能使用hist）\n解决办法：使用bar（条形图）在进行调整.\nfrom matplotlib import pyplot as plt import matplotlib # 设置字体样式 font = {'family': \u0026quot;simhei\u0026quot;, 'size':'10'} matplotlib.rc(\u0026quot;font\u0026quot;,**font) interval = [0,5,10,15,20,25,30,35,40,45,60,90] width = [5,5,5,5,5,5,5,5,5,15,30,60] quantity = [836,2737,3723,3926,3596,1438,3273,642,824,613,215,47] plt.figure(figsize=(14,8),dpi=80) # 默认宽度是0.8，为了是条形图连起来，令width=1 plt.bar(range(12), quantity, width=1) # 设置X轴的刻度——为了让起点从零开始，所以i-1 _x = [i-0.5 for i in range(13)] _xticks_labels = interval+[150] plt.xticks(_x, _xticks_labels) plt.grid(linestyle='--') plt.show()  复杂分析图 # 使用gridspec和直方图绘制一个复杂分析图 import matplotlib.gridspec as gridspec x = np.random.random(size=10000) y = np.random.normal(loc=0., scale=1., size=10000) plt.figure() gspec = gridspec.GridSpec(3, 3) top_hist = plt.subplot(gspec[0, 1:]) side_hist = plt.subplot(gspec[1:, 0]) lower_right = plt.subplot(gspec[1:, 1:]) lower_right.scatter(x, y) top_hist.hist(x, bins=100, normed=True) side_hist.hist(y, bins=100, orientation='horizontal', normed=True) side_hist.invert_xaxis()  热图 　可用于三维数据可视化\nplt.imshow(arr) plt.hist2d() plt.colorbar() # 添加颜色条  其他  matplotlib支持的图形是非常多的，如果有其他的需求，可以查看一下url地址：http://matplotlib.org/gallery/index.html echarts中可以看框架实例 更多绘图工具： plotly:可视化工具中的github,相比于matplotlib更加简单,图形更加漂亮,同时兼容matplotlib和pandas 使用用法:简单,照着文档写即可 文档地址: https://plot.ly/python/  备注：如果想使用子图，用subplot函数，如果对比子图则徐亚坐标轴相同，添加sharey=（跟哪张图共享坐标轴）\nPandas绘图 Pandas的DataFrame绘图 先转换成dataframe格式进行画图\ndf.plot(kind=) pd.plotting.Tools pd.plotting.scatter_matrix() pd.plotting.parallel_coordinates()  绘制折线图 np.random.seed(100) df = pd.DataFrame({'A': np.random.randn(365).cumsum(0), 'B': np.random.randn(365).cumsum(0) + 20, 'C': np.random.randn(365).cumsum(0) - 20}, index=pd.date_range('2017/1/1', periods=365)) df.plot()  绘制散点图 df.plot('A', 'B', kind='scatter')  # 颜色(c)和大小(s)有'B'列的数据决定 ax = df.plot('A', 'C', kind='scatter', c='B', s=df['B'], colormap='viridis')  盒形图 df.plot(kind='box')  柱状图 df.plot(kind='hist', alpha=0.7) df.plot(kind='kde') # 拟合分布  Seaborn绘图 seaborn的安装：\n1. conda install seaborn 2. pip install seaborn  ","date":1611273600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1611273600,"objectID":"bc0ba72ae8f8aed4b3757171e8e3b7df","permalink":"https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/","publishdate":"2021-01-22T00:00:00Z","relpermalink":"/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%901/","section":"post","summary":"Python数据分析前的准备.","tags":["编程语言","Python","数据分析"],"title":"Python数据分析（一）","type":"post"},{"authors":["Xin态好先生","CoMath"],"categories":["学习笔记","编程语言"],"content":"  文字特殊标注\n  标题\n使用方式：#一级标题\t##二级标题\t######六级标题\n一级标题 二级标题 六级标题   下划线\nctrl+u\n下划线\n  强调\n使用方式：在强调的内容前后各添加两个*\nctrl+b\n强调的内容\n  斜体\n使用方式：内容前后各添加一个*\nctrl+i\n斜体内容\n  删除线\n使用方式：内容前后各添加两个~\n删除线\n  高亮\n使用方式：内容前后各添加两个=\n==高亮==\n    list\n  有序列表\n使用方式：数字1+.\n      无序列表\n使用方式：+/-/*\n       table\nctrl+t\n   序号 姓名 成绩 排名     1 张三 100 1            分割线\n使用方式：输入三个及以上*或-\n    插入元素\n  图片\n插入本地图片：直接把图片拖入即可； 插入网络图片：! [图片标题] (图片链接)\n  链接\n使用方式：[链接提示] (链接地址)\n百度\n  数学公式\n使用方式：$$ 回车 $$ x^2+x_1+7=0 $$\n  代码\n行内代码：代码两端各加一个`\n​\tSystem.out.println();\n代码块：输入三个~ 回车\npublic static void main(String[] args){ System.out.println(\u0026quot;hello world\u0026quot;); }      注意  使用信号符和文字间加一个空格或回车，即可产生效果 强大的导出功能  ","date":1611100800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1611100800,"objectID":"6e4a2227ea2c55aa7d75770fac9a6ee8","permalink":"https://CoMath21.github.io/post/0-typora%E4%BD%BF%E7%94%A8/","publishdate":"2021-01-20T00:00:00Z","relpermalink":"/post/0-typora%E4%BD%BF%E7%94%A8/","section":"post","summary":"Typor快速入门简介","tags":["编程语言","Typora"],"title":"Typora使用","type":"post"},{"authors":["Xin态好先生","CoMath"],"categories":null,"content":"一个人最好的生活状态，是该看书时看书，该玩时尽情玩，看见优秀的人欣赏，看到落魄的人也不轻视，有自己的小生活和小情趣，不用去想改变世界，努力去活出自己。没人爱时专注自己，有人爱时，有能力拥抱彼此\n","date":1611100800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1611100800,"objectID":"83707939014fe3796e181283a66a9a76","permalink":"https://CoMath21.github.io/talk/demo/","publishdate":"2021-01-20T00:00:00Z","relpermalink":"/talk/demo/","section":"talk","summary":"总要留点东西占个地方.","tags":[],"title":"测试-Demo","type":"talk"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"c1d17ff2b20dca0ad6653a3161942b64","permalink":"https://CoMath21.github.io/people/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/people/","section":"","summary":"","tags":null,"title":"关于","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"5fcc8730459b0823616811b99a622d2b","permalink":"https://CoMath21.github.io/category/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/category/","section":"","summary":"","tags":null,"title":"分类","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9a6cb9348361050ffbcc0117246adb56","permalink":"https://CoMath21.github.io/tag/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/tag/","section":"","summary":"","tags":null,"title":"标签","type":"widget_page"}]