<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Numpy | CoMath</title>
    <link>https://CoMath21.github.io/tag/numpy/</link>
      <atom:link href="https://CoMath21.github.io/tag/numpy/index.xml" rel="self" type="application/rss+xml" />
    <description>Numpy</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>© 2021 CoMath Powered by Hugo Theme Academic</copyright><lastBuildDate>Mon, 25 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://CoMath21.github.io/images/logo_hud8da91bfe93f3d7d35fd2296e35ef0bf_39934_300x300_fit_lanczos_2.png</url>
      <title>Numpy</title>
      <link>https://CoMath21.github.io/tag/numpy/</link>
    </image>
    
    <item>
      <title>Python数据分析（二）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%902/</guid>
      <description>&lt;h2 id=&#34;numpy&#34;&gt;Numpy&lt;/h2&gt;
&lt;p&gt;　　Numpy是一个在Python中做科学计算的基础库，重在数值计算，也是大部分PYTHON科学计算库的基础库，多用于在大型、多维数组上执行数值运算.&lt;/p&gt;
&lt;h3 id=&#34;numpy简单创建数组&#34;&gt;Numpy简单创建数组&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import numpy as np
# 创建简单的列表
a = [1, 2, 3, 4]			 此处输出a的话是[1,2,3,4]
# 将列表转换为数组
b = np.array(a)			 此处b输出的话是[1 2 3 4]
np.array(a) = np.array(range(1,4)) = np.arange(1,4)
np,arrange([start, ] stop[, step,], ftype=None)
# 去小数
np.round(x,保留位数)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpy查看数组属性&#34;&gt;Numpy查看数组属性&lt;/h3&gt;
&lt;p&gt;数组元素个数：&lt;code&gt;b.size&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数组形状：&lt;code&gt;b.shape&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一维：列数(8,)；二维：行列(2, 4)；三维：块行列(2, 2, 4)&lt;/p&gt;
&lt;p&gt;重塑&lt;code&gt;reshape&lt;/code&gt;：数组一个新的形状而不改变其数据.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 具有返回值的，不会改变原数组
numpy.reshape(a, newshape, order=&#39;C&#39;)		
order : {‘C’, ‘F’, ‘A’}  
# C:横着读横着写; E:竖着的竖着写; A:竖着度横着写
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;例&lt;/b&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a = np.array([[1,2,3], [4,5,6]])
print(a)
[[1 2 3]
 [4 5 6]]
print(np.reshape(a, (3,2)))
 [[1 2]
 [3 4]
 [5 6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数组维度：&lt;code&gt;b.ndim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;数组元素类型：&lt;code&gt;b.dtype&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;快速创建N维数组的api函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建10行10列的数值为浮点1的矩阵
array_one = np.ones([10, 10])
#创建10行10列的数值为浮点0的矩阵
array_zero = np.zeros([10, 10])
#降到一维：
b.flatten(order=&#39;C&#39;)  
# 把a降到一维，默认是按横的方向降order:{‘C’, ‘F’,‘A’,‘K’}
b.flatten(&#39;F&#39;) 
# 按竖的方向降
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;轴axis&#34;&gt;轴(axis)&lt;/h3&gt;
&lt;p&gt;　　在numpy中可以理解为方向,使用0,1,2&amp;hellip;数字表示,对于一个一维数组,只有一个0轴,对于2维数组&lt;code&gt;(shape(2,2))&lt;/code&gt;,有0轴和1轴,对于三维数组&lt;code&gt;(shape(2,2, 3))&lt;/code&gt;,有0,1,2轴.
&lt;img src=&#34;./f1.png&#34; alt=&#34;二维数组的轴&#34;&gt;
&lt;img src=&#34;./f2.png&#34; alt=&#34;三维数组的轴&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy读取数据&#34;&gt;Numpy读取数据&lt;/h3&gt;
&lt;p&gt;（以后结合框架之类的读取文件大多数是从CSV文件中读取）&lt;/p&gt;
&lt;p&gt;　　CSV（Comma-Separated Value,逗号分隔值文件）：由于csv便于展示,读取和写入,所以很多地方也是用csv的格式存储和传输中小型的数据,为了方便教学,我们会经常操作csv格式的文件,但是操作数据库中的数据也是很容易的实现的.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;方法&lt;/b&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;np.loadtxt(fname,dtype=np.float,delimiter=None,skiprows=0,usecols=None,unpack=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;注意&lt;/b&gt; 其中添加的&lt;code&gt;delimiter&lt;/code&gt;和&lt;code&gt;dtype&lt;/code&gt;以及&lt;code&gt;unpack&lt;/code&gt;效果.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;delimiter：指定边界符号是什么，不指定会导致每行数据为一个整体法人字符串而报错&lt;/li&gt;
&lt;li&gt;dtype：默认情况下对于较大的数据将变为科学计数法的方式&lt;/li&gt;
&lt;li&gt;upack：默认值是False(0)，默认情况下，有多少条数据就会有多少行；为True(1)的情况下，每一列的数据会组成一行，袁术数据有多少列，加载出来就会有多少行，相当于转置的效果.&lt;/li&gt;
&lt;li&gt;其他转置方法：t.transpose()	t.T	t.swapaxes(1,0)  # 1轴和1轴互换.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;numpy索引和切片&#34;&gt;Numpy索引和切片&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 取行： T[行]
# 取连续的多行： T [2:]
# 取不连续的多行： T [ [2,8,10] ] = T [[2,10,3],:]
取第2行：T [1,:]
取第三行以后所有行：T [2:,:]
#取列： T [:,0]
#取连续的多列： T [:, 2 :]
#取不连续的多列： T [:,[ 0,2]]
#去行和列，取第3行，第四列的值：
a = T [ 2, 3]
print(type(a))	# int
#取多行和多列，取第3行到第五行，第2列到第4列的结果
#去的是行和列交叉点的位置
b = T [2:5,1:4]
#取多个不相邻的点--选出来的结果是（0，0） （2，1） （2，3）
c = T [[0,2,2],[0,1,3]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;numpy中布尔索引&#34;&gt;Numpy中布尔索引&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# numpy中三元运算符 
np.where(condition, if True, if False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy中的clip裁剪&#34;&gt;Numpy中的clip(裁剪)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;numpy.clip(a, a_min, a_max, out=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[a_min, a_max] 里面的数被保留下来,外面的被截取为&lt;code&gt;a_min&lt;/code&gt;或者&lt;code&gt;a_max &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;out&lt;/code&gt;：可以把结果放置在此数组中.&lt;/p&gt;
&lt;p&gt;例如，指定间隔为[0，1]，则小于0的值赋值为0，并且大于1的值赋值为1.&lt;/p&gt;
&lt;p&gt;补充：int类型的情况下无法赋值为nan，所以需要将类型改为float.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.astype(float)
t[x,y]=np.nan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数组的拼接&#34;&gt;数组的拼接：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;np.vstack((t1,t2))		# 竖直拼接
np.hstack((t1,t2))		# 水平拼接
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数组的行列交换&#34;&gt;数组的行列交换&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy更多好用的方法&#34;&gt;Numpy更多好用的方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;获取最大值最小值的位置&lt;/li&gt;
&lt;li&gt;np.argmax(t,axis=0)&lt;/li&gt;
&lt;li&gt;np.argmin(t,axis=1)&lt;/li&gt;
&lt;li&gt;创建一个全0的数组: np.zeros((3,4))&lt;/li&gt;
&lt;li&gt;创建一个全1的数组:np.ones((3,4))&lt;/li&gt;
&lt;li&gt;创建一个对角线为1的正方形数组(方阵)：np.eye(3)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;numpy生成随机数&#34;&gt;Numpy生成随机数&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f9.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;numpy中的注意点copy和view&#34;&gt;Numpy中的注意点copy和view&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;a=b 完全不复制，a和b相互影响&lt;/li&gt;
&lt;li&gt;a = b[:],视图的操作，一种切片，会创建新的对象a，但是a的数据完全由b保管，他们两个的数据变化是一致的，&lt;/li&gt;
&lt;li&gt;a = b.copy(),复制，a和b互不影响&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;numpy中的nan和inf都是float类型&#34;&gt;Numpy中的nan和inf（都是float类型）&lt;/h3&gt;
&lt;p&gt;nan(NAN,Nan):not a number表示不是一个数字.&lt;/p&gt;
&lt;p&gt;什么时候numpy中会出现nan&lt;/p&gt;
　　当我们读取本地的文件为float的时候，如果有缺失，就会出现nan．
&lt;p&gt;　　当做了一个不合适的计算的时候(比如无穷大(inf)减去无穷大)．&lt;/p&gt;
&lt;p&gt;inf(-inf,inf):infinity,inf表示正无穷，-inf表示负无穷&lt;/p&gt;
&lt;p&gt;什么时候回出现inf包括（-inf，+inf）&lt;/p&gt;
　　比如一个数字除以0，（python中直接会报错，numpy中是一个inf或者-inf）
&lt;h3 id=&#34;numpy中的nan的注意点&#34;&gt;Numpy中的nan的注意点&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t.sum(axis=None) #求和 
t.mean(a,axis=None)  # 均值 受离群点的影响较大
np.median(t,axis=None)  # 中值：
t.max(axis=None)  # 最大值：
t.min(axis=None)  # 最小值：
np.ptp(t,axis=None) # 极值 即最大值和最小值只差
t.std(axis=None)  # 标准差 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ndarry缺失值填充均值&#34;&gt;ndarry缺失值填充均值&lt;/h3&gt;
&lt;p&gt;t中存在nan值，如何操作把其中的nan填充为每一列的均值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;t = array([[  0.,   1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,  nan,   9.,  10.,  11.],
       [ 12.,  13.,  14.,  nan,  16.,  17.],
       [ 18.,  19.,  20.,  21.,  22.,  23.]])
def fill_ndarray(t1):
  #遍历每一列
  for i in range(t1.shape[1]):  
      temp_col = t1[:,i]  #当前的一列
      nan_num = np.count_nonzero(temp_col!=temp_col)
      if nan_num != 0: #不为0，说明当前这一列中有nan
          temp_not_nan_col = temp_col[temp_col==temp_col] #当前一列不为nan的array
          # 选中当前为nan的位置，把值赋值为不为nan的均值
          temp_col[np.isnan(temp_col)] = temp_not_nan_col.mean()
  return t1

if __name__ == &#39;__main__&#39;:
    t1 = np.arange(12).reshape((4, 3)).astype(&amp;quot;float&amp;quot;)
    t1[1, 1:] = np.nan
    print(t1)
    t1 = fill_ndarray(t1)
    print(t1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 0.  1.  2.]							[[ 0.  1.  2.]
 [ 3. nan nan]							[ 3.  6.  7.]
 [ 6.  7.  8.]							[ 6.  7.  8.]
 [ 9. 10. 11.]]							[ 9. 10. 11.]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
