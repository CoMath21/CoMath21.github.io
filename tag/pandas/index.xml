<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas | CoMath</title>
    <link>https://CoMath21.github.io/tag/pandas/</link>
      <atom:link href="https://CoMath21.github.io/tag/pandas/index.xml" rel="self" type="application/rss+xml" />
    <description>Pandas</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>© 2021 CoMath Powered by Hugo Theme Academic</copyright><lastBuildDate>Wed, 27 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://CoMath21.github.io/images/logo_hud8da91bfe93f3d7d35fd2296e35ef0bf_39934_300x300_fit_lanczos_2.png</url>
      <title>Pandas</title>
      <link>https://CoMath21.github.io/tag/pandas/</link>
    </image>
    
    <item>
      <title>Python数据分析（三）</title>
      <link>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://CoMath21.github.io/post/0-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%903/</guid>
      <description>&lt;p&gt;　　Numpy能够帮助我们处理数值，pandas除了处理数值之外(基于numpy)，还能够帮助我们处理其他类型的数据.&lt;/p&gt;
&lt;h2 id=&#34;pandas的常用数据类型&#34;&gt;pandas的常用数据类型&lt;/h2&gt;
&lt;h3 id=&#34;series-一维带标签数组&#34;&gt;Series 一维，带标签数组&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;t = pd.Series(np.arange(10),index=list(string.ascoo_uppercase[:10]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f1.png&#34; alt=&#34;png&#34;&gt;
Series切片和索引
&lt;img src=&#34;./f2.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./f3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;series的索引和值&#34;&gt;Series的索引和值&lt;/h4&gt;
&lt;p&gt;对于一个陌生的series类型，可以通过t.index获取其索引值
&lt;img src=&#34;./f4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;pandas读取外部数据&#34;&gt;pandas读取外部数据：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;直接使用&lt;code&gt;pd. read_csv()&lt;/code&gt;即可.&lt;/li&gt;
&lt;li&gt;如果待数据的数据没有列名，则需要补充，即在读取文件时给定参数names的值.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;pd.read_csv(“’’,names=column_names)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;column_names：指定类别名字,[&amp;lsquo;Sample code number&amp;rsquo;,&amp;lsquo;Clump Thickness&amp;rsquo;, &amp;lsquo;Uniformity of Cell Size&amp;rsquo;,&amp;lsquo;Uniformity of Cell Shape&amp;rsquo;,&amp;lsquo;Marginal Adhesion&amp;rsquo;, &amp;lsquo;Single Epithelial Cell Size&amp;rsquo;,&amp;lsquo;Bare Nuclei&amp;rsquo;,&amp;lsquo;Bland Chromatin&amp;rsquo;,&amp;lsquo;Normal Nucleoli&amp;rsquo;,&amp;lsquo;Mitoses&amp;rsquo;,&amp;lsquo;Class&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;return:数据.&lt;/li&gt;
&lt;li&gt;replace(to_replace=’’,value=)：返回数据.&lt;/li&gt;
&lt;li&gt;dropna():返回数据.
注：读取文件只要是.CSV文件就可以使用load_csv()方法，即使文件地址是网站.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dataframe-二维series容器&#34;&gt;DataFrame 二维，Series容器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./f5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;dataframe对象既有行索引又有列索引&#34;&gt;DataFrame对象既有行索引，又有列索引&lt;/h4&gt;
&lt;p&gt;行索引，表明不同行，横向索引，叫index，0轴，axis=0；
列索引，表名不同列，纵向索引，叫columns，1轴，axis=1．
和一个ndarray一样，通过ndim，shape，dtype了解这个ndarray的基本信息．
&lt;img src=&#34;./f6.png&#34; alt=&#34;png&#34;&gt;
　　获得使用次数最高的前几个名字是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd
df = pd.read_csv(&amp;quot;./dogNames.csv&amp;quot;)
# print(df.head())
# print(df.info())
# dataFrame 中排序的方法
df = df.sort_values(&amp;quot;Count_AnimalName&amp;quot;,ascending=False)
print(df.head())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=&#39;quicksort&#39;, 
		na_position=&#39;last&#39;)
# ascending：升序：True		
#            降序：False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;问题：数据有10列，我想按照其中的第1，第3，第8列排序？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pandas取行或者列的注意点
# - 方括号写数组,表示取行,对行进行操作
# - 写字符串,表示的去列索引,对列进行操作
print(df[:20])
print(df[&amp;quot;Row_Labels&amp;quot;])
print(type(df[&amp;quot;Row_Labels&amp;quot;]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有更多的经过pandas优化过的选择方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;df.loc&lt;/code&gt; 通过标签索引行数据（行列的名字）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;df.loc[“a”,”w”]  # a行w列
df.loc[“a”,:]  # a行
df.loc[:,”w”]  # w列
df.loc[[“a”,”c”],:]  # a，c行
df.loc[:,[“w”,”z”]]  # w，z列
df.loc[[“a”,”c” ,[“w”,”z”]]  # a,c行，w,z列
df.loc[[“a”:”c” ,[“w”,”z”]]  # a到c行，w,z列
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;df.iloc &lt;/code&gt;通过位置获取行数据（行列号-1）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;df.iloc[1,:]    # 第二行
df.iloc[:,2]    # 第三列
df.iloc[:,[2,1]]    # 第三列第二列
df.iloc[[0,2], [2,1]]	# 第1,3行, 第3,2列
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f9.png&#34; alt=&#34;png&#34;&gt;
赋值更改数据的过程：
&lt;img src=&#34;./f10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;布尔索引&#34;&gt;布尔索引&lt;/h4&gt;
&lt;p&gt;　　找到所有的使用次数超过800的狗的名字.
&lt;img src=&#34;./f11.png&#34; alt=&#34;png&#34;&gt;
找到所有的使用次数超过700并且名字的字符串的长度大于4的狗的名字
&lt;img src=&#34;./f12.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串方法&#34;&gt;字符串方法&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./f13.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pandas缺失数据的处理&#34;&gt;Pandas缺失数据的处理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./f14.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据缺失通常有两种情况&#34;&gt;数据缺失通常有两种情况：&lt;/h3&gt;
&lt;p&gt;　　一种就是空，None等，在pandas是NaN(和np.nan一样);另一种是我们让其为0，蓝色框中对于NaN的数据，在numpy中我们是如何处理的？&lt;/p&gt;
&lt;p&gt;　　在pandas中我们处理起来非常容易.&lt;/p&gt;
&lt;p&gt;判断数据是否为NaN：&lt;code&gt;pd.isnull(df),pd.notnull(df)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理方式1：删除NaN所在的行列dropna (axis=0, how=&amp;lsquo;any&amp;rsquo;, inplace=False)# 是否原地修改&lt;/li&gt;
&lt;li&gt;处理方式2：填充数据，t.fillna(t.mean()),t.fiallna(t.median()),t.fillna(0)&lt;/li&gt;
&lt;li&gt;处理为0的数据：&lt;code&gt;t[t==0]=np.nan&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然并不是每次为0的数据都需要处理计算平均值等情况，nan是不参与计算的，但0会.&lt;/p&gt;
&lt;h3 id=&#34;数据变形&#34;&gt;数据变形：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;处理重复数据
&lt;ul&gt;
&lt;li&gt;判断数据是否重复，&lt;code&gt;duplicated()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;去除重复数据，&lt;code&gt;drop_dumplicates()&lt;/code&gt;，可指定列及如何保留数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用函数或map转化数据，通常根据字典进行数据转化&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;data = pd.DataFrame({&#39;food&#39;: [&#39;bacon&#39;, &#39;pulled pork&#39;, &#39;bacon&#39;, &#39;Pastrami&#39;, &#39;corned beef&#39;, 
       &#39;Bacon&#39;, &#39;pastrami&#39;, &#39;honey ham&#39;, &#39;nova lox&#39;], 
       &#39;ounces&#39;: [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f15.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加一列，用于指定食物的来源
meat_to_animal = {
    &#39;bacon&#39;: &#39;pig&#39;,
    &#39;pulled pork&#39;: &#39;pig&#39;,
    &#39;pastrami&#39;: &#39;cow&#39;,
    &#39;corned beef&#39;: &#39;cow&#39;,
    &#39;honey ham&#39;: &#39;pig&#39;,
    &#39;nova lox&#39;: &#39;salmon&#39;
}
# 使用map()
lowercased = data[&#39;food&#39;].str.lower()
data[&#39;animal&#39;] = lowercased.map(meat_to_animal)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./f16.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换值，&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;离散化和分享操作，&lt;code&gt;pd.cut()&lt;/code&gt;，返回&lt;code&gt;Categorical&lt;/code&gt;对象
&lt;img src=&#34;./f17.png&#34; alt=&#34;png&#34;&gt;
&lt;img src=&#34;./f18.png&#34; alt=&#34;png&#34;&gt;&lt;/li&gt;
&lt;li&gt;哑变量操作，&lt;code&gt;pd.get_dummies()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;向量化字符串操作
&lt;ul&gt;
&lt;li&gt;字符串列越苏中是否包含子字符串，&lt;code&gt;ser_obj.str.contains()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串列切片操作，&lt;code&gt;ser_obj.str[a:b]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
